workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "feature.ygvkn" && $CI_PIPELINE_SOURCE == "push"'
      changes:
        - $RULES_CHANGES_PATH
    - if: $CI_COMMIT_BRANCH == "master"
      variables:
        DEPLOY_ENV: "prod"
        WHAT_IS_STAND: "prod"
        DEPLOY_VARIABLE: "DEPLOY_TO_PROD"
    - if: $CI_COMMIT_BRANCH == "feature.ygvkn"
      variables:
        DEPLOY_ENV: dev
        WHAT_IS_STAND: dev
        DEPLOY_VARIABLE: DEPLOY_TO_DEV
    - if: $CI_COMMIT_BRANCH =~ "/^devel\.*$/i"
      variables:
        DEPLOY_ENV: "dev"
        WHAT_IS_STAND: "dev"
        DEPLOY_VARIABLE: "DEPLOY_TO_DEV"
    - if: $CI_COMMIT_BRANCH == "stage"
      variables:
        DEPLOY_ENV: "stage"
        WHAT_IS_STAND: "stage"
        DEPLOY_VARIABLE: "DEPLOY_TO_STAGE"

stages:
    - Lint
    - swag
    - API
    - test
    - compile
    - build
    - switch_and_deploy

include:
  - local: '.gitlab-ci/templates/.compile.yml'
  - local: '.gitlab-ci/templates/.gitlab_api.yml'
  - local: '.gitlab-ci/templates/.switch.yml'
  - local: '.gitlab-ci/templates/.build.yml'

variables:
  #GOPATH: ${CI_PROJECT_DIR}/.go
    GOPATH: /tmp/.go
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    DOCKER_DRIVER: overlay2
    FF_NETWORK_PER_BUILD: "true"
    FF_USE_NEW_SHELL_ESCAPE: "true"
    FF_GITLAB_REGISTRY_HELPER_IMAGE: "true"
    FF_USE_FASTZIP: "true"
    FF_ENABLE_JOB_CLEANUP: "false"  #IF TRUE - Clean dir project
    GET_SOURCES_ATTEMPTS: 3
    RESTORE_CACHE_ATTEMPTS: 3
    ARTIFACT_DOWNLOAD_ATTEMPTS: 3
    EXECUTOR_JOB_SECTION_ATTEMPTS: 3
    TRANSFER_METER_FREQUENCY: "2s"
    ARTIFACT_COMPRESSION_LEVEL: "fast"
    CACHE_COMPRESSION_LEVEL: "fastest"
    # WHAT_IS_STAND: "${CI_COMMIT_REF_NAME}-${CI_COMMIT_BRANCH}-${CI_DEFAULT_BRANCH}"
    DEPLOY_VARIABLE: "Default"
    DOCKER_TLS_DIR:  "$HOME/.docker"
    DOCKER_TLS_VERIFY: 1
    DOCKER_HOST: "unknown"
    BUILD_DATE: "date +%Y-%m-%d-%H:%M:%S"
    RULES_CHANGES_PATH: "${CI_PROJECT_DIR}/cmd/**/*"


cache: &shared_cache
  key: shared_cache
  paths:
    - $GOPATH/bin/
    - $CI_PROJECT_DIR/StateStore/
      #untracked: true
  policy: pull-push

    #
    #Lint:
    #  stage: Lint
    #  image: golang:1.17
    #  script:
    #    - go env GOPATH
    #    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.42.1
    #    - /tmp/.go/bin/golangci-lint --version
    #  when: manual
    #  tags:
    #    - office
    #
    #
    #test:
    #  stage: test
    #  image: golang:1.17
    #  script:
    #    - go test -v -timeout=660s -gcflags=-l ./components/...
    #    - go test -v -timeout=660s -gcflags=-l ./libs/...
    #  when: manual
    #  tags:
    #    - office
    #
    #swag:
    #  stage: swag
    #  script:
    #    - echo "TO DO"
    #  when: manual
    #  tags:
    #    - office

API:
  stage: API
  extends: .api


compile:
  stage: compile
  image: golang:latest
  variables:
    APP_SERVICE: "Default"
      #CI_DEBUG_TRACE: "true"
  extends: .compile
  cache:
    key: compile_cache
      #key: ${CI_COMMIT_REF_NAME}
    paths:
      - ${CI_PROJECT_DIR}/StateStore
    policy: pull
  artifacts:
    name: "state"
    paths:
      - $CI_PROJECT_DIR/StateStore
    expire_in: 8 mins
      #expire_in: 8 hour
  timeout: 8  minutes
    #  when: manual
    #parallel: 3
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  tags:
    - server-side


build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  needs:
    - job: compile
      artifacts: true
  extends: .build
  cache:
    <<: *shared_cache
    policy: pull
  timeout: 8 minutes
    #when: manual
  tags:
    - server-side

#DEPLOY#
switch_and_deploy:
  stage: switch_and_deploy
  image: docker:latest
  services:
    - docker:dind
  variables:
    CHECK: "check here..."
    DOCKER_HOST: "tcp://swarm05-${WHAT_IS_STAND}.bred.team:2376"
  extends: .switch
  allow_failure: true
  cache:
    <<: *shared_cache
    paths:
      - $CI_PROJECT_DIR/StateStore
    policy: pull
  after_script:
    - echo -e "\e[0;35m$CHECK"
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
        #when: manual
  tags:
    - k8s

