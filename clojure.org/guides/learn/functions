<!DOCTYPE html>
<!-- This site was created in Webflow. http://www.webflow.com-->
<!-- Last Published: Fri Nov 13 2015 01:48:45 GMT+0000 (UTC) -->
<html lang="en" data-wf-site="56414d6fc8c27cad0f4e12e7" data-wf-page="5643ac587b1f28dc58ed6b89">
<head>
  <meta charset="utf-8">
  <title>Clojure - Learn Clojure - Functions</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="generator" content="Webflow">
  <meta name="google-site-verification" content="a30CDuC9UBifM7EL575LK9a4TEE6mNfWbKqXIoSZChg" />
  <meta name="google-site-verification" content="iXqpntr4CN3JRM1sVm5D_YzZw8bFRizBaTVycwqii2E" />
  <meta name="keywords" content="clojure,programming" />
  <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,600;1,300;1,400;1,600&family=PT+Serif:ital@0;1&&family=Source+Code+Pro:wght@500&display=swap">
  <link rel="stylesheet" type="text/css" href="/css/normalize.css">
  <link rel="stylesheet" type="text/css" href="/css/webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/clojureorg.webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/asciidoctor-mod.css">
  <link type="text/css" href="/css/default-en.css" rel="stylesheet">
  <link type="text/css" href="/css/default.css" rel="stylesheet">
  <link type="text/css" href="/css/search-result.css" rel="stylesheet">
  <link rel="alternate" type="application/atom+xml" title="News" href="/feed.xml" />
  <script type="text/javascript" src="/js/modernizr.js"></script>
  <link rel="shortcut icon" type="image/x-icon" href="/images/clojure-logo-icon-32.png">
  <link rel="apple-touch-icon" href="/images/clojure-logo-icon-256.png">
  <!-- Matomo -->
  <script>
    var _paq = window._paq = window._paq || [];
    /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
      var u="https://cognitect.matomo.cloud/";
      _paq.push(['setTrackerUrl', u+'matomo.php']);
      _paq.push(['setSiteId', '9']);
      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
      g.async=true; g.src='//cdn.matomo.cloud/cognitect.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);
    })();
  </script>
<!-- End Matomo Code -->
  <script type="text/javascript">
    function searchClj(obj) {
      let e = document.getElementById("searchType");
      document.getElementById("hiddenSearch").value=e.value;
    }
  </script>
</head>
<body>
  <div data-collapse="none" data-animation="default" data-duration="400" data-contain="1" class="w-nav clj-navbar">
    <div class="w-container">
      <a href="/index" class="w-nav-brand w-clearfix clj-logo-container"><img width="60" src="/images/clojure-logo-120b.png" class="clj-logo" alt="Clojure logo">
        <div class="clj-logo-text">Clojure</div>
      </a>
      <nav role="navigation" class="w-nav-menu clj-nav-menu"><a href="/about/rationale" class="w-nav-link clj-nav-link">Overview</a><a href="/reference/documentation" class="w-nav-link clj-nav-link">Reference‚Äç</a><a href="/api/api" class="w-nav-link clj-nav-link">API</a><a href="/releases/downloads" class="w-nav-link clj-nav-link">Releases</a><a href="/guides/guides" class="w-nav-link clj-nav-link">Guides</a><a href="/community/success_stories" class="w-nav-link clj-nav-link">Community</a><a href="/dev/dev" class="w-nav-link clj-nav-link">Dev</a><a href="/news/news" class="w-nav-link clj-nav-link">News</a><a href="#" data-ix="search-click-trigger" class="w-nav-link clj-nav-link clj-nav-search">&#xed11;</a>
      </nav>
      <div class="w-nav-button clj-menu-button">
        <div class="w-icon-nav-menu"></div>
      </div>
    </div>
  </div>
  <div data-ix="hide-search" class="w-section clj-search-section">
    <div class="w-container">
      <div class="w-form clj-search-form-wrapper">
        <form id="wf-form-Search-Form" name="wf-form-Search-Form" action="https://duckduckgo.com/" method="get" onSubmit="searchClj(this)">
          <div class="w-row">
            <div class="w-col w-col-6 w-col-small-6">
              <input id="hiddenSearch" type="hidden" name="sites" value="www.clojure.org">
              <input name="q" id="q" type="text" placeholder="Search clojure.org reference, guides, and API" title="Search text" autofocus="autofocus" class="w-input clj-search-input">
            </div>
            <div class="w-col w-col-3 w-col-small-3 clj-search-type">
              <select name="searchType" id="searchType" class="w-select clj-search-type">
                <option value="www.clojure.org">clojure.org</option>
                <option value="ask.clojure.org">ask.clojure.org</option>
              </select>
            </div>
            <div class="w-col w-col-3 w-col-small-3">
              <input type="submit" value="Search" class="w-button clj-search-submit">
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

<div class="w-section clj-content-section">
  <div class="w-container">
    <div class="clj-section-nav-container">
      <div data-collapse="small" data-animation="default" data-duration="200" data-contain="1" class="w-nav clj-section-navbar">
        <div class="w-container">
          <nav role="navigation" class="w-nav-menu clj-section-nav-menu">
            <a href="../guides" class="w-nav-link clj-section-nav-item-link"><span class="clj-nav-nested-icon">&#xeab5;</span> Back to Guides</a>
            <div class="w-nav-link clj-section-nav-heading">Topics</div>
            <a href="clojure" class="w-nav-link clj-section-nav-item-link">Introduction</a>
            <a href="syntax" class="w-nav-link clj-section-nav-item-link">Syntax</a>
            <a href="functions" class="w-nav-link clj-section-nav-item-link">Functions</a>
            <a href="sequential_colls" class="w-nav-link clj-section-nav-item-link">Sequential Collections</a>
            <a href="hashed_colls" class="w-nav-link clj-section-nav-item-link">Hashed Collections</a>
            <a href="flow" class="w-nav-link clj-section-nav-item-link">Flow Control</a>
            <a href="namespaces" class="w-nav-link clj-section-nav-item-link">Namespaces</a>
          </nav>
          <div data-ix="toggle-section-nav-icon" class="w-nav-button w-clearfix clj-section-nav-toggle">
            <div class="clj-section-nav-text">Functions</div>
            <div class="clj-section-nav-icon-closed">&#xeab2;</div>
            <div data-ix="init-hide-section-nav-icon-open" class="clj-section-nav-icon-open">&#xeab9;</div>
          </div>
        </div>
      </div>
    </div>
    <div class="clj-content-container">

      <h1>Learn Clojure - Functions</h1>

      <div id="preamble">
<div class="sectionbody">
<div id="toc" class="toc">
<div id="toctitle" class="title">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_creating_functions">Creating Functions</a>
<ul class="sectlevel2">
<li><a href="#_multi_arity_functions">Multi-arity functions</a></li>
<li><a href="#_variadic_functions">Variadic functions</a></li>
<li><a href="#_anonymous_functions">Anonymous Functions</a></li>
<li><a href="#_defn_vs_fn"><code>defn</code> vs <code>fn</code></a></li>
<li><a href="#_anonymous_function_syntax">Anonymous function syntax</a></li>
<li><a href="#_gotcha">Gotcha</a></li>
</ul>
</li>
<li><a href="#_applying_functions">Applying Functions</a>
<ul class="sectlevel2">
<li><a href="#_apply"><code>apply</code></a></li>
</ul>
</li>
<li><a href="#_locals_and_closures">Locals and Closures</a>
<ul class="sectlevel2">
<li><a href="#_let"><code>let</code></a></li>
<li><a href="#_closures">Closures</a></li>
</ul>
</li>
<li><a href="#_java_interop">Java Interop</a>
<ul class="sectlevel2">
<li><a href="#_invoking_java_code">Invoking Java code</a></li>
<li><a href="#_java_methods_vs_functions">Java Methods vs Functions</a></li>
</ul>
</li>
<li><a href="#_test_your_knowledge">Test your knowledge</a></li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_creating_functions"><a class="anchor" href="#_creating_functions"></a>Creating Functions</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Clojure is a functional language. Functions are first-class and can be passed-to or returned-from other functions. Most Clojure code consists primarily of pure functions (no side effects), so invoking with the same inputs yields the same output.</p>
</div>
<div class="paragraph">
<p><code>defn</code> defines a named function:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">;;    name   params         body
;;    -----  ------  -------------------
(defn greet  [name]  (str "Hello, " name) )</code></pre>
</div>
</div>
<div class="paragraph">
<p>This function has a single parameter <code>name</code>, however you may include any number of parameters in the params vector.</p>
</div>
<div class="paragraph">
<p>Invoke a function with the name of the function in "function position" (the first element of a list):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (greet "students")
"Hello, students"</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_multi_arity_functions"><a class="anchor" href="#_multi_arity_functions"></a>Multi-arity functions</h3>
<div class="paragraph">
<p>Functions can be defined to take different numbers of parameters (different "arity"). Different arities must all be defined in the same <code>defn</code> - using <code>defn</code> more than once will replace the previous function.</p>
</div>
<div class="paragraph">
<p>Each arity is a list <code>([param*] body*)</code>. One arity can invoke another. The body can contain any number of expressions and the return value is the result of the last expression.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn messenger
  ([]     (messenger "Hello world!"))
  ([msg]  (println msg)))</code></pre>
</div>
</div>
<div class="paragraph">
<p>This function declares two arities (0 parameters and 1 parameter). The 0-parameter arity calls the 1-parameter arity with a default value to print. We invoke these functions by passing the appropriate number of arguments:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (messenger)
Hello world!
nil

user=&gt; (messenger "Hello class!")
Hello class!
nil</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_variadic_functions"><a class="anchor" href="#_variadic_functions"></a>Variadic functions</h3>
<div class="paragraph">
<p>Functions may also define a variable number of parameters - this is known as a "variadic" function. The variable parameters must occur at the end of the parameter list. They will be collected in a sequence for use by the function.</p>
</div>
<div class="paragraph">
<p>The beginning of the variable parameters is marked with <code>&amp;</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn hello [greeting &amp; who]
  (println greeting who))</code></pre>
</div>
</div>
<div class="paragraph">
<p>This function takes a parameter <code>greeting</code> and a variable number of parameters (0 or more) that will be collected in a list named <code>who</code>. We can see this by invoking it with 3 arguments:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (hello "Hello" "world" "class")
Hello (world class)</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can see that when <code>println</code> prints <code>who</code>, it is printed as a list of two elements that were collected.</p>
</div>
</div>
<div class="sect2">
<h3 id="_anonymous_functions"><a class="anchor" href="#_anonymous_functions"></a>Anonymous Functions</h3>
<div class="paragraph">
<p>An anonymous function can be created with <code>fn</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">;;    params         body
;;   ---------  -----------------
(fn  [message]  (println message) )</code></pre>
</div>
</div>
<div class="paragraph">
<p>Because the anonymous function has no name, it cannot be referred to later. Rather, the anonymous function is typically created at the point it is passed to another function.</p>
</div>
<div class="paragraph">
<p>Or it&#8217;s possible to immediately invoke it (this is not a common usage):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">;;     operation (function)             argument
;; --------------------------------  --------------
(  (fn [message] (println message))  "Hello world!" )

;; Hello world!</code></pre>
</div>
</div>
<div class="paragraph">
<p>Here we defined the anonymous function in the function position of a larger expression that immediately invokes the expression with the argument.</p>
</div>
<div class="paragraph">
<p>Many languages have both statements, which imperatively do something and do not return a value, and expressions which do. Clojure has <strong>only</strong> expressions that return a value. We&#8217;ll see later that this includes even flow control expressions like <code>if</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_defn_vs_fn"><a class="anchor" href="#_defn_vs_fn"></a><code>defn</code> vs <code>fn</code></h3>
<div class="paragraph">
<p>It might be useful to think of <code>defn</code> as a contraction of <code>def</code> and <code>fn</code>. The <code>fn</code> defines the function and the <code>def</code> binds it to a name. These are equivalent:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn greet [name] (str "Hello, " name))

(def greet (fn [name] (str "Hello, " name)))</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_anonymous_function_syntax"><a class="anchor" href="#_anonymous_function_syntax"></a>Anonymous function syntax</h3>
<div class="paragraph">
<p>There is a shorter form for the <code>fn</code> anonymous function syntax implemented in the Clojure reader: <code>#()</code>. This syntax omits the parameter list and names parameters based on their position.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>%</code> is used for a single parameter</p>
</li>
<li>
<p><code>%1</code>, <code>%2</code>, <code>%3</code>, etc are used for multiple parameters</p>
</li>
<li>
<p><code>%&amp;</code> is used for any remaining (variadic) parameters</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Nested anonymous functions would create an ambiguity as the parameters are not named, so nesting is not allowed.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">;; Equivalent to: (fn [x] (+ 6 x))
#(+ 6 %)

;; Equivalent to: (fn [x y] (+ x y))
#(+ %1 %2)

;; Equivalent to: (fn [x y &amp; zs] (println x y zs))
#(println %1 %2 %&amp;)</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_gotcha"><a class="anchor" href="#_gotcha"></a>Gotcha</h3>
<div class="paragraph">
<p>One common need is an anonymous function that takes an element and wraps it in a vector. You might try writing that as:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">;; DO NOT DO THIS
#([%])</code></pre>
</div>
</div>
<div class="paragraph">
<p>This anonymous function expands to the equivalent:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(fn [x] ([x]))</code></pre>
</div>
</div>
<div class="paragraph">
<p>This form will wrap in a vector <strong>and</strong> try to invoke the vector with no arguments (the extra pair of parentheses). Instead:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">;; Instead do this:
#(vector %)

;; or this:
(fn [x] [x])

;; or most simply just the vector function itself:
vector</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_applying_functions"><a class="anchor" href="#_applying_functions"></a>Applying Functions</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_apply"><a class="anchor" href="#_apply"></a><code>apply</code></h3>
<div class="paragraph">
<p>The <code>apply</code> function invokes a function with 0 or more fixed arguments, and draws the rest of the needed arguments from a final sequence. The final argument <strong>must</strong> be a sequence.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(apply f '(1 2 3 4))    ;; same as  (f 1 2 3 4)
(apply f 1 '(2 3 4))    ;; same as  (f 1 2 3 4)
(apply f 1 2 '(3 4))    ;; same as  (f 1 2 3 4)
(apply f 1 2 3 '(4))    ;; same as  (f 1 2 3 4)</code></pre>
</div>
</div>
<div class="paragraph">
<p>All 4 of these calls are equivalent to <code>(f 1 2 3 4)</code>. <code>apply</code> is useful when arguments are handed to you as a sequence but you must invoke the function with the values in the sequence.</p>
</div>
<div class="paragraph">
<p>For example, you can use <code>apply</code> to avoid writing this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn plot [shape coords]   ;; coords is [x y]
  (plotxy shape (first coords) (second coords)))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Instead you can simply write:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn plot [shape coords]
  (apply plotxy shape coords))</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_locals_and_closures"><a class="anchor" href="#_locals_and_closures"></a>Locals and Closures</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_let"><a class="anchor" href="#_let"></a><code>let</code></h3>
<div class="paragraph">
<p><code>let</code> binds symbols to values in a "lexical scope". A lexical scope creates a new context for names, nested inside the surrounding context. Names defined in a <code>let</code> take precedence over the names in the outer context.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">;;      bindings     name is defined here
;;    ------------  ----------------------
(let  [name value]  (code that uses name))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Each <code>let</code> can define 0 or more bindings and can have 0 or more expressions in the body.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [x 1
      y 2]
  (+ x y))</code></pre>
</div>
</div>
<div class="paragraph">
<p>This <code>let</code> expression creates two local bindings for <code>x</code> and <code>y</code>. The expression <code>(+ x y)</code> is in the lexical scope of the <code>let</code> and resolves x to 1 and y to 2. Outside the <code>let</code> expression, x and y will have no continued meaning, unless they were already bound to a value.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn messenger [msg]
  (let [a 7
        b 5
        c (clojure.string/capitalize msg)]
    (println a b c)
  ) ;; end of let scope
) ;; end of function</code></pre>
</div>
</div>
<div class="paragraph">
<p>The messenger function takes a <code>msg</code> argument. Here the <code>defn</code> is also creating lexical scope for <code>msg</code> - it only has meaning within the <code>messenger</code> function.</p>
</div>
<div class="paragraph">
<p>Within that function scope, the <code>let</code> creates a new scope to define <code>a</code>, <code>b</code>, and <code>c</code>. If we tried to use <code>a</code> after the let expression, the compiler would report an error.</p>
</div>
</div>
<div class="sect2">
<h3 id="_closures"><a class="anchor" href="#_closures"></a>Closures</h3>
<div class="paragraph">
<p>The <code>fn</code> special form creates a "closure". It "closes over" the surrounding lexical scope (like <code>msg</code>, <code>a</code>, <code>b</code>, or <code>c</code> above) and captures their values beyond the lexical scope.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn messenger-builder [greeting]
  (fn [who] (println greeting who))) ; closes over greeting

;; greeting provided here, then goes out of scope
(def hello-er (messenger-builder "Hello"))

;; greeting value still available because hello-er is a closure
(hello-er "world!")
;; Hello world!</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_java_interop"><a class="anchor" href="#_java_interop"></a>Java Interop</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_invoking_java_code"><a class="anchor" href="#_invoking_java_code"></a>Invoking Java code</h3>
<div class="paragraph">
<p>Below is a summary of calling conventions for calling into Java from Clojure:</p>
</div>
<table class="tableblock frame-all grid-all stretch table">
<colgroup>
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
<col style="width: 25%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Task</th>
<th class="tableblock halign-left valign-top">Java</th>
<th class="tableblock halign-left valign-top">Clojure</th>
<th class="tableblock halign-left valign-top"></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Instantiation</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>new Widget("foo")</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>(Widget. "foo")</code></p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Instance method</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>rnd.nextInt()</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>(.nextInt rnd)</code></p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Instance field</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>object.field</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>(.-field object)</code></p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Static method</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Math.sqrt(25)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>(Math/sqrt 25)</code></p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Static field</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Math.PI</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Math/PI</code></p></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
</div>
<div class="sect2">
<h3 id="_java_methods_vs_functions"><a class="anchor" href="#_java_methods_vs_functions"></a>Java Methods vs Functions</h3>
<div class="ulist">
<ul>
<li>
<p>Java methods are not Clojure functions</p>
</li>
<li>
<p>Can&#8217;t store them or pass them as arguments</p>
</li>
<li>
<p>Can wrap them in functions when necessary</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">;; make a function to invoke .length on arg
(fn [obj] (.length obj))

;; same thing
#(.length %)</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_test_your_knowledge"><a class="anchor" href="#_test_your_knowledge"></a>Test your knowledge</h2>
<div class="sectionbody">
<div class="paragraph">
<p><em><a href="answers#_functions">Check your answers</a></em></p>
</div>
<div class="paragraph">
<p>1) Define a function <code>greet</code> that takes no arguments and prints "Hello". Replace the <code>___</code> with the implementation:
<code>(defn greet [] <em>_</em>)</code></p>
</div>
<div class="paragraph">
<p>2) Redefine <code>greet</code> using <code>def</code>, first with the <code>fn</code> special form and then with the <code>#()</code> reader macro.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">;; using fn
(def greet __)

;; using #()
(def greet __)</code></pre>
</div>
</div>
<div class="paragraph">
<p>3) Define a function <code>greeting</code> which:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Given no arguments, returns "Hello, World!"</p>
</li>
<li>
<p>Given one argument x, returns "Hello, <strong>x</strong>!"</p>
</li>
<li>
<p>Given two arguments x and y, returns "<strong>x</strong>, <strong>y</strong>!"</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">;; Hint use the str function to concatenate strings
(doc str)

(defn greeting ___)

;; For testing
(assert (= "Hello, World!" (greeting)))
(assert (= "Hello, Clojure!" (greeting "Clojure")))
(assert (= "Good morning, Clojure!" (greeting "Good morning" "Clojure")))</code></pre>
</div>
</div>
<div class="paragraph">
<p>4) Define a function <code>do-nothing</code> which takes a single argument <code>x</code> and returns it, unchanged.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn do-nothing [x] ___)</code></pre>
</div>
</div>
<div class="paragraph">
<p>In Clojure, this is the <code>identity</code> function. By itself, identity is not very useful, but it is sometimes necessary when working with higher-order functions.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(source identity)</code></pre>
</div>
</div>
<div class="paragraph">
<p>5) Define a function <code>always-thing</code> which takes any number of arguments, ignores all of them, and returns the number <code>100</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn always-thing [__] ___)</code></pre>
</div>
</div>
<div class="paragraph">
<p>6) Define a function <code>make-thingy</code> which takes a single argument <code>x</code>. It should return another function, which takes any number of arguments and always returns x.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn make-thingy [x] ___)

;; Tests
(let [n (rand-int Integer/MAX_VALUE)
      f (make-thingy n)]
  (assert (= n (f)))
  (assert (= n (f 123)))
  (assert (= n (apply f 123 (range)))))</code></pre>
</div>
</div>
<div class="paragraph">
<p>In Clojure, this is the <code>constantly</code> function.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(source constantly)</code></pre>
</div>
</div>
<div class="paragraph">
<p>7) Define a function <code>triplicate</code> which takes another function and calls it three times, without any arguments.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn triplicate [f] ___)</code></pre>
</div>
</div>
<div class="paragraph">
<p>8) Define a function <code>opposite</code> which takes a single argument <code>f</code>. It should return another function which takes any number of arguments, applies <code>f</code> on them, and then calls <code>not</code> on the result. The <code>not</code> function in Clojure does logical negation.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn opposite [f]
  (fn [&amp; args] ___))</code></pre>
</div>
</div>
<div class="paragraph">
<p>In Clojure, this is the complement function.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn complement
  "Takes a fn f and returns a fn that takes the same arguments as f,
  has the same effects, if any, and returns the opposite truth value."
  [f]
  (fn
    ([] (not (f)))
    ([x] (not (f x)))
    ([x y] (not (f x y)))
    ([x y &amp; zs] (not (apply f x y zs)))))</code></pre>
</div>
</div>
<div class="paragraph">
<p>9) Define a function <code>triplicate2</code> which takes another function and any number of arguments, then calls that function three times on those arguments. Re-use the function you defined in the earlier triplicate exercise.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn triplicate2 [f &amp; args]
  (triplicate ___))</code></pre>
</div>
</div>
<div class="paragraph">
<p>10) Using the <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Math.html">java.lang.Math</a> class (<code>Math/pow</code>, <code>Math/cos</code>, <code>Math/sin</code>, <code>Math/PI</code>), demonstrate the following mathematical facts:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The cosine of pi is -1</p>
</li>
<li>
<p>For some x, sin(x)^2 + cos(x)^2 = 1</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>11) Define a function that takes an HTTP URL as a string, fetches that URL from the web, and returns the content as a string.</p>
</div>
<div class="paragraph">
<p>Hint: Using the <a href="http://docs.oracle.com/javase/8/docs/api/java/net/URL.html">java.net.URL</a> class and its <code>openStream</code> method. Then use the Clojure <code>slurp</code> function to get the content as a string.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn http-get [url]
  ___)

(assert (.contains (http-get "https://www.w3.org") "html"))</code></pre>
</div>
</div>
<div class="paragraph">
<p>In fact, the Clojure <code>slurp</code> function interprets its argument as a URL first before trying it as a file name. Write a simplified http-get:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn http-get [url]
  ___)</code></pre>
</div>
</div>
<div class="paragraph">
<p>12) Define a function <code>one-less-arg</code> that takes two arguments:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>f</code>, a function</p>
</li>
<li>
<p><code>x</code>, a value</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>and returns another function which calls <code>f</code> on <code>x</code> plus any additional arguments.<br></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn one-less-arg [f x]
  (fn [&amp; args] ___))</code></pre>
</div>
</div>
<div class="paragraph">
<p>In Clojure, the <code>partial</code> function is a more general version of this.</p>
</div>
<div class="paragraph">
<p>13) Define a function <code>two-fns</code> which takes two functions as arguments, <code>f</code> and <code>g</code>. It returns another function which takes one argument, calls <code>g</code> on it, then calls <code>f</code> on the result, and returns that.</p>
</div>
<div class="paragraph">
<p>That is, your function returns the composition of <code>f</code> and <code>g</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn two-fns [f g]
  ___)</code></pre>
</div>
</div>
</div>
</div>


<div class="clj-prev-next-container">
  <a href="syntax" class="clj-prev-link"><span class="clj-prevnext-link-icon">&#xeab5;</span>&nbsp;Syntax</a>
  <a href="sequential_colls" class="clj-next-link">Sequential Collections&nbsp;<span class="clj-prevnext-link-icon">&#xeab8;</span></a>
</div>

    </div>
  </div>
</div>

  <div class="w-section clj-footer">
    <div class="w-container clj-footer-links-container">
      <div class="w-row">
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Community</h6>
            <a href="/community/resources" class="clj-footer-link">Resources</a>
            <a href="/community/contributing" class="clj-footer-link">Contributing</a>
            <a href="/community/companies" class="clj-footer-link">Companies</a>
            <a href="/community/contributing_site" class="clj-footer-link">Site</a>
          <h6 class="clj-footer-heading">Legal</h6>
            <a href="/community/license" class="clj-footer-link">License</a>
            <a href="/privacy" class="clj-footer-link">Privacy Policy</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Documentation</h6>
            <a href="/about/rationale" class="clj-footer-link">Overview</a>
            <a href="/reference/documentation" class="clj-footer-link">Reference</a>
            <a href="/api/api" class="clj-footer-link">API</a>
            <a href="/guides/guides" class="clj-footer-link">Guides</a>
            <a href="/community/libraries" class="clj-footer-link">Libraries &amp; Tools</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Updates</h6>
            <a href="/news/news" class="clj-footer-link">News</a>
            <a href="/community/events" class="clj-footer-link">Events</a>
          <h6 class="clj-footer-heading">ETC</h6>
            <a href="https://www.youtube.com/user/ClojureTV" class="clj-footer-link">ClojureTV</a>
            <a href="/community/books" class="clj-footer-link">Books</a>
            <a href="/community/swag" class="clj-footer-link">Swag</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Code</h6>
            <a href="/releases/downloads" class="clj-footer-link">Releases</a>
            <a href="https://github.com/clojure/clojure/" class="clj-footer-link">Source</a>
            <a href="http://clojurescript.org" class="clj-footer-link">ClojureScript</a>
            <a href="/about/clojureclr" class="clj-footer-link">ClojureCLR</a>
        </div>
      </div>
    </div>
    <div class="w-container clj-footer-legal-container">
      <div class="w-clearfix clj-footer-legal">
        <div class="clj-footer-logo">&nbsp;</div>
        <div class="clj-footer-legal-links">
          <div class="clj-footer-copyright">Copyright 2008-2022 Rich Hickey | <a class="clj-footer-sub-link" href="/privacy">Privacy Policy</a><br/>Logo &amp; site design by Tom Hickey
          </div>
          <div class="clj-footer-designed-by">Published 2023-12-18<br/>Update <a class="clj-footer-sub-link" href="https://github.com/clojure/clojure-site/blob/master/content/guides/learn/functions.adoc">this page</a>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script type="text/javascript" src="/js/webflow.js"></script>
  <script type="text/javascript" src="/js/highlight.pack.js"></script>
  <script>
  $(document).ready( (event) => {
    $('pre code').each((index, obj) => {
      $(obj).addClass($(obj).attr("data-lang"));
      hljs.highlightBlock(obj);
    });
  });
  </script>
  <!--[if lte IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif]-->
</body>
</html>
