<!DOCTYPE html>
<!-- This site was created in Webflow. http://www.webflow.com-->
<!-- Last Published: Fri Nov 13 2015 01:48:45 GMT+0000 (UTC) -->
<html lang="en" data-wf-site="56414d6fc8c27cad0f4e12e7" data-wf-page="5643ac587b1f28dc58ed6b89">
<head>
  <meta charset="utf-8">
  <title>Clojure - Learn Clojure - Hashed Collections</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="generator" content="Webflow">
  <meta name="google-site-verification" content="a30CDuC9UBifM7EL575LK9a4TEE6mNfWbKqXIoSZChg" />
  <meta name="google-site-verification" content="iXqpntr4CN3JRM1sVm5D_YzZw8bFRizBaTVycwqii2E" />
  <meta name="keywords" content="clojure,programming" />
  <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,600;1,300;1,400;1,600&family=PT+Serif:ital@0;1&&family=Source+Code+Pro:wght@500&display=swap">
  <link rel="stylesheet" type="text/css" href="/css/normalize.css">
  <link rel="stylesheet" type="text/css" href="/css/webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/clojureorg.webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/asciidoctor-mod.css">
  <link type="text/css" href="/css/default-en.css" rel="stylesheet">
  <link type="text/css" href="/css/default.css" rel="stylesheet">
  <link type="text/css" href="/css/search-result.css" rel="stylesheet">
  <link rel="alternate" type="application/atom+xml" title="News" href="/feed.xml" />
  <script type="text/javascript" src="/js/modernizr.js"></script>
  <link rel="shortcut icon" type="image/x-icon" href="/images/clojure-logo-icon-32.png">
  <link rel="apple-touch-icon" href="/images/clojure-logo-icon-256.png">
  <!-- Matomo -->
  <script>
    var _paq = window._paq = window._paq || [];
    /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
      var u="https://cognitect.matomo.cloud/";
      _paq.push(['setTrackerUrl', u+'matomo.php']);
      _paq.push(['setSiteId', '9']);
      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
      g.async=true; g.src='//cdn.matomo.cloud/cognitect.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);
    })();
  </script>
<!-- End Matomo Code -->
  <script type="text/javascript">
    function searchClj(obj) {
      let e = document.getElementById("searchType");
      document.getElementById("hiddenSearch").value=e.value;
    }
  </script>
</head>
<body>
  <div data-collapse="none" data-animation="default" data-duration="400" data-contain="1" class="w-nav clj-navbar">
    <div class="w-container">
      <a href="/index" class="w-nav-brand w-clearfix clj-logo-container"><img width="60" src="/images/clojure-logo-120b.png" class="clj-logo" alt="Clojure logo">
        <div class="clj-logo-text">Clojure</div>
      </a>
      <nav role="navigation" class="w-nav-menu clj-nav-menu"><a href="/about/rationale" class="w-nav-link clj-nav-link">Overview</a><a href="/reference/documentation" class="w-nav-link clj-nav-link">Reference‚Äç</a><a href="/api/api" class="w-nav-link clj-nav-link">API</a><a href="/releases/downloads" class="w-nav-link clj-nav-link">Releases</a><a href="/guides/guides" class="w-nav-link clj-nav-link">Guides</a><a href="/community/success_stories" class="w-nav-link clj-nav-link">Community</a><a href="/dev/dev" class="w-nav-link clj-nav-link">Dev</a><a href="/news/news" class="w-nav-link clj-nav-link">News</a><a href="#" data-ix="search-click-trigger" class="w-nav-link clj-nav-link clj-nav-search">&#xed11;</a>
      </nav>
      <div class="w-nav-button clj-menu-button">
        <div class="w-icon-nav-menu"></div>
      </div>
    </div>
  </div>
  <div data-ix="hide-search" class="w-section clj-search-section">
    <div class="w-container">
      <div class="w-form clj-search-form-wrapper">
        <form id="wf-form-Search-Form" name="wf-form-Search-Form" action="https://duckduckgo.com/" method="get" onSubmit="searchClj(this)">
          <div class="w-row">
            <div class="w-col w-col-6 w-col-small-6">
              <input id="hiddenSearch" type="hidden" name="sites" value="www.clojure.org">
              <input name="q" id="q" type="text" placeholder="Search clojure.org reference, guides, and API" title="Search text" autofocus="autofocus" class="w-input clj-search-input">
            </div>
            <div class="w-col w-col-3 w-col-small-3 clj-search-type">
              <select name="searchType" id="searchType" class="w-select clj-search-type">
                <option value="www.clojure.org">clojure.org</option>
                <option value="ask.clojure.org">ask.clojure.org</option>
              </select>
            </div>
            <div class="w-col w-col-3 w-col-small-3">
              <input type="submit" value="Search" class="w-button clj-search-submit">
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

<div class="w-section clj-content-section">
  <div class="w-container">
    <div class="clj-section-nav-container">
      <div data-collapse="small" data-animation="default" data-duration="200" data-contain="1" class="w-nav clj-section-navbar">
        <div class="w-container">
          <nav role="navigation" class="w-nav-menu clj-section-nav-menu">
            <a href="../guides" class="w-nav-link clj-section-nav-item-link"><span class="clj-nav-nested-icon">&#xeab5;</span> Back to Guides</a>
            <div class="w-nav-link clj-section-nav-heading">Topics</div>
            <a href="clojure" class="w-nav-link clj-section-nav-item-link">Introduction</a>
            <a href="syntax" class="w-nav-link clj-section-nav-item-link">Syntax</a>
            <a href="functions" class="w-nav-link clj-section-nav-item-link">Functions</a>
            <a href="sequential_colls" class="w-nav-link clj-section-nav-item-link">Sequential Collections</a>
            <a href="hashed_colls" class="w-nav-link clj-section-nav-item-link">Hashed Collections</a>
            <a href="flow" class="w-nav-link clj-section-nav-item-link">Flow Control</a>
            <a href="namespaces" class="w-nav-link clj-section-nav-item-link">Namespaces</a>
          </nav>
          <div data-ix="toggle-section-nav-icon" class="w-nav-button w-clearfix clj-section-nav-toggle">
            <div class="clj-section-nav-text">Hashed Collections</div>
            <div class="clj-section-nav-icon-closed">&#xeab2;</div>
            <div data-ix="init-hide-section-nav-icon-open" class="clj-section-nav-icon-open">&#xeab9;</div>
          </div>
        </div>
      </div>
    </div>
    <div class="clj-content-container">

      <h1>Learn Clojure - Hashed Collections</h1>

      <div id="preamble">
<div class="sectionbody">
<div id="toc" class="toc">
<div id="toctitle" class="title">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_sets">Sets</a>
<ul class="sectlevel2">
<li><a href="#_adding_to_a_set">Adding to a set</a></li>
<li><a href="#_removing_from_a_set">Removing from a set</a></li>
<li><a href="#_checking_containment">Checking containment</a></li>
<li><a href="#_sorted_sets">Sorted sets</a></li>
<li><a href="#_into"><code>into</code></a></li>
</ul>
</li>
<li><a href="#_maps">Maps</a>
<ul class="sectlevel2">
<li><a href="#_creating_a_literal_map">Creating a literal map</a></li>
<li><a href="#_adding_new_key_value_pairs">Adding new key-value pairs</a></li>
<li><a href="#_removing_key_value_pairs">Removing key-value pairs</a></li>
<li><a href="#_looking_up_by_key">Looking up by key</a></li>
<li><a href="#_looking_up_with_a_default">Looking up with a default</a></li>
<li><a href="#_checking_contains">Checking contains</a></li>
<li><a href="#_keys_or_values">Keys or values</a></li>
<li><a href="#_building_a_map">Building a map</a></li>
<li><a href="#_combining_maps">Combining maps</a></li>
<li><a href="#_sorted_maps">Sorted maps</a></li>
</ul>
</li>
<li><a href="#_representing_application_domain_information">Representing application domain information</a>
<ul class="sectlevel2">
<li><a href="#_field_accessors">Field accessors</a></li>
<li><a href="#_updating_fields">Updating fields</a></li>
<li><a href="#_removing_a_field">Removing a field</a></li>
<li><a href="#_nested_entities">Nested entities</a></li>
<li><a href="#_records">Records</a></li>
</ul>
</li>
</ul>
</div>
<div class="paragraph">
<p>As described in the previous section, there are four key Clojure collection types: vectors, lists, sets, and maps. Of those four collection types, sets and maps are hashed collections, designed for efficient lookup of elements.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_sets"><a class="anchor" href="#_sets"></a>Sets</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Sets are like mathematical sets - unordered and with no duplicates. Sets are ideal for efficiently checking whether a collection contains an element, or to remove any arbitrary element.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(def players #{"Alice", "Bob", "Kelly"})</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_adding_to_a_set"><a class="anchor" href="#_adding_to_a_set"></a>Adding to a set</h3>
<div class="paragraph">
<p>As with vectors and lists, <code>conj</code> is used to add elements.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (conj players "Fred")
#{"Alice" "Fred" "Bob" "Kelly"}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_removing_from_a_set"><a class="anchor" href="#_removing_from_a_set"></a>Removing from a set</h3>
<div class="paragraph">
<p>The <code>disj</code> ("disjoin") function is used to remove one or more elements from a set.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; players
#{"Alice" "Kelly" "Bob"}
user=&gt; (disj players "Bob" "Sal")
#{"Alice" "Kelly"}</code></pre>
</div>
</div>
<div class="paragraph">
<p>As you can see, it&#8217;s fine to <code>disj</code> elements that don&#8217;t exist in the set.</p>
</div>
</div>
<div class="sect2">
<h3 id="_checking_containment"><a class="anchor" href="#_checking_containment"></a>Checking containment</h3>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (contains? players "Kelly")
true</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_sorted_sets"><a class="anchor" href="#_sorted_sets"></a>Sorted sets</h3>
<div class="paragraph">
<p>Sorted sets are sorted according to a comparator function which can compare two elements. By default, Clojure&#8217;s <code>compare</code> function is used, which sorts in "natural" order for numbers, strings, etc.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (conj (sorted-set) "Bravo" "Charlie" "Sigma" "Alpha")
#{"Alpha" "Bravo" "Charlie" "Sigma"}</code></pre>
</div>
</div>
<div class="paragraph">
<p>A custom comparator can also be used with <code>sorted-set-by</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_into"><a class="anchor" href="#_into"></a><code>into</code></h3>
<div class="paragraph">
<p><code>into</code> is used for putting one collection into another.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (def players #{"Alice" "Bob" "Kelly"})
user=&gt; (def new-players ["Tim" "Sue" "Greg"])
user=&gt; (into players new-players)
#{"Alice" "Greg" "Sue" "Bob" "Tim" "Kelly"}</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>into</code> returns a collection of the same type as its first argument.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_maps"><a class="anchor" href="#_maps"></a>Maps</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Maps are commonly used for two purposes - to manage an association of keys to values and to represent domain application data. The first use case is often referred to as dictionaries or hash maps in other languages.</p>
</div>
<div class="sect2">
<h3 id="_creating_a_literal_map"><a class="anchor" href="#_creating_a_literal_map"></a>Creating a literal map</h3>
<div class="paragraph">
<p>Maps are represented as alternating keys and values surrounded by <code>{</code> and <code>}</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(def scores {"Fred"  1400
             "Bob"   1240
             "Angela" 1024})</code></pre>
</div>
</div>
<div class="paragraph">
<p>When Clojure prints a map at the REPL, it will put `,&#8217;s between each key/value pair. These are purely used for readability - commas are treated as whitespace in Clojure. Feel free to use them in cases where they help you!</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">;; same as the last one!
(def scores {"Fred" 1400, "Bob" 1240, "Angela" 1024})</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_adding_new_key_value_pairs"><a class="anchor" href="#_adding_new_key_value_pairs"></a>Adding new key-value pairs</h3>
<div class="paragraph">
<p>New values are added to maps with the <code>assoc</code> (short for "associate") function:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (assoc scores "Sally" 0)
{"Angela" 1024, "Bob" 1240, "Fred" 1400, "Sally" 0}</code></pre>
</div>
</div>
<div class="paragraph">
<p>If the key used in <code>assoc</code> already exists, the value is replaced.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (assoc scores "Bob" 0)
{"Angela" 1024, "Bob" 0, "Fred" 1400}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_removing_key_value_pairs"><a class="anchor" href="#_removing_key_value_pairs"></a>Removing key-value pairs</h3>
<div class="paragraph">
<p>The complementary operation for removing key-value pairs is <code>dissoc</code> ("dissociate"):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (dissoc scores "Bob")
{"Angela" 1024, "Fred" 1400}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_looking_up_by_key"><a class="anchor" href="#_looking_up_by_key"></a>Looking up by key</h3>
<div class="paragraph">
<p>There are several ways to look up a value in a map. The most obvious is the function <code>get</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (get scores "Angela")
1024</code></pre>
</div>
</div>
<div class="paragraph">
<p>When the map in question is being treated as a constant lookup table, it&#8217;s common to invoke the map itself, treating it as a function:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (def directions {:north 0
                        :east 1
                        :south 2
                        :west 3})
#'user/directions

user=&gt; (directions :north)
0</code></pre>
</div>
</div>
<div class="paragraph">
<p>You should not directly invoke a map unless you can guarantee it will be non-nil:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (def bad-lookup-map nil)
#'user/bad-lookup-map

user=&gt; (bad-lookup-map :foo)
Execution error (NullPointerException) at user/eval154 (REPL:1).
null</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_looking_up_with_a_default"><a class="anchor" href="#_looking_up_with_a_default"></a>Looking up with a default</h3>
<div class="paragraph">
<p>If you want to do a lookup and fall back to a default value when the key is not found, specify the default as an extra parameter:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (get scores "Sam" 0)
0
‚Äã
user=&gt; (directions :northwest -1)
-1</code></pre>
</div>
</div>
<div class="paragraph">
<p>Using a default is also helpful to distinguish between a missing key and an existing key with a <code>nil</code> value.</p>
</div>
</div>
<div class="sect2">
<h3 id="_checking_contains"><a class="anchor" href="#_checking_contains"></a>Checking contains</h3>
<div class="paragraph">
<p>There are two other functions that are helpful in checking whether a map contains an entry.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (contains? scores "Fred")
true

user=&gt; (find scores "Fred")
["Fred" 1400]</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>contains?</code> function is a predicate for checking containment. The <code>find</code> function finds the key/value entry in a map, not just the value.</p>
</div>
</div>
<div class="sect2">
<h3 id="_keys_or_values"><a class="anchor" href="#_keys_or_values"></a>Keys or values</h3>
<div class="paragraph">
<p>You can also get just the keys or just the values in a map:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (keys scores)
("Fred" "Bob" "Angela")

user=&gt; (vals scores)
(1400 1240 1024)</code></pre>
</div>
</div>
<div class="paragraph">
<p>While maps are unordered, there is a guarantee that keys, vals, and other functions that walk in "sequence" order will always walk a particular map instance entries in the same order.</p>
</div>
</div>
<div class="sect2">
<h3 id="_building_a_map"><a class="anchor" href="#_building_a_map"></a>Building a map</h3>
<div class="paragraph">
<p>The <code>zipmap</code> function can be used to "zip" together two sequences (the keys and vals) into a map:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (def players #{"Alice" "Bob" "Kelly"})
#'user/players

user=&gt; (zipmap players (repeat 0))
{"Kelly" 0, "Bob" 0, "Alice" 0}</code></pre>
</div>
</div>
<div class="paragraph">
<p>There are a variety of other ways to build up a map using Clojure&#8217;s sequence functions (which we have not yet discussed). Come back to these later!</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">;; with map and into
(into {} (map (fn [player] [player 0]) players))

;; with reduce
(reduce (fn [m player]
          (assoc m player 0))
        {} ; initial value
        players)</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_combining_maps"><a class="anchor" href="#_combining_maps"></a>Combining maps</h3>
<div class="paragraph">
<p>The <code>merge</code> function can be used to combine multiple maps into a single map:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (def new-scores {"Angela" 300 "Jeff" 900})
#'user/new-scores

user=&gt; (merge scores new-scores)
{"Fred" 1400, "Bob" 1240, "Jeff" 900, "Angela" 300}</code></pre>
</div>
</div>
<div class="paragraph">
<p>We merged two maps here but you can pass more as well.</p>
</div>
<div class="paragraph">
<p>If both maps contain the same key, the rightmost one wins. Alternately, you can use <code>merge-with</code> to supply a function to invoke when there is a conflict:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (def new-scores {"Fred" 550 "Angela" 900 "Sam" 1000})
#'user/new-scores

user=&gt; (merge-with + scores new-scores)
{"Sam" 1000, "Fred" 1950, "Bob" 1240, "Angela" 1924}</code></pre>
</div>
</div>
<div class="paragraph">
<p>In the case of a conflict, the function is called on both values to get the new value.</p>
</div>
</div>
<div class="sect2">
<h3 id="_sorted_maps"><a class="anchor" href="#_sorted_maps"></a>Sorted maps</h3>
<div class="paragraph">
<p>Similar to sorted sets, sorted maps maintain the keys in sorted order based on a comparator, using <code>compare</code> as the default comparator function.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (def sm (sorted-map
         "Bravo" 204
         "Alfa" 35
         "Sigma" 99
         "Charlie" 100))
{"Alfa" 35, "Bravo" 204, "Charlie" 100, "Sigma" 99}

user=&gt; (keys sm)
("Alfa" "Bravo" "Charlie" "Sigma")

user=&gt; (vals sm)
(35 204 100 99)</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_representing_application_domain_information"><a class="anchor" href="#_representing_application_domain_information"></a>Representing application domain information</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When we need to represent many domain information with the same set of fields known in advance, you can use a map with keyword keys.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(def person
  {:first-name "Kelly"
   :last-name "Keen"
   :age 32
   :occupation "Programmer"})</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_field_accessors"><a class="anchor" href="#_field_accessors"></a>Field accessors</h3>
<div class="paragraph">
<p>Since this is a map, the ways we&#8217;ve already discussed for looking up a value by key also work:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (get person :occupation)
"Programmer"

user=&gt; (person :occupation)
"Programmer"</code></pre>
</div>
</div>
<div class="paragraph">
<p>But really, the most common way to get field values for this use is by invoking the keyword. Just like with maps and sets, keywords are also functions. When a keyword is invoked, it looks itself up in the associative data structure that it was passed.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (:occupation person)
"Programmer"</code></pre>
</div>
</div>
<div class="paragraph">
<p>Keyword invocation also takes an optional default value:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (:favorite-color person "beige")
"beige"</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_updating_fields"><a class="anchor" href="#_updating_fields"></a>Updating fields</h3>
<div class="paragraph">
<p>Since this is a map, we can just use <code>assoc</code> to add or modify fields:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (assoc person :occupation "Baker")
{:age 32, :last-name "Keen", :first-name "Kelly", :occupation "Baker"}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_removing_a_field"><a class="anchor" href="#_removing_a_field"></a>Removing a field</h3>
<div class="paragraph">
<p>Use dissoc to remove fields:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (dissoc person :age)
{:last-name "Keen", :first-name "Kelly", :occupation "Programmer"}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_nested_entities"><a class="anchor" href="#_nested_entities"></a>Nested entities</h3>
<div class="paragraph">
<p>It is common to see entities nested within other entities:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(def company
  {:name "WidgetCo"
   :address {:street "123 Main St"
             :city "Springfield"
             :state "IL"}})</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can use <code>get-in</code> to access fields at any level inside nested entities:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (get-in company [:address :city])
"Springfield"</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can also use <code>assoc-in</code> or <code>update-in</code> to modify nested entities:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (assoc-in company [:address :street] "303 Broadway")
{:name "WidgetCo",
 :address
 {:state "IL",
  :city "Springfield",
  :street "303 Broadway"}}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_records"><a class="anchor" href="#_records"></a>Records</h3>
<div class="paragraph">
<p>An alternative to using maps is to create a "record". Records are designed specifically for this use case and generally have better performance. In addition, they have a named "type" which can be used for polymorphic behavior (more on that later).</p>
</div>
<div class="paragraph">
<p>Records are defined with the list of field names for record instances. These will be treated as keyword keys in each record instance.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">;; Define a record structure
(defrecord Person [first-name last-name age occupation])

;; Positional constructor - generated
(def kelly (-&gt;Person "Kelly" "Keen" 32 "Programmer"))

;; Map constructor - generated
(def kelly (map-&gt;Person
             {:first-name "Kelly"
              :last-name "Keen"
              :age 32
              :occupation "Programmer"}))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Records are used almost exactly the same as maps, with the caveat that they cannot be invoked as a function like maps.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (:occupation kelly)
"Programmer"</code></pre>
</div>
</div>
</div>
</div>
</div>


<div class="clj-prev-next-container">
  <a href="sequential_colls" class="clj-prev-link"><span class="clj-prevnext-link-icon">&#xeab5;</span>&nbsp;Sequential Collections</a>
  <a href="flow" class="clj-next-link">Flow Control&nbsp;<span class="clj-prevnext-link-icon">&#xeab8;</span></a>
</div>

    </div>
  </div>
</div>

  <div class="w-section clj-footer">
    <div class="w-container clj-footer-links-container">
      <div class="w-row">
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Community</h6>
            <a href="/community/resources" class="clj-footer-link">Resources</a>
            <a href="/community/contributing" class="clj-footer-link">Contributing</a>
            <a href="/community/companies" class="clj-footer-link">Companies</a>
            <a href="/community/contributing_site" class="clj-footer-link">Site</a>
          <h6 class="clj-footer-heading">Legal</h6>
            <a href="/community/license" class="clj-footer-link">License</a>
            <a href="/privacy" class="clj-footer-link">Privacy Policy</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Documentation</h6>
            <a href="/about/rationale" class="clj-footer-link">Overview</a>
            <a href="/reference/documentation" class="clj-footer-link">Reference</a>
            <a href="/api/api" class="clj-footer-link">API</a>
            <a href="/guides/guides" class="clj-footer-link">Guides</a>
            <a href="/community/libraries" class="clj-footer-link">Libraries &amp; Tools</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Updates</h6>
            <a href="/news/news" class="clj-footer-link">News</a>
            <a href="/community/events" class="clj-footer-link">Events</a>
          <h6 class="clj-footer-heading">ETC</h6>
            <a href="https://www.youtube.com/user/ClojureTV" class="clj-footer-link">ClojureTV</a>
            <a href="/community/books" class="clj-footer-link">Books</a>
            <a href="/community/swag" class="clj-footer-link">Swag</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Code</h6>
            <a href="/releases/downloads" class="clj-footer-link">Releases</a>
            <a href="https://github.com/clojure/clojure/" class="clj-footer-link">Source</a>
            <a href="http://clojurescript.org" class="clj-footer-link">ClojureScript</a>
            <a href="/about/clojureclr" class="clj-footer-link">ClojureCLR</a>
        </div>
      </div>
    </div>
    <div class="w-container clj-footer-legal-container">
      <div class="w-clearfix clj-footer-legal">
        <div class="clj-footer-logo">&nbsp;</div>
        <div class="clj-footer-legal-links">
          <div class="clj-footer-copyright">Copyright 2008-2022 Rich Hickey | <a class="clj-footer-sub-link" href="/privacy">Privacy Policy</a><br/>Logo &amp; site design by Tom Hickey
          </div>
          <div class="clj-footer-designed-by">Published 2023-12-18<br/>Update <a class="clj-footer-sub-link" href="https://github.com/clojure/clojure-site/blob/master/content/guides/learn/hashed_colls.adoc">this page</a>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script type="text/javascript" src="/js/webflow.js"></script>
  <script type="text/javascript" src="/js/highlight.pack.js"></script>
  <script>
  $(document).ready( (event) => {
    $('pre code').each((index, obj) => {
      $(obj).addClass($(obj).attr("data-lang"));
      hljs.highlightBlock(obj);
    });
  });
  </script>
  <!--[if lte IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif]-->
</body>
</html>
