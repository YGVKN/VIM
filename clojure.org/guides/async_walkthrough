<!DOCTYPE html>
<!-- This site was created in Webflow. http://www.webflow.com-->
<!-- Last Published: Fri Nov 13 2015 01:48:45 GMT+0000 (UTC) -->
<html lang="en" data-wf-site="56414d6fc8c27cad0f4e12e7" data-wf-page="5643ac587b1f28dc58ed6b89">
<head>
  <meta charset="utf-8">
  <title>Clojure - core.async Walkthrough</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="generator" content="Webflow">
  <meta name="google-site-verification" content="a30CDuC9UBifM7EL575LK9a4TEE6mNfWbKqXIoSZChg" />
  <meta name="google-site-verification" content="iXqpntr4CN3JRM1sVm5D_YzZw8bFRizBaTVycwqii2E" />
  <meta name="keywords" content="clojure,programming" />
  <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,600;1,300;1,400;1,600&family=PT+Serif:ital@0;1&&family=Source+Code+Pro:wght@500&display=swap">
  <link rel="stylesheet" type="text/css" href="/css/normalize.css">
  <link rel="stylesheet" type="text/css" href="/css/webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/clojureorg.webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/asciidoctor-mod.css">
  <link type="text/css" href="/css/default-en.css" rel="stylesheet">
  <link type="text/css" href="/css/default.css" rel="stylesheet">
  <link type="text/css" href="/css/search-result.css" rel="stylesheet">
  <link rel="alternate" type="application/atom+xml" title="News" href="/feed.xml" />
  <script type="text/javascript" src="/js/modernizr.js"></script>
  <link rel="shortcut icon" type="image/x-icon" href="/images/clojure-logo-icon-32.png">
  <link rel="apple-touch-icon" href="/images/clojure-logo-icon-256.png">
  <!-- Matomo -->
  <script>
    var _paq = window._paq = window._paq || [];
    /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
      var u="https://cognitect.matomo.cloud/";
      _paq.push(['setTrackerUrl', u+'matomo.php']);
      _paq.push(['setSiteId', '9']);
      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
      g.async=true; g.src='//cdn.matomo.cloud/cognitect.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);
    })();
  </script>
<!-- End Matomo Code -->
  <script type="text/javascript">
    function searchClj(obj) {
      let e = document.getElementById("searchType");
      document.getElementById("hiddenSearch").value=e.value;
    }
  </script>
</head>
<body>
  <div data-collapse="none" data-animation="default" data-duration="400" data-contain="1" class="w-nav clj-navbar">
    <div class="w-container">
      <a href="/index" class="w-nav-brand w-clearfix clj-logo-container"><img width="60" src="/images/clojure-logo-120b.png" class="clj-logo" alt="Clojure logo">
        <div class="clj-logo-text">Clojure</div>
      </a>
      <nav role="navigation" class="w-nav-menu clj-nav-menu"><a href="/about/rationale" class="w-nav-link clj-nav-link">Overview</a><a href="/reference/documentation" class="w-nav-link clj-nav-link">Reference‚Äç</a><a href="/api/api" class="w-nav-link clj-nav-link">API</a><a href="/releases/downloads" class="w-nav-link clj-nav-link">Releases</a><a href="/guides/guides" class="w-nav-link clj-nav-link">Guides</a><a href="/community/success_stories" class="w-nav-link clj-nav-link">Community</a><a href="/dev/dev" class="w-nav-link clj-nav-link">Dev</a><a href="/news/news" class="w-nav-link clj-nav-link">News</a><a href="#" data-ix="search-click-trigger" class="w-nav-link clj-nav-link clj-nav-search">&#xed11;</a>
      </nav>
      <div class="w-nav-button clj-menu-button">
        <div class="w-icon-nav-menu"></div>
      </div>
    </div>
  </div>
  <div data-ix="hide-search" class="w-section clj-search-section">
    <div class="w-container">
      <div class="w-form clj-search-form-wrapper">
        <form id="wf-form-Search-Form" name="wf-form-Search-Form" action="https://duckduckgo.com/" method="get" onSubmit="searchClj(this)">
          <div class="w-row">
            <div class="w-col w-col-6 w-col-small-6">
              <input id="hiddenSearch" type="hidden" name="sites" value="www.clojure.org">
              <input name="q" id="q" type="text" placeholder="Search clojure.org reference, guides, and API" title="Search text" autofocus="autofocus" class="w-input clj-search-input">
            </div>
            <div class="w-col w-col-3 w-col-small-3 clj-search-type">
              <select name="searchType" id="searchType" class="w-select clj-search-type">
                <option value="www.clojure.org">clojure.org</option>
                <option value="ask.clojure.org">ask.clojure.org</option>
              </select>
            </div>
            <div class="w-col w-col-3 w-col-small-3">
              <input type="submit" value="Search" class="w-button clj-search-submit">
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

<div class="w-section clj-content-section">
  <div class="w-container">
    <div class="clj-section-nav-container">
      <div data-collapse="small" data-animation="default" data-duration="200" data-contain="1" class="w-nav clj-section-navbar">
        <div class="w-container">
          <nav role="navigation" class="w-nav-menu clj-section-nav-menu">
            <div class="w-nav-link clj-section-nav-heading">Learning</div>
            <a href="getting_started" class="w-nav-link clj-section-nav-item-link">Getting Started</a>
            <a href="install_clojure" class="w-nav-link clj-section-nav-item-link">Install Clojure</a>
            <a href="editors" class="w-nav-link clj-section-nav-item-link">Editors</a>
            <a href="structural_editing" class="w-nav-link clj-section-nav-item-link">Structural Editing</a>
            <a href="repl/introduction" class="w-nav-link clj-section-nav-item-link">REPL Programming <span class="clj-nav-nested-icon">&#xeab8;</span></a>
            <a href="learn/clojure" class="w-nav-link clj-section-nav-item-link">Learn Clojure <span class="clj-nav-nested-icon">&#xeab8;</span></a>
            <a href="faq" class="w-nav-link clj-section-nav-item-link">FAQ</a>

            <div class="w-nav-link clj-section-nav-heading">Language</div>
            <a href="spec" class="w-nav-link clj-section-nav-item-link">spec</a>
            <a href="weird_characters" class="w-nav-link clj-section-nav-item-link">Reading Clojure Characters</a>
            <a href="destructuring" class="w-nav-link clj-section-nav-item-link">Destructuring</a>
            <a href="threading_macros" class="w-nav-link clj-section-nav-item-link">Threading Macros</a>
            <a href="equality" class="w-nav-link clj-section-nav-item-link">Equality</a>
            <a href="comparators" class="w-nav-link clj-section-nav-item-link">Comparators</a>
            <a href="reader_conditionals" class="w-nav-link clj-section-nav-item-link">Reader Conditionals</a>
            <a href="higher_order_functions" class="w-nav-link clj-section-nav-item-link">Higher Order Functions</a>

            <div class="w-nav-link clj-section-nav-heading">Usage</div>
            <a href="dev_startup_time" class="w-nav-link clj-section-nav-item-link">Dev Startup Time</a>

            <div class="w-nav-link clj-section-nav-heading">Tools</div>
            <a href="deps_and_cli" class="w-nav-link clj-section-nav-item-link">Deps and CLI</a>
            <a href="tools_build" class="w-nav-link clj-section-nav-item-link">tools.build</a>

            <div class="w-nav-link clj-section-nav-heading">Libraries</div>
            <a href="async_walkthrough" class="w-nav-link clj-section-nav-item-link">core.async Walkthrough</a>
            <a href="core_async_go" class="w-nav-link clj-section-nav-item-link">Go Block Best Practices</a>
            <a href="test_check_beginner" class="w-nav-link clj-section-nav-item-link">test.check</a>
          </nav>
          <div data-ix="toggle-section-nav-icon" class="w-nav-button w-clearfix clj-section-nav-toggle">
            <div class="clj-section-nav-text">core.async Walkthrough</div>
            <div class="clj-section-nav-icon-closed">&#xeab2;</div>
            <div data-ix="init-hide-section-nav-icon-open" class="clj-section-nav-icon-open">&#xeab9;</div>
          </div>
        </div>
      </div>
    </div>
    <div class="clj-content-container">

      <h1>core.async Walkthrough</h1>

      <div id="preamble">
<div class="sectionbody">
<div id="toc" class="toc">
<div id="toctitle" class="title">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_getting_started">Getting started</a></li>
<li><a href="#_channels">Channels</a></li>
<li><a href="#_threads">Threads</a></li>
<li><a href="#_go_blocks_and_ioc_threads">Go Blocks and IOC Threads</a></li>
<li><a href="#_alts">Alts</a></li>
<li><a href="#_more_information">More information</a></li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_getting_started"><a class="anchor" href="#_getting_started"></a>Getting started</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <a href="https://github.com/clojure/core.async">core.async</a> library supports asynchronous programming through the use of channels.</p>
</div>
<div class="paragraph">
<p>To use core.async, declare a dependency on Clojure 1.10.0 or higher and the latest core.async library:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:deps
 {org.clojure/clojure {:mvn/version "1.11.1"}
  org.clojure/core.async {:mvn/version "1.6.673"}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>To start working with core.async, require the <code>clojure.core.async</code> namespace at the REPL:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(require '[clojure.core.async :as a :refer [&lt;!! &gt;!! &lt;! &gt;!]])</code></pre>
</div>
</div>
<div class="paragraph">
<p>Or include it in your namespace:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(ns my.ns
  (:require [clojure.core.async :as a :refer [&lt;!! &gt;!! &lt;! &gt;!]]))</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_channels"><a class="anchor" href="#_channels"></a>Channels</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Values are conveyed on queue-like channels. By default channels are unbuffered (0-length) - they require producer and consumer to rendezvous for the transfer of a value through the channel.</p>
</div>
<div class="paragraph">
<p>Use <code>chan</code> to make an unbuffered channel:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(a/chan)</code></pre>
</div>
</div>
<div class="paragraph">
<p>Pass a number to create a channel with a fixed buffer size:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(a/chan 10)</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>close!</code> a channel to stop accepting puts. Remaining values are still available to take. Drained channels return nil on take. Nils may not be sent over a channel explicitly!</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [c (a/chan)]
  (a/close! c))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Channels can also use custom buffers that have different policies for the "full" case.  Two useful examples are provided in the API.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">;; Use `dropping-buffer` to drop newest values when the buffer is full:
(a/chan (a/dropping-buffer 10))

;; Use `sliding-buffer` to drop oldest values when the buffer is full:
(a/chan (a/sliding-buffer 10))</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_threads"><a class="anchor" href="#_threads"></a>Threads</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In ordinary threads, we use <code>&gt;!!</code> (blocking put) and <code>&lt;!!</code> (blocking take) to communicate via channels.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [c (a/chan 10)]
  (&gt;!! c "hello")
  (assert (= "hello" (&lt;!! c)))
  (a/close! c))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Because these are blocking calls, if we try to put on an unbuffered channel, we will block the main thread. We can use <code>thread</code> (like <code>future</code>) to execute a body in a pool thread and return a channel with the result. Here we launch a background task to put "hello" on a channel, then read that value in the current thread.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [c (a/chan)]
  (a/thread (&gt;!! c "hello"))
  (assert (= "hello" (&lt;!! c)))
  (a/close! c))</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_go_blocks_and_ioc_threads"><a class="anchor" href="#_go_blocks_and_ioc_threads"></a>Go Blocks and IOC Threads</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <code>go</code> macro asynchronously executes its body in a special pool of threads. Channel operations that would block will pause execution instead, blocking no threads. This mechanism encapsulates the inversion of control that is external in event/callback systems. Inside <code>go</code> blocks, we use <code>&gt;!</code> (put) and <code>&lt;!</code> (take).</p>
</div>
<div class="paragraph">
<p>Here we convert our prior channel example to use go blocks:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [c (a/chan)]
  (a/go (&gt;! c "hello"))
  (assert (= "hello" (&lt;!! (a/go (&lt;! c)))))
  (a/close! c))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Instead of the explicit thread and blocking call, we use a go block for the producer. The consumer uses a go block to take, then returns a result channel, from which we do a blocking take.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_alts"><a class="anchor" href="#_alts"></a>Alts</h2>
<div class="sectionbody">
<div class="paragraph">
<p>One killer feature for channels over queues is the ability to wait on many channels at the same time (like a socket select). This is done with <code>alts!!</code> (ordinary threads) or <code>alts!</code> in go blocks.</p>
</div>
<div class="paragraph">
<p>We can create a background thread with alts that combines inputs on either of two channels. <code>alts!!</code> takes a set of operations to perform - either a channel to take from or a [channel value] to put and returns the value (nil for put) and channel that succeeded:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [c1 (a/chan)
      c2 (a/chan)]
  (a/thread (while true
              (let [[v ch] (a/alts!! [c1 c2])]
                (println "Read" v "from" ch))))
  (&gt;!! c1 "hi")
  (&gt;!! c2 "there"))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Prints (on stdout, possibly not visible at your repl):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code>Read hi from #object[clojure.core.async.impl.channels.ManyToManyChannel ...]
Read there from #object[clojure.core.async.impl.channels.ManyToManyChannel ...]</code></pre>
</div>
</div>
<div class="paragraph">
<p>We can use alts! to do the same thing with go blocks:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [c1 (a/chan)
      c2 (a/chan)]
  (a/go (while true
          (let [[v ch] (a/alts! [c1 c2])]
            (println "Read" v "from" ch))))
  (a/go (&gt;! c1 "hi"))
  (a/go (&gt;! c2 "there")))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Since go blocks are lightweight processes not bound to threads, we can have LOTS of them! Here we create 1000 go blocks that say hi on 1000 channels. We use alts!! to read them as they&#8217;re ready.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [n 1000
      cs (repeatedly n a/chan)
      begin (System/currentTimeMillis)]
  (doseq [c cs] (a/go (&gt;! c "hi")))
  (dotimes [i n]
    (let [[v c] (a/alts!! cs)]
      (assert (= "hi" v))))
  (println "Read" n "msgs in" (- (System/currentTimeMillis) begin) "ms"))</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>timeout</code> creates a channel that waits for a specified ms, then closes:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [t (a/timeout 100)
      begin (System/currentTimeMillis)]
  (&lt;!! t)
  (println "Waited" (- (System/currentTimeMillis) begin)))</code></pre>
</div>
</div>
<div class="paragraph">
<p>We can combine timeout with <code>alts!</code> to do timed channel waits.  Here we wait for 100 ms for a value to arrive on the channel, then give up:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [c (a/chan)
      begin (System/currentTimeMillis)]
  (a/alts!! [c (a/timeout 100)])
  (println "Gave up after" (- (System/currentTimeMillis) begin)))</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_more_information"><a class="anchor" href="#_more_information"></a>More information</h2>
<div class="sectionbody">
<div class="paragraph">
<p>See the following for more information:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://clojure.github.io/core.async">API docs</a></p>
</li>
<li>
<p><a href="https://github.com/clojure/core.async">Source</a></p>
</li>
</ul>
</div>
</div>
</div>

      <p><em>Original author: Alex Miller</em></p>


<div class="clj-prev-next-container">
  
  
</div>

    </div>
  </div>
</div>

  <div class="w-section clj-footer">
    <div class="w-container clj-footer-links-container">
      <div class="w-row">
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Community</h6>
            <a href="/community/resources" class="clj-footer-link">Resources</a>
            <a href="/community/contributing" class="clj-footer-link">Contributing</a>
            <a href="/community/companies" class="clj-footer-link">Companies</a>
            <a href="/community/contributing_site" class="clj-footer-link">Site</a>
          <h6 class="clj-footer-heading">Legal</h6>
            <a href="/community/license" class="clj-footer-link">License</a>
            <a href="/privacy" class="clj-footer-link">Privacy Policy</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Documentation</h6>
            <a href="/about/rationale" class="clj-footer-link">Overview</a>
            <a href="/reference/documentation" class="clj-footer-link">Reference</a>
            <a href="/api/api" class="clj-footer-link">API</a>
            <a href="/guides/guides" class="clj-footer-link">Guides</a>
            <a href="/community/libraries" class="clj-footer-link">Libraries &amp; Tools</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Updates</h6>
            <a href="/news/news" class="clj-footer-link">News</a>
            <a href="/community/events" class="clj-footer-link">Events</a>
          <h6 class="clj-footer-heading">ETC</h6>
            <a href="https://www.youtube.com/user/ClojureTV" class="clj-footer-link">ClojureTV</a>
            <a href="/community/books" class="clj-footer-link">Books</a>
            <a href="/community/swag" class="clj-footer-link">Swag</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Code</h6>
            <a href="/releases/downloads" class="clj-footer-link">Releases</a>
            <a href="https://github.com/clojure/clojure/" class="clj-footer-link">Source</a>
            <a href="http://clojurescript.org" class="clj-footer-link">ClojureScript</a>
            <a href="/about/clojureclr" class="clj-footer-link">ClojureCLR</a>
        </div>
      </div>
    </div>
    <div class="w-container clj-footer-legal-container">
      <div class="w-clearfix clj-footer-legal">
        <div class="clj-footer-logo">&nbsp;</div>
        <div class="clj-footer-legal-links">
          <div class="clj-footer-copyright">Copyright 2008-2022 Rich Hickey | <a class="clj-footer-sub-link" href="/privacy">Privacy Policy</a><br/>Logo &amp; site design by Tom Hickey
          </div>
          <div class="clj-footer-designed-by">Published 2023-12-18<br/>Update <a class="clj-footer-sub-link" href="https://github.com/clojure/clojure-site/blob/master/content/guides/async_walkthrough.adoc">this page</a>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script type="text/javascript" src="/js/webflow.js"></script>
  <script type="text/javascript" src="/js/highlight.pack.js"></script>
  <script>
  $(document).ready( (event) => {
    $('pre code').each((index, obj) => {
      $(obj).addClass($(obj).attr("data-lang"));
      hljs.highlightBlock(obj);
    });
  });
  </script>
  <!--[if lte IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif]-->
</body>
</html>
