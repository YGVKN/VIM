<!DOCTYPE html>
<!-- This site was created in Webflow. http://www.webflow.com-->
<!-- Last Published: Fri Nov 13 2015 01:48:45 GMT+0000 (UTC) -->
<html lang="en" data-wf-site="56414d6fc8c27cad0f4e12e7" data-wf-page="5643ac587b1f28dc58ed6b89">
<head>
  <meta charset="utf-8">
  <title>Clojure - tools.build Guide</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="generator" content="Webflow">
  <meta name="google-site-verification" content="a30CDuC9UBifM7EL575LK9a4TEE6mNfWbKqXIoSZChg" />
  <meta name="google-site-verification" content="iXqpntr4CN3JRM1sVm5D_YzZw8bFRizBaTVycwqii2E" />
  <meta name="keywords" content="clojure,programming" />
  <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,600;1,300;1,400;1,600&family=PT+Serif:ital@0;1&&family=Source+Code+Pro:wght@500&display=swap">
  <link rel="stylesheet" type="text/css" href="/css/normalize.css">
  <link rel="stylesheet" type="text/css" href="/css/webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/clojureorg.webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/asciidoctor-mod.css">
  <link type="text/css" href="/css/default-en.css" rel="stylesheet">
  <link type="text/css" href="/css/default.css" rel="stylesheet">
  <link type="text/css" href="/css/search-result.css" rel="stylesheet">
  <link rel="alternate" type="application/atom+xml" title="News" href="/feed.xml" />
  <script type="text/javascript" src="/js/modernizr.js"></script>
  <link rel="shortcut icon" type="image/x-icon" href="/images/clojure-logo-icon-32.png">
  <link rel="apple-touch-icon" href="/images/clojure-logo-icon-256.png">
  <!-- Matomo -->
  <script>
    var _paq = window._paq = window._paq || [];
    /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
      var u="https://cognitect.matomo.cloud/";
      _paq.push(['setTrackerUrl', u+'matomo.php']);
      _paq.push(['setSiteId', '9']);
      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
      g.async=true; g.src='//cdn.matomo.cloud/cognitect.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);
    })();
  </script>
<!-- End Matomo Code -->
  <script type="text/javascript">
    function searchClj(obj) {
      let e = document.getElementById("searchType");
      document.getElementById("hiddenSearch").value=e.value;
    }
  </script>
</head>
<body>
  <div data-collapse="none" data-animation="default" data-duration="400" data-contain="1" class="w-nav clj-navbar">
    <div class="w-container">
      <a href="/index" class="w-nav-brand w-clearfix clj-logo-container"><img width="60" src="/images/clojure-logo-120b.png" class="clj-logo" alt="Clojure logo">
        <div class="clj-logo-text">Clojure</div>
      </a>
      <nav role="navigation" class="w-nav-menu clj-nav-menu"><a href="/about/rationale" class="w-nav-link clj-nav-link">Overview</a><a href="/reference/documentation" class="w-nav-link clj-nav-link">Reference‚Äç</a><a href="/api/api" class="w-nav-link clj-nav-link">API</a><a href="/releases/downloads" class="w-nav-link clj-nav-link">Releases</a><a href="/guides/guides" class="w-nav-link clj-nav-link">Guides</a><a href="/community/success_stories" class="w-nav-link clj-nav-link">Community</a><a href="/dev/dev" class="w-nav-link clj-nav-link">Dev</a><a href="/news/news" class="w-nav-link clj-nav-link">News</a><a href="#" data-ix="search-click-trigger" class="w-nav-link clj-nav-link clj-nav-search">&#xed11;</a>
      </nav>
      <div class="w-nav-button clj-menu-button">
        <div class="w-icon-nav-menu"></div>
      </div>
    </div>
  </div>
  <div data-ix="hide-search" class="w-section clj-search-section">
    <div class="w-container">
      <div class="w-form clj-search-form-wrapper">
        <form id="wf-form-Search-Form" name="wf-form-Search-Form" action="https://duckduckgo.com/" method="get" onSubmit="searchClj(this)">
          <div class="w-row">
            <div class="w-col w-col-6 w-col-small-6">
              <input id="hiddenSearch" type="hidden" name="sites" value="www.clojure.org">
              <input name="q" id="q" type="text" placeholder="Search clojure.org reference, guides, and API" title="Search text" autofocus="autofocus" class="w-input clj-search-input">
            </div>
            <div class="w-col w-col-3 w-col-small-3 clj-search-type">
              <select name="searchType" id="searchType" class="w-select clj-search-type">
                <option value="www.clojure.org">clojure.org</option>
                <option value="ask.clojure.org">ask.clojure.org</option>
              </select>
            </div>
            <div class="w-col w-col-3 w-col-small-3">
              <input type="submit" value="Search" class="w-button clj-search-submit">
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

<div class="w-section clj-content-section">
  <div class="w-container">
    <div class="clj-section-nav-container">
      <div data-collapse="small" data-animation="default" data-duration="200" data-contain="1" class="w-nav clj-section-navbar">
        <div class="w-container">
          <nav role="navigation" class="w-nav-menu clj-section-nav-menu">
            <div class="w-nav-link clj-section-nav-heading">Learning</div>
            <a href="getting_started" class="w-nav-link clj-section-nav-item-link">Getting Started</a>
            <a href="install_clojure" class="w-nav-link clj-section-nav-item-link">Install Clojure</a>
            <a href="editors" class="w-nav-link clj-section-nav-item-link">Editors</a>
            <a href="structural_editing" class="w-nav-link clj-section-nav-item-link">Structural Editing</a>
            <a href="repl/introduction" class="w-nav-link clj-section-nav-item-link">REPL Programming <span class="clj-nav-nested-icon">&#xeab8;</span></a>
            <a href="learn/clojure" class="w-nav-link clj-section-nav-item-link">Learn Clojure <span class="clj-nav-nested-icon">&#xeab8;</span></a>
            <a href="faq" class="w-nav-link clj-section-nav-item-link">FAQ</a>

            <div class="w-nav-link clj-section-nav-heading">Language</div>
            <a href="spec" class="w-nav-link clj-section-nav-item-link">spec</a>
            <a href="weird_characters" class="w-nav-link clj-section-nav-item-link">Reading Clojure Characters</a>
            <a href="destructuring" class="w-nav-link clj-section-nav-item-link">Destructuring</a>
            <a href="threading_macros" class="w-nav-link clj-section-nav-item-link">Threading Macros</a>
            <a href="equality" class="w-nav-link clj-section-nav-item-link">Equality</a>
            <a href="comparators" class="w-nav-link clj-section-nav-item-link">Comparators</a>
            <a href="reader_conditionals" class="w-nav-link clj-section-nav-item-link">Reader Conditionals</a>
            <a href="higher_order_functions" class="w-nav-link clj-section-nav-item-link">Higher Order Functions</a>

            <div class="w-nav-link clj-section-nav-heading">Usage</div>
            <a href="dev_startup_time" class="w-nav-link clj-section-nav-item-link">Dev Startup Time</a>

            <div class="w-nav-link clj-section-nav-heading">Tools</div>
            <a href="deps_and_cli" class="w-nav-link clj-section-nav-item-link">Deps and CLI</a>
            <a href="tools_build" class="w-nav-link clj-section-nav-item-link">tools.build</a>

            <div class="w-nav-link clj-section-nav-heading">Libraries</div>
            <a href="async_walkthrough" class="w-nav-link clj-section-nav-item-link">core.async Walkthrough</a>
            <a href="core_async_go" class="w-nav-link clj-section-nav-item-link">Go Block Best Practices</a>
            <a href="test_check_beginner" class="w-nav-link clj-section-nav-item-link">test.check</a>
          </nav>
          <div data-ix="toggle-section-nav-icon" class="w-nav-button w-clearfix clj-section-nav-toggle">
            <div class="clj-section-nav-text">tools.build Guide</div>
            <div class="clj-section-nav-icon-closed">&#xeab2;</div>
            <div data-ix="init-hide-section-nav-icon-open" class="clj-section-nav-icon-open">&#xeab9;</div>
          </div>
        </div>
      </div>
    </div>
    <div class="clj-content-container">

      <h1>tools.build Guide</h1>

      <div id="preamble">
<div class="sectionbody">
<div id="toc" class="toc">
<div id="toctitle" class="title">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_builds_are_programs">Builds are programs</a></li>
<li><a href="#_setup">Setup</a></li>
<li><a href="#_source_library_jar_build">Source library jar build</a></li>
<li><a href="#_compiled_uberjar_application_build">Compiled uberjar application build</a></li>
<li><a href="#_parameterized_builds">Parameterized builds</a></li>
<li><a href="#_mixed_java_clojure_build">Mixed Java / Clojure build</a></li>
<li><a href="#_task_documentation">Task documentation</a></li>
</ul>
</div>
<div class="paragraph">
<p><a href="https://github.com/clojure/tools.build">tools.build</a> is a library of functions for building Clojure projects. It is intended to be used in a build program to create user-invokable target functions. Also see the <a href="https://clojure.github.io/tools.build">API docs</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_builds_are_programs"><a class="anchor" href="#_builds_are_programs"></a>Builds are programs</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The philosophy behind tools.build is that your project build is inherently a program - a series of instructions to create one or more project artifacts from your project source files. We want to write this program with our favorite programming language, Clojure, and tools.build is a library of functions commonly needed for builds that can be connected together in flexible ways. Writing a build program does take a bit more code than other declarative approaches, but can be easily extended or customized far into the future, creating a build that grows with your project.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_setup"><a class="anchor" href="#_setup"></a>Setup</h2>
<div class="sectionbody">
<div class="paragraph">
<p>There is no installation step - tools.build is simply a library that your build program uses. You will create an alias in your <code>deps.edn</code> that includes tools.build as a dependency and a source path to the build program. Builds are designed to be easily executed as a project "tool" in the Clojure CLI (with -T). In the Clojure CLI, "tools" are programs that provide functionality and do not use your project deps or classpath. Tools executed with <code>-T:an-alias</code> remove all project deps and paths, add <code>"."</code> as a path, and include any other deps or paths as defined in <code>:an-alias</code>.</p>
</div>
<div class="paragraph">
<p>As such, you will need an alias in your deps.edn that defines the build classpath and includes the path to your build source, for example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:paths ["src"] ;; project paths
 :deps {}       ;; project deps

 :aliases
 {;; Run with clj -T:build function-in-build
  :build {:deps {io.github.clojure/tools.build {:git/tag "TAG" :git/sha "SHA"}}
          :ns-default build}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Find the most recent TAG and SHA to use at <a href="https://github.com/clojure/tools.build#release-information" class="bare">https://github.com/clojure/tools.build#release-information</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>The git dep and Clojure CLI examples in this guide assume the use of Clojure CLI 1.10.3.933 or higher.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>As mentioned above, running a tool with -T will create a classpath that does not include the project :paths and :deps. Using <code>-T:build</code> will use only the <code>:paths</code> and <code>:deps</code> from the <code>:build</code> alias. The root deps.edn is still included, which will pull in Clojure as well (but it would also come in as a dependency of tools.build). The <code>:paths</code> are not specified here, so no additional paths are added, however, <code>-T</code> includes the project root <code>"."</code> as a path by default.</p>
</div>
<div class="paragraph">
<p>So executing <code>clj -T:build jar</code> will use an effective classpath here of:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>"."</code> (added by -T)</p>
</li>
<li>
<p>org.clojure/clojure (from the root deps.edn <code>:deps</code>) and transitive deps</p>
</li>
<li>
<p>org.clojure/tools.build (from the <code>:build</code> alias <code>:deps</code>) and transitive deps</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The <code>:ns-default</code> specifies the default Clojure namespace to find the function specified on the classpath. Because the only local path is the default <code>"."</code>, we should expect to find the build program at <code>build.clj</code> in the root of our project. Note that the path roots (via the <code>:build</code> alias <code>:paths</code>) and the namespace of the build program itself relative to those paths roots are fully under your control. You may wish to put them in a subdirectory of your project too.</p>
</div>
<div class="paragraph">
<p>And then finally, on the command line we specify the function to run in the build, here <code>jar</code>. That function will be executed in the <code>build</code> namespace, and passed a map built using the same arg passing style as <code>-X</code> - args are provided as alternating keys and values.</p>
</div>
<div class="paragraph">
<p>The remainder of this guide demonstrates individual common use cases and how to satisfy them with tools.build programs.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_source_library_jar_build"><a class="anchor" href="#_source_library_jar_build"></a>Source library jar build</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The most common Clojure build creates a jar file containing Clojure source code. To do this with tools.build we&#8217;ll use the following tasks:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>create-basis</code> - to create a project basis</p>
</li>
<li>
<p><code>copy-dir</code> - to copy Clojure source and resources into a working dir</p>
</li>
<li>
<p><code>write-pom</code> - to write a pom file in the working dir</p>
</li>
<li>
<p><code>jar</code> - to jar up the working dir into a jar file</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The build.clj will look like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(ns build
  (:require [clojure.tools.build.api :as b]))

(def lib 'my/lib1)
(def version (format "1.2.%s" (b/git-count-revs nil)))
(def class-dir "target/classes")
(def basis (b/create-basis {:project "deps.edn"}))
(def jar-file (format "target/%s-%s.jar" (name lib) version))

(defn clean [_]
  (b/delete {:path "target"}))

(defn jar [_]
  (b/write-pom {:class-dir class-dir
                :lib lib
                :version version
                :basis basis
                :src-dirs ["src"]})
  (b/copy-dir {:src-dirs ["src" "resources"]
               :target-dir class-dir})
  (b/jar {:class-dir class-dir
          :jar-file jar-file}))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Some things to notice:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>This is just normal Clojure code - you can load this namespace in your editor and develop it interactively at the REPL.</p>
</li>
<li>
<p>As a single-purpose program, it&#8217;s fine to build shared data in the set of vars at the top.</p>
</li>
<li>
<p>We are choosing to build in the "target" directory and assemble the jar contents in "target/classes" but there is nothing special about these paths - it is fully in your control. Also, we&#8217;ve repeated those paths and others in multiple places here but you can remove that duplication to the extent that feels right.</p>
</li>
<li>
<p>We&#8217;ve used the tools.build task functions to assemble larger functions like <code>build/jar</code> for the user to invoke. These functions take a parameter map and we&#8217;ve chosen not to provide any configurable parameters here, but you could!</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The deps.edn file will look like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:paths ["src"]
 :aliases
 {:build {:deps {io.github.clojure/tools.build {:git/tag "TAG" :git/sha "SHA"}}
          :ns-default build}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>And then you can run this build with:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -T:build clean
clj -T:build jar</code></pre>
</div>
</div>
<div class="paragraph">
<p>We expect to be able to do these both together on the command line but that is a work in progress.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_compiled_uberjar_application_build"><a class="anchor" href="#_compiled_uberjar_application_build"></a>Compiled uberjar application build</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When preparing an application, it is common to compile the full app + libs and assemble the entire thing as a single uberjar.</p>
</div>
<div class="paragraph">
<p>It is important that your main Clojure namespace should have <code>(:gen-class)</code>, for example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(ns my.lib.main
  ;; any :require and/or :import clauses
  (:gen-class))</code></pre>
</div>
</div>
<div class="paragraph">
<p>And that namespace should have a function like:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn -main [&amp; args]
  (do-stuff))</code></pre>
</div>
</div>
<div class="paragraph">
<p>An example build for a compiled uberjar will look like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(ns build
  (:require [clojure.tools.build.api :as b]))

(def lib 'my/lib1)
(def version (format "1.2.%s" (b/git-count-revs nil)))
(def class-dir "target/classes")
(def basis (b/create-basis {:project "deps.edn"}))
(def uber-file (format "target/%s-%s-standalone.jar" (name lib) version))

(defn clean [_]
  (b/delete {:path "target"}))

(defn uber [_]
  (clean nil)
  (b/copy-dir {:src-dirs ["src" "resources"]
               :target-dir class-dir})
  (b/compile-clj {:basis basis
                  :ns-compile '[my.lib.main]
                  :class-dir class-dir})
  (b/uber {:class-dir class-dir
           :uber-file uber-file
           :basis basis
           :main 'my.lib.main}))</code></pre>
</div>
</div>
<div class="paragraph">
<p>This example directs <code>compile-clj</code> to compile the main namespace (by default source will be loaded from the basis :paths). Compilation is transitive and all namespaces loaded by the compiled namespace will also be compiled. You may need to add additional namespaces if code is dynamically or optionally loaded.</p>
</div>
<div class="paragraph">
<p>The deps.edn and build execution will look the same as the prior example.</p>
</div>
<div class="paragraph">
<p>You can create the uber jar build with:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code>clj -T:build uber</code></pre>
</div>
</div>
<div class="paragraph">
<p>The output of this build will be an uberjar at <code>target/lib1-1.2.100-standalone.jar</code>. That jar contains both a compiled version of this project and all of its dependencies. The uberjar will have a manifest referring to the <code>my.lib.main</code> namespace (which should have a <code>-main</code> method) and can be invoked like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code>java -jar target/lib1-1.2.100-standalone.jar</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_parameterized_builds"><a class="anchor" href="#_parameterized_builds"></a>Parameterized builds</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In the builds above we did not parameterize any aspect of the build, just chose which functions to call. You may find that it&#8217;s useful to parameterize your builds to differentiate dev/qa/prod, or version, or some other factor. To account for function chaining at the command line, it is advisable to establish the common set of parameters to use across your build functions and have each function pass the parameters along.</p>
</div>
<div class="paragraph">
<p>For example, consider a parameterization that includes an extra set of dev resources to set a local developer environment. We&#8217;ll use a simple <code>:env :dev</code> kv pair to indicate this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(ns build
  (:require [clojure.tools.build.api :as b]))

(def lib 'my/lib1)
(def version (format "1.2.%s" (b/git-count-revs nil)))
(def class-dir "target/classes")
(def basis (b/create-basis {:project "deps.edn"}))
(def jar-file (format "target/%s-%s.jar" (name lib) version))
(def copy-srcs ["src" "resources"])

(defn clean [params]
  (b/delete {:path "target"})
  params)

(defn jar [{:keys [env] :as params}]
  (let [srcs (if (= env :dev) (cons "dev-resources" copy-srcs) copy-srcs)]
    (b/write-pom {:class-dir class-dir
                  :lib lib
                  :version version
                  :basis basis
                  :src-dirs ["src"]})
    (b/copy-dir {:src-dirs srcs
                 :target-dir class-dir})
    (b/jar {:class-dir class-dir
            :jar-file jar-file})
    params))</code></pre>
</div>
</div>
<div class="paragraph">
<p>The other aspects of deps.edn and invocation remain the same.</p>
</div>
<div class="paragraph">
<p>Invocation that activates :dev environment will look like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -T:build jar :env :dev</code></pre>
</div>
</div>
<div class="paragraph">
<p>The kv params are passed to the <code>jar</code> function.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_mixed_java_clojure_build"><a class="anchor" href="#_mixed_java_clojure_build"></a>Mixed Java / Clojure build</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A common case that occurs is needing to introduce a Java implementation class or two into a mostly Clojure project. In this case, you need to compile the Java classes and include them with your Clojure source. In this setup, we&#8217;ll assume that your Clojure source is in <code>src/</code> and Java source is in <code>java/</code> (where you actually put these is of course up to you).</p>
</div>
<div class="paragraph">
<p>This build creates a jar with classes compiled from Java sources and your Clojure sources.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(ns build
  (:require [clojure.tools.build.api :as b]))

(def lib 'my/lib1)
(def version (format "1.2.%s" (b/git-count-revs nil)))
(def class-dir "target/classes")
(def basis (b/create-basis {:project "deps.edn"}))
(def jar-file (format "target/%s-%s.jar" (name lib) version))

(defn clean [_]
  (b/delete {:path "target"}))

(defn compile [_]
  (b/javac {:src-dirs ["java"]
            :class-dir class-dir
            :basis basis
            :javac-opts ["--release" "11"]}))

(defn jar [_]
  (compile nil)
  (b/write-pom {:class-dir class-dir
                :lib lib
                :version version
                :basis basis
                :src-dirs ["src"]})
  (b/copy-dir {:src-dirs ["src" "resources"]
               :target-dir class-dir})
  (b/jar {:class-dir class-dir
          :jar-file jar-file}))</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>compile</code> task here can also be used as the <a href="deps_and_cli#prep_libs">prep task</a> for this lib.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_task_documentation"><a class="anchor" href="#_task_documentation"></a>Task documentation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>See the <a href="https://clojure.github.io/tools.build">API docs</a> for detailed task documentation.</p>
</div>
</div>
</div>

      <p><em>Original author: Alex Miller</em></p>


<div class="clj-prev-next-container">
  
  
</div>

    </div>
  </div>
</div>

  <div class="w-section clj-footer">
    <div class="w-container clj-footer-links-container">
      <div class="w-row">
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Community</h6>
            <a href="/community/resources" class="clj-footer-link">Resources</a>
            <a href="/community/contributing" class="clj-footer-link">Contributing</a>
            <a href="/community/companies" class="clj-footer-link">Companies</a>
            <a href="/community/contributing_site" class="clj-footer-link">Site</a>
          <h6 class="clj-footer-heading">Legal</h6>
            <a href="/community/license" class="clj-footer-link">License</a>
            <a href="/privacy" class="clj-footer-link">Privacy Policy</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Documentation</h6>
            <a href="/about/rationale" class="clj-footer-link">Overview</a>
            <a href="/reference/documentation" class="clj-footer-link">Reference</a>
            <a href="/api/api" class="clj-footer-link">API</a>
            <a href="/guides/guides" class="clj-footer-link">Guides</a>
            <a href="/community/libraries" class="clj-footer-link">Libraries &amp; Tools</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Updates</h6>
            <a href="/news/news" class="clj-footer-link">News</a>
            <a href="/community/events" class="clj-footer-link">Events</a>
          <h6 class="clj-footer-heading">ETC</h6>
            <a href="https://www.youtube.com/user/ClojureTV" class="clj-footer-link">ClojureTV</a>
            <a href="/community/books" class="clj-footer-link">Books</a>
            <a href="/community/swag" class="clj-footer-link">Swag</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Code</h6>
            <a href="/releases/downloads" class="clj-footer-link">Releases</a>
            <a href="https://github.com/clojure/clojure/" class="clj-footer-link">Source</a>
            <a href="http://clojurescript.org" class="clj-footer-link">ClojureScript</a>
            <a href="/about/clojureclr" class="clj-footer-link">ClojureCLR</a>
        </div>
      </div>
    </div>
    <div class="w-container clj-footer-legal-container">
      <div class="w-clearfix clj-footer-legal">
        <div class="clj-footer-logo">&nbsp;</div>
        <div class="clj-footer-legal-links">
          <div class="clj-footer-copyright">Copyright 2008-2022 Rich Hickey | <a class="clj-footer-sub-link" href="/privacy">Privacy Policy</a><br/>Logo &amp; site design by Tom Hickey
          </div>
          <div class="clj-footer-designed-by">Published 2023-12-18<br/>Update <a class="clj-footer-sub-link" href="https://github.com/clojure/clojure-site/blob/master/content/guides/tools_build.adoc">this page</a>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script type="text/javascript" src="/js/webflow.js"></script>
  <script type="text/javascript" src="/js/highlight.pack.js"></script>
  <script>
  $(document).ready( (event) => {
    $('pre code').each((index, obj) => {
      $(obj).addClass($(obj).attr("data-lang"));
      hljs.highlightBlock(obj);
    });
  });
  </script>
  <!--[if lte IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif]-->
</body>
</html>
