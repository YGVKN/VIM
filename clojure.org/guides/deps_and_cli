<!DOCTYPE html>
<!-- This site was created in Webflow. http://www.webflow.com-->
<!-- Last Published: Fri Nov 13 2015 01:48:45 GMT+0000 (UTC) -->
<html lang="en" data-wf-site="56414d6fc8c27cad0f4e12e7" data-wf-page="5643ac587b1f28dc58ed6b89">
<head>
  <meta charset="utf-8">
  <title>Clojure - Deps and CLI Guide</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="generator" content="Webflow">
  <meta name="google-site-verification" content="a30CDuC9UBifM7EL575LK9a4TEE6mNfWbKqXIoSZChg" />
  <meta name="google-site-verification" content="iXqpntr4CN3JRM1sVm5D_YzZw8bFRizBaTVycwqii2E" />
  <meta name="keywords" content="clojure,programming" />
  <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,600;1,300;1,400;1,600&family=PT+Serif:ital@0;1&&family=Source+Code+Pro:wght@500&display=swap">
  <link rel="stylesheet" type="text/css" href="/css/normalize.css">
  <link rel="stylesheet" type="text/css" href="/css/webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/clojureorg.webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/asciidoctor-mod.css">
  <link type="text/css" href="/css/default-en.css" rel="stylesheet">
  <link type="text/css" href="/css/default.css" rel="stylesheet">
  <link type="text/css" href="/css/search-result.css" rel="stylesheet">
  <link rel="alternate" type="application/atom+xml" title="News" href="/feed.xml" />
  <script type="text/javascript" src="/js/modernizr.js"></script>
  <link rel="shortcut icon" type="image/x-icon" href="/images/clojure-logo-icon-32.png">
  <link rel="apple-touch-icon" href="/images/clojure-logo-icon-256.png">
  <!-- Matomo -->
  <script>
    var _paq = window._paq = window._paq || [];
    /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
      var u="https://cognitect.matomo.cloud/";
      _paq.push(['setTrackerUrl', u+'matomo.php']);
      _paq.push(['setSiteId', '9']);
      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
      g.async=true; g.src='//cdn.matomo.cloud/cognitect.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);
    })();
  </script>
<!-- End Matomo Code -->
  <script type="text/javascript">
    function searchClj(obj) {
      let e = document.getElementById("searchType");
      document.getElementById("hiddenSearch").value=e.value;
    }
  </script>
</head>
<body>
  <div data-collapse="none" data-animation="default" data-duration="400" data-contain="1" class="w-nav clj-navbar">
    <div class="w-container">
      <a href="/index" class="w-nav-brand w-clearfix clj-logo-container"><img width="60" src="/images/clojure-logo-120b.png" class="clj-logo" alt="Clojure logo">
        <div class="clj-logo-text">Clojure</div>
      </a>
      <nav role="navigation" class="w-nav-menu clj-nav-menu"><a href="/about/rationale" class="w-nav-link clj-nav-link">Overview</a><a href="/reference/documentation" class="w-nav-link clj-nav-link">Reference‚Äç</a><a href="/api/api" class="w-nav-link clj-nav-link">API</a><a href="/releases/downloads" class="w-nav-link clj-nav-link">Releases</a><a href="/guides/guides" class="w-nav-link clj-nav-link">Guides</a><a href="/community/success_stories" class="w-nav-link clj-nav-link">Community</a><a href="/dev/dev" class="w-nav-link clj-nav-link">Dev</a><a href="/news/news" class="w-nav-link clj-nav-link">News</a><a href="#" data-ix="search-click-trigger" class="w-nav-link clj-nav-link clj-nav-search">&#xed11;</a>
      </nav>
      <div class="w-nav-button clj-menu-button">
        <div class="w-icon-nav-menu"></div>
      </div>
    </div>
  </div>
  <div data-ix="hide-search" class="w-section clj-search-section">
    <div class="w-container">
      <div class="w-form clj-search-form-wrapper">
        <form id="wf-form-Search-Form" name="wf-form-Search-Form" action="https://duckduckgo.com/" method="get" onSubmit="searchClj(this)">
          <div class="w-row">
            <div class="w-col w-col-6 w-col-small-6">
              <input id="hiddenSearch" type="hidden" name="sites" value="www.clojure.org">
              <input name="q" id="q" type="text" placeholder="Search clojure.org reference, guides, and API" title="Search text" autofocus="autofocus" class="w-input clj-search-input">
            </div>
            <div class="w-col w-col-3 w-col-small-3 clj-search-type">
              <select name="searchType" id="searchType" class="w-select clj-search-type">
                <option value="www.clojure.org">clojure.org</option>
                <option value="ask.clojure.org">ask.clojure.org</option>
              </select>
            </div>
            <div class="w-col w-col-3 w-col-small-3">
              <input type="submit" value="Search" class="w-button clj-search-submit">
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

<div class="w-section clj-content-section">
  <div class="w-container">
    <div class="clj-section-nav-container">
      <div data-collapse="small" data-animation="default" data-duration="200" data-contain="1" class="w-nav clj-section-navbar">
        <div class="w-container">
          <nav role="navigation" class="w-nav-menu clj-section-nav-menu">
            <div class="w-nav-link clj-section-nav-heading">Learning</div>
            <a href="getting_started" class="w-nav-link clj-section-nav-item-link">Getting Started</a>
            <a href="install_clojure" class="w-nav-link clj-section-nav-item-link">Install Clojure</a>
            <a href="editors" class="w-nav-link clj-section-nav-item-link">Editors</a>
            <a href="structural_editing" class="w-nav-link clj-section-nav-item-link">Structural Editing</a>
            <a href="repl/introduction" class="w-nav-link clj-section-nav-item-link">REPL Programming <span class="clj-nav-nested-icon">&#xeab8;</span></a>
            <a href="learn/clojure" class="w-nav-link clj-section-nav-item-link">Learn Clojure <span class="clj-nav-nested-icon">&#xeab8;</span></a>
            <a href="faq" class="w-nav-link clj-section-nav-item-link">FAQ</a>

            <div class="w-nav-link clj-section-nav-heading">Language</div>
            <a href="spec" class="w-nav-link clj-section-nav-item-link">spec</a>
            <a href="weird_characters" class="w-nav-link clj-section-nav-item-link">Reading Clojure Characters</a>
            <a href="destructuring" class="w-nav-link clj-section-nav-item-link">Destructuring</a>
            <a href="threading_macros" class="w-nav-link clj-section-nav-item-link">Threading Macros</a>
            <a href="equality" class="w-nav-link clj-section-nav-item-link">Equality</a>
            <a href="comparators" class="w-nav-link clj-section-nav-item-link">Comparators</a>
            <a href="reader_conditionals" class="w-nav-link clj-section-nav-item-link">Reader Conditionals</a>
            <a href="higher_order_functions" class="w-nav-link clj-section-nav-item-link">Higher Order Functions</a>

            <div class="w-nav-link clj-section-nav-heading">Usage</div>
            <a href="dev_startup_time" class="w-nav-link clj-section-nav-item-link">Dev Startup Time</a>

            <div class="w-nav-link clj-section-nav-heading">Tools</div>
            <a href="deps_and_cli" class="w-nav-link clj-section-nav-item-link">Deps and CLI</a>
            <a href="tools_build" class="w-nav-link clj-section-nav-item-link">tools.build</a>

            <div class="w-nav-link clj-section-nav-heading">Libraries</div>
            <a href="async_walkthrough" class="w-nav-link clj-section-nav-item-link">core.async Walkthrough</a>
            <a href="core_async_go" class="w-nav-link clj-section-nav-item-link">Go Block Best Practices</a>
            <a href="test_check_beginner" class="w-nav-link clj-section-nav-item-link">test.check</a>
          </nav>
          <div data-ix="toggle-section-nav-icon" class="w-nav-button w-clearfix clj-section-nav-toggle">
            <div class="clj-section-nav-text">Deps and CLI Guide</div>
            <div class="clj-section-nav-icon-closed">&#xeab2;</div>
            <div data-ix="init-hide-section-nav-icon-open" class="clj-section-nav-icon-open">&#xeab9;</div>
          </div>
        </div>
      </div>
    </div>
    <div class="clj-content-container">

      <h1>Deps and CLI Guide</h1>

      <div id="preamble">
<div class="sectionbody">
<div id="toc" class="toc">
<div id="toctitle" class="title">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_running_a_repl_and_using_libraries">Running a REPL and using libraries</a></li>
<li><a href="#_writing_a_program">Writing a program</a></li>
<li><a href="#_using_a_main">Using a main</a></li>
<li><a href="#_using_local_libraries">Using local libraries</a></li>
<li><a href="#_using_git_libraries">Using git libraries</a></li>
<li><a href="#_other_examples">Other examples</a>
<ul class="sectlevel2">
<li><a href="#extra_paths">Include a test source directory</a></li>
<li><a href="#test_runner">Use a test runner to run all tests</a></li>
<li><a href="#extra_deps">Add an optional dependency</a></li>
<li><a href="#command_line_deps">Add a dependency from the command line</a></li>
<li><a href="#prep_libs">Preparing source dependency libs</a></li>
<li><a href="#override_deps">Override a dependency</a></li>
<li><a href="#local_jar">Include a local jar on disk</a></li>
<li><a href="#aot_compilation">Ahead-of-time (AOT) compilation</a></li>
<li><a href="#socket_repl">Run a socket server remote repl</a></li>
<li><a href="#list_deps">List all dependencies</a></li>
</ul>
</li>
</ul>
</div>
<div class="paragraph">
<p>Clojure provides command line tools for:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Running an interactive REPL (Read-Eval-Print Loop)</p>
</li>
<li>
<p>Running Clojure programs</p>
</li>
<li>
<p>Evaluating Clojure expressions</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In all the above scenarios you might want to use other Clojure and Java libraries (dependencies or 'deps'). These may be libraries you are writing locally, projects in git (e.g. on GitHub) or, commonly, libraries available in the Maven ecosystem and hosted by central repositories like Maven Central or Clojars.</p>
</div>
<div class="paragraph">
<p>In all cases, using a library involves:</p>
</div>
<div class="olist loweralpha">
<ol class="loweralpha">
<li>
<p>specifying which library you want to use, providing its name and other aspects like version</p>
</li>
<li>
<p>getting it (once) from the git or maven repositories to your local machine</p>
</li>
<li>
<p>making it available on the JVM classpath so Clojure can find it while your REPL or program is running</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Clojure tools specify a syntax and file (<code>deps.edn</code>) for (a), given which they&#8217;ll handle (b) and (c) automatically.</p>
</div>
<div class="paragraph">
<p>See <a href="getting_started">Getting Started</a> for details on how to install the tools. Here we will demonstrate how to get started. See <a href="xref/../../reference/deps_and_cli">Deps and CLI</a> for a complete reference. See the <a href="xref/../../releases/tools">changelog</a> for version information.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_running_a_repl_and_using_libraries"><a class="anchor" href="#_running_a_repl_and_using_libraries"></a>Running a REPL and using libraries</h2>
<div class="sectionbody">
<div class="paragraph">
<p>After you download and install the tools, you can start a REPL by running the <code>clj</code> tool:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ clj
Clojure 1.11.1
user=&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Once in the REPL you can type Clojure expressions and press enter to evaluate them.  Type Control-D to exit the REPL:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">user=&gt; (+ 2 3)   # press the `enter` key after typing the expression to evaluate it
5                # result of expression
user=&gt;           # type Ctrl-D here to exit the REPL (does not print)
$</code></pre>
</div>
</div>
<div class="paragraph">
<p>There are many Clojure and Java libraries available that provide access to practically any functionality you might need. For example, consider the commonly used Clojure library <a href="https://github.com/dm3/clojure.java-time">clojure.java-time</a> for working with dates and times.</p>
</div>
<div class="paragraph">
<p>To work with this library, you need to declare it as a dependency so the tool can ensure it has been downloaded and add it to the classpath. The readme in most projects shows the name and version to use. Create a <code>deps.edn</code> file to declare the dependency:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:deps
 {clojure.java-time/clojure.java-time {:mvn/version "1.1.0"}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Alternately, if you don&#8217;t know the version, you can use the <code>find-versions</code> tool which will list all available coordinates in sorted order:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ clj -X:deps find-versions :lib clojure.java-time/clojure.java-time
...omitted
{:mvn/version "1.0.0"}
{:mvn/version "1.1.0"}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Restart the REPL with the <code>clj</code> tool:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">$ clj
Downloading: clojure/java-time/clojure.java-time/1.1.0/clojure.java-time-1.1.0.pom from clojars
Downloading: clojure/java-time/clojure.java-time/1.1.0/clojure.java-time-1.1.0.jar from clojars
Clojure 1.11.1
user=&gt; (require '[java-time.api :as t])
nil
user=&gt; (str (t/instant))
"2022-10-07T16:06:50.067221Z"</code></pre>
</div>
</div>
<div class="paragraph">
<p>You will see messages about a library being downloaded the first time you use a dependency. Once the file is downloaded (usually to <code>~/.m2</code> or <code>~/.gitlibs</code>), it will be reused in the future. You can use the same process to add other libraries to your <code>deps.edn</code> file and explore Clojure or Java libraries.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_writing_a_program"><a class="anchor" href="#_writing_a_program"></a>Writing a program</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Soon you will want to build and save your own code that makes use of these libraries. Create a new directory and copy this <code>deps.edn</code> into it:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ mkdir hello-world
$ cp deps.edn hello-world
$ cd hello-world
$ mkdir src</code></pre>
</div>
</div>
<div class="paragraph">
<p>By default, the <code>clj</code> tool will look for source files in the <code>src</code> directory. Create <code>src/hello.clj</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(ns hello
  (:require [java-time.api :as t]))

(defn time-str
  "Returns a string representation of a datetime in the local time zone."
  [instant]
  (t/format
    (t/with-zone (t/formatter "hh:mm a") (t/zone-id))
    instant))

(defn run [opts]
  (println "Hello world, the time is" (time-str (t/instant))))</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_using_a_main"><a class="anchor" href="#_using_a_main"></a>Using a main</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This program has an entry function <code>run</code> that can be executed by <code>clj</code> using <code>-X</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ clj -X hello/run
Hello world, the time is 12:19 PM</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_using_local_libraries"><a class="anchor" href="#_using_local_libraries"></a>Using local libraries</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You might decide to move part of this application into a library. The <code>clj</code> tool uses local coordinates to support projects that exist only on your local disk. Let&#8217;s extract the java-time parts of this application out into a library in a parallel directory time-lib. The final structure will look something like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>‚îú‚îÄ‚îÄ time-lib
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ deps.edn
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ src
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ hello_time.clj
‚îî‚îÄ‚îÄ hello-world
    ‚îú‚îÄ‚îÄ deps.edn
    ‚îî‚îÄ‚îÄ src
        ‚îî‚îÄ‚îÄ hello.clj</pre>
</div>
</div>
<div class="paragraph">
<p>Under time-lib, use a copy of the <code>deps.edn</code> file you already have, and create a file <code>src/hello_time.clj</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(ns hello-time
  (:require [java-time.api :as t]))

(defn now
  "Returns the current datetime"
  []
  (t/instant))

(defn time-str
  "Returns a string representation of a datetime in the local time zone."
  [instant]
  (t/format
    (t/with-zone (t/formatter "hh:mm a") (t/zone-id))
    instant))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Update the application at <code>hello-world/src/hello.clj</code> to use your library instead:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(ns hello
  (:require [hello-time :as ht]))

(defn run [opts]
  (println "Hello world, the time is" (ht/time-str (ht/now))))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Modify <code>hello-world/deps.edn</code> to use a local coordinate that refers to the root directory of the time-lib library (make sure to update the path for your machine):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:deps
 {time-lib/time-lib {:local/root "../time-lib"}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can then test everything from the hello-world directory by running the application:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ clj -X hello/run
Hello world, the time is 12:22 PM</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_using_git_libraries"><a class="anchor" href="#_using_git_libraries"></a>Using git libraries</h2>
<div class="sectionbody">
<div class="paragraph">
<p>It would be great to share that library with others. You can accomplish this by pushing the project to a public or private git repository and letting others use it with a git dependency coordinate.</p>
</div>
<div class="paragraph">
<p>First, create a git library for the time-lib:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">cd ../time-lib
git init
git add deps.edn src
git commit -m 'init'</code></pre>
</div>
</div>
<div class="paragraph">
<p>Then go to a public git repository host (like GitHub) and follow the instructions for creating and publishing this git repository.</p>
</div>
<div class="paragraph">
<p>We also want to tag this release so it has a meaningful version:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">git tag -a 'v0.0.1' -m 'initial release'
git push --tags</code></pre>
</div>
</div>
<div class="paragraph">
<p>Finally, modify your app to use the git dependency instead. You&#8217;ll need to gather the following information:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>repository lib - the Clojure CLI uses a convention where the URL does not need to be specified if you use a library name like <code>io.github.yourname/time-lib</code> for the GitHub url <code><a href="https://github.com/yourname/time-lib.git" class="bare">https://github.com/yourname/time-lib.git</a></code>.</p>
</li>
<li>
<p>tag - <code>v0.0.1</code> is what we created above</p>
</li>
<li>
<p>sha - the short sha at the tag, find it with <code>git rev-parse --short v0.0.1^{commit}</code> if you have the repo locally, or <code>git ls-remote <a href="https://github.com/yourname/time-lib.git" class="bare">https://github.com/yourname/time-lib.git</a> v0.0.1</code> if it&#8217;s remote. You can also find it by using the GitHub repo to look at tags and their backing commit.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Update the <code>hello-world/deps.edn</code> to use a git coordinate instead:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:deps
 {io.github.yourname/time-lib {:git/tag "v0.0.1" :git/sha "4c4a34d"}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now you can run the app again, making use of the (shared) git repository library. The first time you run it you&#8217;ll see extra messages on the console when <code>clj</code> downloads and caches the repository and the commit working tree:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ clj -X hello/run
Cloning: https://github.com/yourname/time-lib
Checking out: https://github.com/yourname/time-lib at 4c4a34d
Hello world, the time is 02:10 PM</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now your friends can use <code>time-lib</code> too!</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_other_examples"><a class="anchor" href="#_other_examples"></a>Other examples</h2>
<div class="sectionbody">
<div class="paragraph">
<p>As your program gets more involved you might need to create variations on the standard classpath. The Clojure tools supports classpath modifications using aliases, which are parts of the deps file that are only used when the corresponding alias is supplied. Some of the things you can do are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="deps_and_cli#extra_paths">Include a test source directory</a></p>
</li>
<li>
<p><a href="deps_and_cli#test_runner">Use a test runner to run all tests</a></p>
</li>
<li>
<p><a href="deps_and_cli#extra_deps">Add an optional dependency</a></p>
</li>
<li>
<p><a href="deps_and_cli#command_line_deps">Add a dependency from the command line</a></p>
</li>
<li>
<p><a href="deps_and_cli#prep_libs">Prep source dependency libs</a></p>
</li>
<li>
<p><a href="deps_and_cli#override_deps">Override a dependency version</a></p>
</li>
<li>
<p><a href="deps_and_cli#local_jar">Use a local jar on disk</a></p>
</li>
<li>
<p><a href="deps_and_cli#aot_compilation">Ahead-of-time (AOT) compilation</a></p>
</li>
<li>
<p><a href="deps_and_cli#socket_repl">Run a socket server remote repl</a></p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="extra_paths"><a class="anchor" href="#extra_paths"></a>Include a test source directory</h3>
<div class="paragraph">
<p>Typically, the project classpath includes only the project source, not its test source by default. You can add extra paths as modifications to the primary classpath in the make-classpath step of the classpath construction. To do so, add an alias <code>:test</code> that includes the extra relative source path <code>"test"</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:deps
 {org.clojure/core.async {:mvn/version "1.3.610"}}

 :aliases
 {:test {:extra-paths ["test"]}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Apply that classpath modification and examine the modified classpath by invoking <code>clj -A:test -Spath</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ clj -A:test -Spath
test:
src:
/Users/me/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar:
... same as before (split here for readability)</code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that the test dir is now included in the classpath.</p>
</div>
</div>
<div class="sect2">
<h3 id="test_runner"><a class="anchor" href="#test_runner"></a>Use a test runner to run all tests</h3>
<div class="paragraph">
<p>You can extend the <code>:test</code> alias in the previous section to include the cognitect-labs <a href="https://github.com/cognitect-labs/test-runner">test-runner</a> for running all clojure.test tests:</p>
</div>
<div class="paragraph">
<p>Extend the <code>:test</code> alias:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:deps
 {org.clojure/core.async {:mvn/version "1.3.610"}}

 :aliases
 {:test {:extra-paths ["test"]
         :extra-deps {io.github.cognitect-labs/test-runner {:git/tag "v0.5.1" :git/sha "dfb30dd"}}
         :main-opts ["-m" "cognitect.test-runner"]
         :exec-fn cognitect.test-runner.api/test}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>And then execute the test runner using the default config (run all tests in -test namespaces under the test/ dir):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -X:test</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="extra_deps"><a class="anchor" href="#extra_deps"></a>Add an optional dependency</h3>
<div class="paragraph">
<p>Aliases in the <code>deps.edn</code> file can also be used to add optional dependencies that affect the classpath:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:aliases
 {:bench {:extra-deps {criterium/criterium {:mvn/version "0.4.4"}}}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Here the <code>:bench</code> alias is used to add an extra dependency, namely the criterium benchmarking library.</p>
</div>
<div class="paragraph">
<p>You can add this dependency to your classpath by adding the <code>:bench</code> alias to modify the dependency resolution: <code>clj -A:bench</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="command_line_deps"><a class="anchor" href="#command_line_deps"></a>Add a dependency from the command line</h3>
<div class="paragraph">
<p>It can be helpful to experiment with a library without adding it to an existing <code>deps.edn</code> file or creating one.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="bash">$ clojure -Sdeps '{:deps {org.clojure/core.async {:mvn/version "1.5.648"}}}'
Clojure 1.11.1
user=&gt; (require '[clojure.core.async :as a])
nil</code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that due to escaping rules, it&#8217;s best to wrap the config data in single quotes.</p>
</div>
</div>
<div class="sect2">
<h3 id="prep_libs"><a class="anchor" href="#prep_libs"></a>Preparing source dependency libs</h3>
<div class="paragraph">
<p>Some dependencies will require a preparation step before they can be used on the classpath. These libs should state this need in their <code>deps.edn</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:paths ["src" "target/classes"]
 :deps/prep-lib {:alias :build
                 :fn compile
                 :ensure "target/classes"}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Including the top-level key <code>:deps/prep-lib</code> tells the tools.deps classpath construction that something extra is needed to prepare this lib and that can be performed by invoking the <code>compile</code> function in the <code>:build</code> alias. Once the prepare step has been done, it should create the path <code>"target/classes"</code> and that can be checked for completion.</p>
</div>
<div class="paragraph">
<p>You depend on this library like any other source-based library (could be git or local):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:deps {my/lib {:local/root "../needs-prep"}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>If you then try to include that library on your classpath you&#8217;ll see an error:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ clj
Error building classpath. The following libs must be prepared before use: [my/lib]</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can then tell the CLI to prep using this command (this is a 1-time action for a particular lib version):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ clj -X:deps prep
Prepping io.github.puredanger/cool-lib in /Users/me/demo/needs-prep
$ clj
Clojure 1.11.1
user=&gt;</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="override_deps"><a class="anchor" href="#override_deps"></a>Override a dependency</h3>
<div class="paragraph">
<p>You can use multiple aliases in combination. For example this <code>deps.edn</code> file defines two aliases - <code>:old-async</code> to force the use of an older core.async version and <code>:bench</code> to add an extra dependency:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:deps
 {org.clojure/core.async {:mvn/version "0.3.465"}}

 :aliases
 {:old-async {:override-deps {org.clojure/core.async {:mvn/version "0.3.426"}}}
  :bench {:extra-deps {criterium/criterium {:mvn/version "0.4.4"}}}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Activate both aliases as follows: <code>clj -A:bench:old-async</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="local_jar"><a class="anchor" href="#local_jar"></a>Include a local jar on disk</h3>
<div class="paragraph">
<p>Occasionally you may need to refer directly to a jar on disk that is not present in a Maven repository, such as a database driver jar.</p>
</div>
<div class="paragraph">
<p>Specify local jar dependencies with a local coordinate that points directly to a jar file instead of a directory:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:deps
 {db/driver {:local/root "/path/to/db/driver.jar"}}}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="aot_compilation"><a class="anchor" href="#aot_compilation"></a>Ahead-of-time (AOT) compilation</h3>
<div class="paragraph">
<p>When using <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/gen-class">gen-class</a> or <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/gen-interface">gen-interface</a>, the Clojure source must be ahead-of-time compiled to generate the java class(es).</p>
</div>
<div class="paragraph">
<p>This can be done by calling <code>compile</code>. The default destination for compiled class files is <code>classes/</code>, which needs to be created and added to the classpath:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ mkdir classes</code></pre>
</div>
</div>
<div class="paragraph">
<p>Edit <code>deps.edn</code> to add <code>"classes"</code> to the paths:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:paths ["src" "classes"]}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Declare a class with gen-class in <code>src/my_class.clj</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(ns my-class)

(gen-class
  :name my_class.MyClass
  :methods [[hello [] String]])

(defn -hello [this]
  "Hello, World!")</code></pre>
</div>
</div>
<div class="paragraph">
<p>Then you can reference the class with <code>:import</code> in another source file <code>src/hello.clj</code>. Notice that the namespace is also added in <code>:require</code> so compilation can automatically find all dependent namespaces and compile them.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(ns hello
  (:require [my-class])
  (:import (my_class MyClass)))

(defn -main [&amp; args]
  (let [inst (MyClass.)]
    (println (.hello inst))))</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can compile in the REPL or run a script to do the compilation:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ clj -M -e "(compile 'hello)"</code></pre>
</div>
</div>
<div class="paragraph">
<p>And then run the hello namespace:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ clj -M -m hello
Hello, World!</code></pre>
</div>
</div>
<div class="paragraph">
<p>See <a href="xref/../../reference/compilation">Compilation and Class Generation</a> for a complete reference.</p>
</div>
</div>
<div class="sect2">
<h3 id="socket_repl"><a class="anchor" href="#socket_repl"></a>Run a socket server remote repl</h3>
<div class="paragraph">
<p>Clojure provides built-in support for running <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core.server/start-server">socket servers</a>, and in particular using them to host remote REPLs.</p>
</div>
<div class="paragraph">
<p>To configure a socket server repl, add the following base configuration to your <code>deps.edn</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:aliases
 {:repl-server
  {:exec-fn clojure.core.server/start-server
   :exec-args {:name "repl-server"
               :port 5555
               :accept clojure.core.server/repl
               :server-daemon false}}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>And then start the server by invoking with the alias:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clojure -X:repl-server</code></pre>
</div>
</div>
<div class="paragraph">
<p>If you like, you can also override the default parameters (or add additional options) on the command line:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clojure -X:repl-server :port 51234</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can use netcat to connect from another terminal:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">nc localhost 51234
user=&gt; (+ 1 1)
2</code></pre>
</div>
</div>
<div class="paragraph">
<p>Use Ctrl-D to exit the repl and Ctrl-C to exit the server.</p>
</div>
</div>
<div class="sect2">
<h3 id="list_deps"><a class="anchor" href="#list_deps"></a>List all dependencies</h3>
<div class="paragraph">
<p>There are several helpful tools in the built-in <code>:deps</code> alias to explore the full set of transitive deps used by your project (and their licenses).</p>
</div>
<div class="paragraph">
<p>To <a href="https://clojure.github.io/tools.deps.cli/clojure.tools.deps.cli.api-api.html#clojure.tools.deps.cli.api/list">list</a> the full set of all the deps included on your classpath, use <code>clj -X:deps list</code>. For example in the <code>hello-world</code> application at the top of this guide, you would see something like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">% clj -X:deps list
clojure.java-time/clojure.java-time 1.1.0  (MIT)
org.clojure/clojure 1.11.1  (EPL-1.0)
org.clojure/core.specs.alpha 0.2.62  (EPL-1.0)
org.clojure/spec.alpha 0.3.218  (EPL-1.0)
time-lib/time-lib ../cli-getting-started/time-lib</code></pre>
</div>
</div>
<div class="paragraph">
<p>The full set of transitive dependencies used by your application is listed in alphabetical order with version and license. See the api docs for additional printing options.</p>
</div>
<div class="paragraph">
<p>If you want to understand the <a href="https://clojure.github.io/tools.deps.cli/clojure.tools.deps.cli.api-api.html#clojure.tools.deps.cli.api/tree">tree</a> structure of your dependencies and how version selection choices were made, use <code>clj -X:deps tree</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">% clj -X:deps tree
org.clojure/clojure 1.11.1
  . org.clojure/spec.alpha 0.3.218
  . org.clojure/core.specs.alpha 0.2.62
time-lib/time-lib /Users/alex.miller/tmp/cli-getting-started/time-lib
  . clojure.java-time/clojure.java-time 1.1.0</code></pre>
</div>
</div>
<div class="paragraph">
<p>There were no version selections made here, but see <a href="https://clojure.org/reference/dep_expansion#_tree_printing">the docs</a> for more on how choices are explained in the tree if needed.</p>
</div>
<div class="paragraph">
<p>Both of these helper functions take an optional <code>:aliases</code> argument if you wish to examine the dependency list or tree with one or more aliases applied, such as <code>clj -X:deps list '[:alias1 :alias2]'</code>.</p>
</div>
</div>
</div>
</div>

      <p><em>Original author: Alex Miller</em></p>


<div class="clj-prev-next-container">
  
  
</div>

    </div>
  </div>
</div>

  <div class="w-section clj-footer">
    <div class="w-container clj-footer-links-container">
      <div class="w-row">
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Community</h6>
            <a href="/community/resources" class="clj-footer-link">Resources</a>
            <a href="/community/contributing" class="clj-footer-link">Contributing</a>
            <a href="/community/companies" class="clj-footer-link">Companies</a>
            <a href="/community/contributing_site" class="clj-footer-link">Site</a>
          <h6 class="clj-footer-heading">Legal</h6>
            <a href="/community/license" class="clj-footer-link">License</a>
            <a href="/privacy" class="clj-footer-link">Privacy Policy</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Documentation</h6>
            <a href="/about/rationale" class="clj-footer-link">Overview</a>
            <a href="/reference/documentation" class="clj-footer-link">Reference</a>
            <a href="/api/api" class="clj-footer-link">API</a>
            <a href="/guides/guides" class="clj-footer-link">Guides</a>
            <a href="/community/libraries" class="clj-footer-link">Libraries &amp; Tools</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Updates</h6>
            <a href="/news/news" class="clj-footer-link">News</a>
            <a href="/community/events" class="clj-footer-link">Events</a>
          <h6 class="clj-footer-heading">ETC</h6>
            <a href="https://www.youtube.com/user/ClojureTV" class="clj-footer-link">ClojureTV</a>
            <a href="/community/books" class="clj-footer-link">Books</a>
            <a href="/community/swag" class="clj-footer-link">Swag</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Code</h6>
            <a href="/releases/downloads" class="clj-footer-link">Releases</a>
            <a href="https://github.com/clojure/clojure/" class="clj-footer-link">Source</a>
            <a href="http://clojurescript.org" class="clj-footer-link">ClojureScript</a>
            <a href="/about/clojureclr" class="clj-footer-link">ClojureCLR</a>
        </div>
      </div>
    </div>
    <div class="w-container clj-footer-legal-container">
      <div class="w-clearfix clj-footer-legal">
        <div class="clj-footer-logo">&nbsp;</div>
        <div class="clj-footer-legal-links">
          <div class="clj-footer-copyright">Copyright 2008-2022 Rich Hickey | <a class="clj-footer-sub-link" href="/privacy">Privacy Policy</a><br/>Logo &amp; site design by Tom Hickey
          </div>
          <div class="clj-footer-designed-by">Published 2023-12-18<br/>Update <a class="clj-footer-sub-link" href="https://github.com/clojure/clojure-site/blob/master/content/guides/deps_and_cli.adoc">this page</a>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script type="text/javascript" src="/js/webflow.js"></script>
  <script type="text/javascript" src="/js/highlight.pack.js"></script>
  <script>
  $(document).ready( (event) => {
    $('pre code').each((index, obj) => {
      $(obj).addClass($(obj).attr("data-lang"));
      hljs.highlightBlock(obj);
    });
  });
  </script>
  <!--[if lte IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif]-->
</body>
</html>
