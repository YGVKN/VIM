<!DOCTYPE html>
<!-- This site was created in Webflow. http://www.webflow.com-->
<!-- Last Published: Fri Nov 13 2015 01:48:45 GMT+0000 (UTC) -->
<html lang="en" data-wf-site="56414d6fc8c27cad0f4e12e7" data-wf-page="5643ac587b1f28dc58ed6b89">
<head>
  <meta charset="utf-8">
  <title>Clojure - Threading Macros Guide</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="generator" content="Webflow">
  <meta name="google-site-verification" content="a30CDuC9UBifM7EL575LK9a4TEE6mNfWbKqXIoSZChg" />
  <meta name="google-site-verification" content="iXqpntr4CN3JRM1sVm5D_YzZw8bFRizBaTVycwqii2E" />
  <meta name="keywords" content="clojure,programming" />
  <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,600;1,300;1,400;1,600&family=PT+Serif:ital@0;1&&family=Source+Code+Pro:wght@500&display=swap">
  <link rel="stylesheet" type="text/css" href="/css/normalize.css">
  <link rel="stylesheet" type="text/css" href="/css/webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/clojureorg.webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/asciidoctor-mod.css">
  <link type="text/css" href="/css/default-en.css" rel="stylesheet">
  <link type="text/css" href="/css/default.css" rel="stylesheet">
  <link type="text/css" href="/css/search-result.css" rel="stylesheet">
  <link rel="alternate" type="application/atom+xml" title="News" href="/feed.xml" />
  <script type="text/javascript" src="/js/modernizr.js"></script>
  <link rel="shortcut icon" type="image/x-icon" href="/images/clojure-logo-icon-32.png">
  <link rel="apple-touch-icon" href="/images/clojure-logo-icon-256.png">
  <!-- Matomo -->
  <script>
    var _paq = window._paq = window._paq || [];
    /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
      var u="https://cognitect.matomo.cloud/";
      _paq.push(['setTrackerUrl', u+'matomo.php']);
      _paq.push(['setSiteId', '9']);
      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
      g.async=true; g.src='//cdn.matomo.cloud/cognitect.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);
    })();
  </script>
<!-- End Matomo Code -->
  <script type="text/javascript">
    function searchClj(obj) {
      let e = document.getElementById("searchType");
      document.getElementById("hiddenSearch").value=e.value;
    }
  </script>
</head>
<body>
  <div data-collapse="none" data-animation="default" data-duration="400" data-contain="1" class="w-nav clj-navbar">
    <div class="w-container">
      <a href="/index" class="w-nav-brand w-clearfix clj-logo-container"><img width="60" src="/images/clojure-logo-120b.png" class="clj-logo" alt="Clojure logo">
        <div class="clj-logo-text">Clojure</div>
      </a>
      <nav role="navigation" class="w-nav-menu clj-nav-menu"><a href="/about/rationale" class="w-nav-link clj-nav-link">Overview</a><a href="/reference/documentation" class="w-nav-link clj-nav-link">Reference‚Äç</a><a href="/api/api" class="w-nav-link clj-nav-link">API</a><a href="/releases/downloads" class="w-nav-link clj-nav-link">Releases</a><a href="/guides/guides" class="w-nav-link clj-nav-link">Guides</a><a href="/community/success_stories" class="w-nav-link clj-nav-link">Community</a><a href="/dev/dev" class="w-nav-link clj-nav-link">Dev</a><a href="/news/news" class="w-nav-link clj-nav-link">News</a><a href="#" data-ix="search-click-trigger" class="w-nav-link clj-nav-link clj-nav-search">&#xed11;</a>
      </nav>
      <div class="w-nav-button clj-menu-button">
        <div class="w-icon-nav-menu"></div>
      </div>
    </div>
  </div>
  <div data-ix="hide-search" class="w-section clj-search-section">
    <div class="w-container">
      <div class="w-form clj-search-form-wrapper">
        <form id="wf-form-Search-Form" name="wf-form-Search-Form" action="https://duckduckgo.com/" method="get" onSubmit="searchClj(this)">
          <div class="w-row">
            <div class="w-col w-col-6 w-col-small-6">
              <input id="hiddenSearch" type="hidden" name="sites" value="www.clojure.org">
              <input name="q" id="q" type="text" placeholder="Search clojure.org reference, guides, and API" title="Search text" autofocus="autofocus" class="w-input clj-search-input">
            </div>
            <div class="w-col w-col-3 w-col-small-3 clj-search-type">
              <select name="searchType" id="searchType" class="w-select clj-search-type">
                <option value="www.clojure.org">clojure.org</option>
                <option value="ask.clojure.org">ask.clojure.org</option>
              </select>
            </div>
            <div class="w-col w-col-3 w-col-small-3">
              <input type="submit" value="Search" class="w-button clj-search-submit">
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

<div class="w-section clj-content-section">
  <div class="w-container">
    <div class="clj-section-nav-container">
      <div data-collapse="small" data-animation="default" data-duration="200" data-contain="1" class="w-nav clj-section-navbar">
        <div class="w-container">
          <nav role="navigation" class="w-nav-menu clj-section-nav-menu">
            <div class="w-nav-link clj-section-nav-heading">Learning</div>
            <a href="getting_started" class="w-nav-link clj-section-nav-item-link">Getting Started</a>
            <a href="install_clojure" class="w-nav-link clj-section-nav-item-link">Install Clojure</a>
            <a href="editors" class="w-nav-link clj-section-nav-item-link">Editors</a>
            <a href="structural_editing" class="w-nav-link clj-section-nav-item-link">Structural Editing</a>
            <a href="repl/introduction" class="w-nav-link clj-section-nav-item-link">REPL Programming <span class="clj-nav-nested-icon">&#xeab8;</span></a>
            <a href="learn/clojure" class="w-nav-link clj-section-nav-item-link">Learn Clojure <span class="clj-nav-nested-icon">&#xeab8;</span></a>
            <a href="faq" class="w-nav-link clj-section-nav-item-link">FAQ</a>

            <div class="w-nav-link clj-section-nav-heading">Language</div>
            <a href="spec" class="w-nav-link clj-section-nav-item-link">spec</a>
            <a href="weird_characters" class="w-nav-link clj-section-nav-item-link">Reading Clojure Characters</a>
            <a href="destructuring" class="w-nav-link clj-section-nav-item-link">Destructuring</a>
            <a href="threading_macros" class="w-nav-link clj-section-nav-item-link">Threading Macros</a>
            <a href="equality" class="w-nav-link clj-section-nav-item-link">Equality</a>
            <a href="comparators" class="w-nav-link clj-section-nav-item-link">Comparators</a>
            <a href="reader_conditionals" class="w-nav-link clj-section-nav-item-link">Reader Conditionals</a>
            <a href="higher_order_functions" class="w-nav-link clj-section-nav-item-link">Higher Order Functions</a>

            <div class="w-nav-link clj-section-nav-heading">Usage</div>
            <a href="dev_startup_time" class="w-nav-link clj-section-nav-item-link">Dev Startup Time</a>

            <div class="w-nav-link clj-section-nav-heading">Tools</div>
            <a href="deps_and_cli" class="w-nav-link clj-section-nav-item-link">Deps and CLI</a>
            <a href="tools_build" class="w-nav-link clj-section-nav-item-link">tools.build</a>

            <div class="w-nav-link clj-section-nav-heading">Libraries</div>
            <a href="async_walkthrough" class="w-nav-link clj-section-nav-item-link">core.async Walkthrough</a>
            <a href="core_async_go" class="w-nav-link clj-section-nav-item-link">Go Block Best Practices</a>
            <a href="test_check_beginner" class="w-nav-link clj-section-nav-item-link">test.check</a>
          </nav>
          <div data-ix="toggle-section-nav-icon" class="w-nav-button w-clearfix clj-section-nav-toggle">
            <div class="clj-section-nav-text">Threading Macros Guide</div>
            <div class="clj-section-nav-icon-closed">&#xeab2;</div>
            <div data-ix="init-hide-section-nav-icon-open" class="clj-section-nav-icon-open">&#xeab9;</div>
          </div>
        </div>
      </div>
    </div>
    <div class="clj-content-container">

      <h1>Threading Macros Guide</h1>

      <div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Threading macros, also known as arrow macros, convert nested function calls into a linear flow of function calls, improving readability.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="thread-first"><a class="anchor" href="#thread-first"></a>The thread-first macro (->)</h3>
<div class="paragraph">
<p>In idiomatic Clojure, pure functions transform immutable data structures into a
desired output format. Consider a function that applies two transformations to a
map:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn transform [person]
   (update (assoc person :hair-color :gray) :age inc))

(transform {:name "Socrates", :age 39})
;; =&gt; {:name "Socrates", :age 40, :hair-color :gray}</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>transform</code> is an example of a common pattern: it takes a value and applies multiple
transformations with each step in the pipeline taking the result of the
previous step as its input. It is often possible to improve code of this type
by rewriting it to use the thread-first macro <code>-></code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn transform* [person]
   (-&gt; person
      (assoc :hair-color :gray)
      (update :age inc)))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Taking an initial value as its first argument, <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/->"><code>-></code></a>
threads it through one
or more expressions.</p>
</div>
<div class="paragraph">
<p><em>Note: The word "thread" in this context (meaning passing a value through a pipeline of functions) is unrelated to the concept of concurrent threads of execution.</em></p>
</div>
<div class="paragraph">
<p>Starting with the second form, the macro inserts the first value as its first
argument. This is repeated at each subsequent step with the result of the
previous computation inserted as the first argument of the next form.
What looks like a function call with two arguments is in fact a call with three
arguments, as the threaded value is inserted just after the function name. It may
be helpful to mark the insertion point with three commas for illustration:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn transform* [person]
   (-&gt; person
      (assoc ,,, :hair-color :gray)
      (update ,,, :age inc)))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Though not often seen in practice, this visual aid is valid Clojure syntax,
as commas are whitespace in Clojure.</p>
</div>
<div class="paragraph">
<p>Semantically, <code>transform*</code> is equivalent to <code>transform</code>: the arrow macro expands
at compile time into the original code. In each case, the return value of the
function is the result of the last computation, the call to <code>update</code>. The re-written
function reads like a description of the transformation: "Take a person, give them gray
hair, increase their age, and return the result". Of course in the context of immutable
values, no actual mutation takes place. Instead, the function simply
returns a new value with updated attributes.</p>
</div>
<div class="paragraph">
<p>Syntactically, the threading macro also allows the reader to read the functions in
left to right order of application, rather than reading from the innermost expression out.</p>
</div>
</div>
<div class="sect2">
<h3 id="thread-last"><a class="anchor" href="#thread-last"></a>thread-last (->>) and thread-as (as->) macros</h3>
<div class="paragraph">
<p>The <code>-></code> macro follows a purely syntactic transformation rule: for each
expression, insert the threaded value between the function name and the
first argument. Note that the threading expressions are function calls
of the form <code>(f arg1 arg2 &#8230;&#8203;)</code>. A bare symbol or keyword
without parentheses is interpreted as a simple function
invocation with a single argument. This allows for a succinct chain of
unary functions:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(-&gt; person :hair-color name clojure.string/upper-case)

;; equivalent to

(-&gt; person (:hair-color) (name) (clojure.string/upper-case))</code></pre>
</div>
</div>
<div class="paragraph">
<p>However, <code>-></code> is not universally applicable, as we do not always
want to insert the threaded argument in the initial position.
Consider a function that computes the sum of the squares of all odd
positive integers below ten:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn calculate []
   (reduce + (map #(* % %) (filter odd? (range 10)))))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Like <code>transform</code>, <code>calculate</code> is a pipeline of transformations, but
unlike the former, the threaded value appears in each function call in
the final position in the argument list. Instead of the thread-first macro we need to use the thread-last macro <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/->>"><code>->></code></a> instead:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn calculate* []
   (-&gt;&gt; (range 10)
        (filter odd? ,,,)
        (map #(* % %) ,,,)
        (reduce + ,,,)))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Again, though usually omitted, three commas mark the place where the argument
will be inserted. As you can see, in forms threaded using <code>->></code> the
threaded value is inserted at the end rather than the beginning of the argument
list.</p>
</div>
<div class="paragraph">
<p>Thread-first and thread-last are used in different circumstances. Which one is
appropriate depends on the signature of the transformation functions. Ultimately
you&#8217;ll need to consult the documentation of the functions used, but there are a
few rules of thumb:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>By convention, core functions that operate on sequences expect
the sequence as their last argument. Accordingly, pipelines containing <code>map</code>,
<code>filter</code>, <code>remove</code>, <code>reduce</code>, <code>into</code>, etc usually call for the <code>->></code> macro.</p>
</li>
<li>
<p>Core functions that operate on data structures, on the other hand,
expect the value they work on as their first argument. These include
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/assoc"><code>assoc</code></a>,
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/update"><code>update</code></a>,
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/dissoc"><code>dissoc</code></a>,
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/get"><code>get</code></a> and their
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/assoc-in"><code>-in</code></a> variants.
Pipelines that transform maps using these functions often require the <code>-></code> macro.</p>
</li>
<li>
<p>When calling methods through <a href="xref/../../reference/java_interop">Java interop</a>, the Java object is passed in as the
first argument. In such cases, <code>-></code> is useful, for example, to check a
string for a prefix:</p>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(-&gt; a-string clojure.string/lower-case (.startsWith "prefix"))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Note also the more specialized interop macros
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/.."><code>..</code></a>
and
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/doto"><code>doto</code></a>.</p>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>Finally, there are cases where neither <code>-></code> nor <code>->></code> are
applicable. A pipeline may consist of function calls with varying insertion
points. In these cases, you&#8217;ll need to use <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/as->"><code>as-></code></a>, the more flexible
alternative. <code>as-></code> expects two fixed arguments and a variable number of
expressions. As with <code>-></code>, the first argument is a value to be threaded
through the following forms. The second argument is the name of a binding. In
each of the subsequent forms, the bound name can be used for the prior expression&#8217;s result.
This allows a value to thread into any argument position, not just first or last.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(as-&gt; [:foo :bar] v
  (map name v)
  (first v)
  (.substring v 1))

;; =&gt; "oo"</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_some_some_and_cond"><a class="anchor" href="#_some_some_and_cond"></a>some->, some->> and cond-></h3>
<div id="some" class="paragraph">
<p>Two of Clojure&#8217;s more specialized threading macros, <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/some->"><code>some-></code></a> and <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/some->>"><code>some->></code></a>, are used most commonly when interfacing with Java
methods. <code>some-></code> resembles <code>-></code> in that it threads a value through
a number of expressions. However, it also short-circuits execution when an
expression evaluates as <code>nil</code> at any point in the chain. One common problem with
arrow macros in the context of <a href="xref/../../reference/java_interop">Java interop</a> is that Java methods do not expect
to be passed <code>nil</code> (<code>null</code>). One way to avoid a <code>NullPointerException</code> in these
cases is to add an explicit guard:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(when-let [counter (:counter a-map)]
  (inc (Long/parseLong counter)))</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>some-></code> achieves the same effect more succinctly:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(some-&gt; a-map :counter Long/parseLong inc)</code></pre>
</div>
</div>
<div class="paragraph">
<p>If <code>a-map</code> lacks the key <code>:counter</code>, the entire expression will evaluate to <code>nil</code>
rather than raising an exception. In fact, this behavior is so useful that it is
common to see <code>some-></code> used when threading is not required:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(some-&gt; (compute) Long/parseLong)

;; equivalent to

(when-let [a-str (compute)]
  (Long/parseLong a-str))</code></pre>
</div>
</div>
<div id="cond" class="paragraph">
<p>Like <code>-></code>, the macro <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/cond->"><code>cond-></code></a> takes an initial value, but unlike the
former, it interprets its argument list as a series of <code>test, expr</code> pairs. <code>cond-></code>
threads a value through the expressions but skips those with failing tests. For
each pair, <code>test</code> is evaluated. If the result is truthy, the expression is
evaluated with the threaded value inserted as its first argument; otherwise
evaluation proceeds with the next <code>test, expr</code> pair. Note that unlike its
relatives, <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/some->"><code>some-></code></a> or <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/cond"><code>cond</code></a>, <code>cond-></code> never short-circuits
evaluation, even if a test evaluates to <code>false</code> or <code>nil</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn describe-number [n]
  (cond-&gt; []
    (odd? n) (conj "odd")
    (even? n) (conj "even")
    (zero? n) (conj "zero")
    (pos? n) (conj "positive")))

(describe-number 3) ;; =&gt; ["odd" "positive"]
(describe-number 4) ;; =&gt; ["even" "positive"]</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>cond->></code> inserts the threaded value as the last argument of each form but
works analogously otherwise.</p>
</div>
</div>

      <p><em>Original author: Paulus Esterhazy</em></p>


<div class="clj-prev-next-container">
  
  
</div>

    </div>
  </div>
</div>

  <div class="w-section clj-footer">
    <div class="w-container clj-footer-links-container">
      <div class="w-row">
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Community</h6>
            <a href="/community/resources" class="clj-footer-link">Resources</a>
            <a href="/community/contributing" class="clj-footer-link">Contributing</a>
            <a href="/community/companies" class="clj-footer-link">Companies</a>
            <a href="/community/contributing_site" class="clj-footer-link">Site</a>
          <h6 class="clj-footer-heading">Legal</h6>
            <a href="/community/license" class="clj-footer-link">License</a>
            <a href="/privacy" class="clj-footer-link">Privacy Policy</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Documentation</h6>
            <a href="/about/rationale" class="clj-footer-link">Overview</a>
            <a href="/reference/documentation" class="clj-footer-link">Reference</a>
            <a href="/api/api" class="clj-footer-link">API</a>
            <a href="/guides/guides" class="clj-footer-link">Guides</a>
            <a href="/community/libraries" class="clj-footer-link">Libraries &amp; Tools</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Updates</h6>
            <a href="/news/news" class="clj-footer-link">News</a>
            <a href="/community/events" class="clj-footer-link">Events</a>
          <h6 class="clj-footer-heading">ETC</h6>
            <a href="https://www.youtube.com/user/ClojureTV" class="clj-footer-link">ClojureTV</a>
            <a href="/community/books" class="clj-footer-link">Books</a>
            <a href="/community/swag" class="clj-footer-link">Swag</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Code</h6>
            <a href="/releases/downloads" class="clj-footer-link">Releases</a>
            <a href="https://github.com/clojure/clojure/" class="clj-footer-link">Source</a>
            <a href="http://clojurescript.org" class="clj-footer-link">ClojureScript</a>
            <a href="/about/clojureclr" class="clj-footer-link">ClojureCLR</a>
        </div>
      </div>
    </div>
    <div class="w-container clj-footer-legal-container">
      <div class="w-clearfix clj-footer-legal">
        <div class="clj-footer-logo">&nbsp;</div>
        <div class="clj-footer-legal-links">
          <div class="clj-footer-copyright">Copyright 2008-2022 Rich Hickey | <a class="clj-footer-sub-link" href="/privacy">Privacy Policy</a><br/>Logo &amp; site design by Tom Hickey
          </div>
          <div class="clj-footer-designed-by">Published 2023-12-18<br/>Update <a class="clj-footer-sub-link" href="https://github.com/clojure/clojure-site/blob/master/content/guides/threading_macros.adoc">this page</a>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script type="text/javascript" src="/js/webflow.js"></script>
  <script type="text/javascript" src="/js/highlight.pack.js"></script>
  <script>
  $(document).ready( (event) => {
    $('pre code').each((index, obj) => {
      $(obj).addClass($(obj).attr("data-lang"));
      hljs.highlightBlock(obj);
    });
  });
  </script>
  <!--[if lte IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif]-->
</body>
</html>
