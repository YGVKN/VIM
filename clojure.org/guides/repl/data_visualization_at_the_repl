<!DOCTYPE html>
<!-- This site was created in Webflow. http://www.webflow.com-->
<!-- Last Published: Fri Nov 13 2015 01:48:45 GMT+0000 (UTC) -->
<html lang="en" data-wf-site="56414d6fc8c27cad0f4e12e7" data-wf-page="5643ac587b1f28dc58ed6b89">
<head>
  <meta charset="utf-8">
  <title>Clojure - Programming at the REPL: Data Visualization</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="generator" content="Webflow">
  <meta name="google-site-verification" content="a30CDuC9UBifM7EL575LK9a4TEE6mNfWbKqXIoSZChg" />
  <meta name="google-site-verification" content="iXqpntr4CN3JRM1sVm5D_YzZw8bFRizBaTVycwqii2E" />
  <meta name="keywords" content="clojure,programming" />
  <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,600;1,300;1,400;1,600&family=PT+Serif:ital@0;1&&family=Source+Code+Pro:wght@500&display=swap">
  <link rel="stylesheet" type="text/css" href="/css/normalize.css">
  <link rel="stylesheet" type="text/css" href="/css/webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/clojureorg.webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/asciidoctor-mod.css">
  <link type="text/css" href="/css/default-en.css" rel="stylesheet">
  <link type="text/css" href="/css/default.css" rel="stylesheet">
  <link type="text/css" href="/css/search-result.css" rel="stylesheet">
  <link rel="alternate" type="application/atom+xml" title="News" href="/feed.xml" />
  <script type="text/javascript" src="/js/modernizr.js"></script>
  <link rel="shortcut icon" type="image/x-icon" href="/images/clojure-logo-icon-32.png">
  <link rel="apple-touch-icon" href="/images/clojure-logo-icon-256.png">
  <!-- Matomo -->
  <script>
    var _paq = window._paq = window._paq || [];
    /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
      var u="https://cognitect.matomo.cloud/";
      _paq.push(['setTrackerUrl', u+'matomo.php']);
      _paq.push(['setSiteId', '9']);
      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
      g.async=true; g.src='//cdn.matomo.cloud/cognitect.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);
    })();
  </script>
<!-- End Matomo Code -->
  <script type="text/javascript">
    function searchClj(obj) {
      let e = document.getElementById("searchType");
      document.getElementById("hiddenSearch").value=e.value;
    }
  </script>
</head>
<body>
  <div data-collapse="none" data-animation="default" data-duration="400" data-contain="1" class="w-nav clj-navbar">
    <div class="w-container">
      <a href="/index" class="w-nav-brand w-clearfix clj-logo-container"><img width="60" src="/images/clojure-logo-120b.png" class="clj-logo" alt="Clojure logo">
        <div class="clj-logo-text">Clojure</div>
      </a>
      <nav role="navigation" class="w-nav-menu clj-nav-menu"><a href="/about/rationale" class="w-nav-link clj-nav-link">Overview</a><a href="/reference/documentation" class="w-nav-link clj-nav-link">Reference‚Äç</a><a href="/api/api" class="w-nav-link clj-nav-link">API</a><a href="/releases/downloads" class="w-nav-link clj-nav-link">Releases</a><a href="/guides/guides" class="w-nav-link clj-nav-link">Guides</a><a href="/community/success_stories" class="w-nav-link clj-nav-link">Community</a><a href="/dev/dev" class="w-nav-link clj-nav-link">Dev</a><a href="/news/news" class="w-nav-link clj-nav-link">News</a><a href="#" data-ix="search-click-trigger" class="w-nav-link clj-nav-link clj-nav-search">&#xed11;</a>
      </nav>
      <div class="w-nav-button clj-menu-button">
        <div class="w-icon-nav-menu"></div>
      </div>
    </div>
  </div>
  <div data-ix="hide-search" class="w-section clj-search-section">
    <div class="w-container">
      <div class="w-form clj-search-form-wrapper">
        <form id="wf-form-Search-Form" name="wf-form-Search-Form" action="https://duckduckgo.com/" method="get" onSubmit="searchClj(this)">
          <div class="w-row">
            <div class="w-col w-col-6 w-col-small-6">
              <input id="hiddenSearch" type="hidden" name="sites" value="www.clojure.org">
              <input name="q" id="q" type="text" placeholder="Search clojure.org reference, guides, and API" title="Search text" autofocus="autofocus" class="w-input clj-search-input">
            </div>
            <div class="w-col w-col-3 w-col-small-3 clj-search-type">
              <select name="searchType" id="searchType" class="w-select clj-search-type">
                <option value="www.clojure.org">clojure.org</option>
                <option value="ask.clojure.org">ask.clojure.org</option>
              </select>
            </div>
            <div class="w-col w-col-3 w-col-small-3">
              <input type="submit" value="Search" class="w-button clj-search-submit">
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

<div class="w-section clj-content-section">
  <div class="w-container">
    <div class="clj-section-nav-container">
      <div data-collapse="small" data-animation="default" data-duration="200" data-contain="1" class="w-nav clj-section-navbar">
        <div class="w-container">
          <nav role="navigation" class="w-nav-menu clj-section-nav-menu">
            <a href="../guides" class="w-nav-link clj-section-nav-item-link"><span class="clj-nav-nested-icon">&#xeab5;</span> Back to Guides</a>
            <div class="w-nav-link clj-section-nav-heading">Topics</div>
            <a href="introduction" class="w-nav-link clj-section-nav-item-link">Introduction</a>
            <a href="launching_a_basic_repl" class="w-nav-link clj-section-nav-item-link">Launching a basic REPL</a>
            <a href="basic_usage" class="w-nav-link clj-section-nav-item-link">Basic Usage</a>
            <a href="data_visualization_at_the_repl" class="w-nav-link clj-section-nav-item-link">Data Visualization at the REPL</a>
            <a href="navigating_namespaces" class="w-nav-link clj-section-nav-item-link">Navigating namespaces</a>
            <a href="enhancing_your_repl_workflow" class="w-nav-link clj-section-nav-item-link">Enhancing your REPL workflow</a>
            <a href="guidelines_for_repl_aided_development" class="w-nav-link clj-section-nav-item-link">Guidelines for REPL-Aided Development</a>
            <div class="w-nav-link clj-section-nav-heading">Annexes</div>
            <a href="annex_community_resources" class="w-nav-link clj-section-nav-item-link">Community resources</a>
            <a href="annex_troubleshooting" class="w-nav-link clj-section-nav-item-link">Troubleshooting</a>
          </nav>
          <div data-ix="toggle-section-nav-icon" class="w-nav-button w-clearfix clj-section-nav-toggle">
            <div class="clj-section-nav-text">Data Visualization at the REPL</div>
            <div class="clj-section-nav-icon-closed">&#xeab2;</div>
            <div data-ix="init-hide-section-nav-icon-open" class="clj-section-nav-icon-open">&#xeab9;</div>
          </div>
        </div>
      </div>
    </div>
    <div class="clj-content-container">

      <h1>Programming at the REPL: Data Visualization</h1>

      <div id="preamble">
<div class="sectionbody">
<div id="toc" class="toc">
<div id="toctitle" class="title">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_pretty_printing_using_clojure_pprint">Pretty-printing using <code>clojure.pprint</code></a></li>
<li><a href="#_truncating_repl_output">Truncating REPL output</a></li>
<li><a href="#_accessing_recent_results_1_2_3">Accessing recent results: <code>*1</code>, <code>*2</code>, <code>*3</code></a></li>
<li><a href="#_investigating_exceptions">Investigating Exceptions</a></li>
<li><a href="#_graphical_and_web_based_visualizations">Graphical and web-based visualizations</a></li>
<li><a href="#_dealing_with_mysterious_values_advanced">Dealing with mysterious values (advanced)</a>
<ul class="sectlevel3">
<li><a href="#_viewing_the_type_hierarchy_using_type_and_ancestors">Viewing the type hierarchy using <code>type</code> and <code>ancestors</code></a></li>
<li><a href="#_using_javadoc">Using Javadoc</a></li>
<li><a href="#_inspecting_java_types_with_clojure_reflect">Inspecting Java types with <code>clojure.reflect</code></a></li>
</ul>
</li>
</ul>
</div>
<div class="paragraph">
<p>Each time we evaluate an expression, the REPL shows us a textual representation of the result:
 that&#8217;s the <em>Print</em> part of <em>Read-Eval-Print-Loop</em>. Most of the time, this textual representation
 is clear enough for the programmer, but sometimes it becomes difficult to read -
 especially when dealing with big or deeply nested data structures.</p>
</div>
<div class="paragraph">
<p>Fortunately, the REPL provides sharper tools for data visualization, which we will describe in this chapter.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pretty_printing_using_clojure_pprint"><a class="anchor" href="#_pretty_printing_using_clojure_pprint"></a>Pretty-printing using <code>clojure.pprint</code></h2>
<div class="sectionbody">
<div class="paragraph">
<p>As an example, consider the following code, which computes a summary of the arithmetic properties of some numbers:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (defn number-summary
  "Computes a summary of the arithmetic properties of a number, as a data structure."
  [n]
  (let [proper-divisors (into (sorted-set)
                          (filter
                            (fn [d]
                              (zero? (rem n d)))
                            (range 1 n)))
        divisors-sum (apply + proper-divisors)]
    {:n n
     :proper-divisors proper-divisors
     :even? (even? n)
     :prime? (= proper-divisors #{1})
     :perfect-number? (= divisors-sum n)}))
#'user/number-summary
user=&gt; (mapv number-summary [5 6 7 12 28 42])
[{:n 5, :proper-divisors #{1}, :even? false, :prime? true, :perfect-number? false} {:n 6, :proper-divisors #{1 2 3}, :even? true, :prime? false, :perfect-number? true} {:n 7, :proper-divisors #{1}, :even? false, :prime? true, :perfect-number? false} {:n 12, :proper-divisors #{1 2 3 4 6}, :even? true, :prime? false, :perfect-number? false} {:n 28, :proper-divisors #{1 2 4 7 14}, :even? true, :prime? false, :perfect-number? true} {:n 42, :proper-divisors #{1 2 3 6 7 14 21}, :even? true, :prime? false, :perfect-number? false}]
user=&gt;</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>For now, you don&#8217;t need to understand the code of the <code>number-summary</code> function defined above:
 we&#8217;re just using it as a pretext to synthetize some hairy data structures. Real-world Clojure programming
 for a specific domain will provide you with many examples of such hairy data structures.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>As we can see, the result of our last expression is condensed on a single line, which makes it hard to read:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (mapv number-summary [5 6 7 12 28 42])
[{:n 5, :proper-divisors #{1}, :even? false, :prime? true, :perfect-number? false} {:n 6, :proper-divisors #{1 2 3}, :even? true, :prime? false, :perfect-number? true} {:n 7, :proper-divisors #{1}, :even? false, :prime? true, :perfect-number? false} {:n 12, :proper-divisors #{1 2 3 4 6}, :even? true, :prime? false, :perfect-number? false} {:n 28, :proper-divisors #{1 2 4 7 14}, :even? true, :prime? false, :perfect-number? true} {:n 42, :proper-divisors #{1 2 3 6 7 14 21}, :even? true, :prime? false, :perfect-number? false}]</code></pre>
</div>
</div>
<div class="paragraph">
<p>We can use the <code><a href="https://clojure.github.io/clojure/clojure.pprint-api.html">clojure.pprint</a></code> lib
 to print the result in a more "visual" format:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (require '[clojure.pprint :as pp])
nil
user=&gt; (pp/pprint (mapv number-summary [5 6 7 12 28 42]))
[{:n 5,
  :proper-divisors #{1},
  :even? false,
  :prime? true,
  :perfect-number? false}
 {:n 6,
  :proper-divisors #{1 2 3},
  :even? true,
  :prime? false,
  :perfect-number? true}
 {:n 7,
  :proper-divisors #{1},
  :even? false,
  :prime? true,
  :perfect-number? false}
 {:n 12,
  :proper-divisors #{1 2 3 4 6},
  :even? true,
  :prime? false,
  :perfect-number? false}
 {:n 28,
  :proper-divisors #{1 2 4 7 14},
  :even? true,
  :prime? false,
  :perfect-number? true}
 {:n 42,
  :proper-divisors #{1 2 3 6 7 14 21},
  :even? true,
  :prime? false,
  :perfect-number? false}]
nil</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p><strong>TIP: Using an editor for syntax-highlighting the results</strong></p>
</div>
<div class="paragraph">
<p>If you want your pretty-printed result to be displayed with more visual contrast,
 you can also copy it to your editor buffer (the editor used below is <a href="https://www.gnu.org/software/emacs/">Emacs</a>):</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="/images/content/guides/repl/repl-copy-pprint-editor.gif" alt="Copying pretty-printed result to editor"></span></p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Needing to pretty-print the last REPL result is so common that <code>clojure.pprint</code> has a function for that:
 <a href="https://clojure.github.io/clojure/clojure.pprint-api.html#clojure.pprint/pp">clojure.pprint/pp</a></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (mapv number-summary [12 28])
[{:n 12, :proper-divisors #{1 2 3 4 6}, :even? true, :prime? false, :perfect-number? false} {:n 28, :proper-divisors #{1 2 4 7 14}, :even? true, :prime? false, :perfect-number? true}]
user=&gt; (pp/pp)
[{:n 12,
  :proper-divisors #{1 2 3 4 6},
  :even? true,
  :prime? false,
  :perfect-number? false}
 {:n 28,
  :proper-divisors #{1 2 4 7 14},
  :even? true,
  :prime? false,
  :perfect-number? true}]
nil</code></pre>
</div>
</div>
<div class="paragraph">
<p>Finally, for a result which is a sequence of maps (like the above), you can use
<a href="https://clojure.github.io/clojure/clojure.pprint-api.html#clojure.pprint/print-table">clojure.pprint/print-table</a>
to print it as a table:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (pp/print-table (mapv number-summary [6 12 28]))

| :n | :proper-divisors | :even? | :prime? | :perfect-number? |
|----+------------------+--------+---------+------------------|
|  6 |         #{1 2 3} |   true |   false |             true |
| 12 |     #{1 2 3 4 6} |   true |   false |            false |
| 28 |    #{1 2 4 7 14} |   true |   false |             true |
nil</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_truncating_repl_output"><a class="anchor" href="#_truncating_repl_output"></a>Truncating REPL output</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When an expression evaluates to a large or deeply nested data structure,
reading REPL output can become difficult.</p>
</div>
<div class="paragraph">
<p>When a structure is too deeply nested, you can truncate
the output by setting the <code><a href="https://clojuredocs.org/clojure.core/*print-level\*">*print-level*</a></code> Var:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (set! *print-level* 3)
3
user=&gt; {:a {:b [{:c {:d {:e 42}}}]}} ;; a deeply nested data structure
{:a {:b [#]}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can undo this setting by evaluating <code>(set! <a href="https://clojuredocs.org/clojure.core/*print-level\*">*print-level*</a> nil)</code>.</p>
</div>
<div class="paragraph">
<p>Likewise, when a data structure contains long collections, you can limit the number of displayed items by setting
the <code><a href="https://clojuredocs.org/clojure.core/*print-length\*">*print-length*</a></code> Var:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (set! *print-length* 3)
3
user=&gt; (repeat 100 (vec (range 100))) ;; a data structure containing looooong collections.
([0 1 2 ...] [0 1 2 ...] [0 1 2 ...] ...)</code></pre>
</div>
</div>
<div class="paragraph">
<p>Like the above, evaluate <code>(set! <a href="https://clojuredocs.org/clojure.core/*print-length\*">*print-length*</a> nil)</code>
to undo this setting.</p>
</div>
<div class="paragraph">
<p><code><a href="https://clojuredocs.org/clojure.core/*print-level\*">*print-level*</a></code> and <code><a href="https://clojuredocs.org/clojure.core/*print-length\*">*print-length*</a></code>
affect both ordinary REPL printing and pretty-printing.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_accessing_recent_results_1_2_3"><a class="anchor" href="#_accessing_recent_results_1_2_3"></a>Accessing recent results: <code>*1</code>, <code>*2</code>, <code>*3</code></h2>
<div class="sectionbody">
<div class="paragraph">
<p>In the REPL, the last evaluated result can be retrieved by evaluating <code>*1</code>; the one
 before that is saved in <code>*2</code>, and the one before that in <code>*3</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (mapv number-summary [6 12 28])
[{:n 6, :proper-divisors #{1 2 3}, :even? true, :prime? false, :perfect-number? true} {:n 12, :proper-divisors #{1 2 3 4 6}, :even? true, :prime? false, :perfect-number? false} {:n 28, :proper-divisors #{1 2 4 7 14}, :even? true, :prime? false, :perfect-number? true}]
user=&gt; (pp/pprint *1) ;; using *1 instead of re-typing the previous expression (or its result)
[{:n 6,
 :proper-divisors #{1 2 3},
 :even? true,
 :prime? false,
 :perfect-number? true}
{:n 12,
 :proper-divisors #{1 2 3 4 6},
 :even? true,
 :prime? false,
 :perfect-number? false}
{:n 28,
 :proper-divisors #{1 2 4 7 14},
 :even? true,
 :prime? false,
 :perfect-number? true}]
nil
user=&gt; *1 ;; now *1 has changed to become nil (because pp/pprint returns nil)
nil
user=&gt; *3 ;; ... which now means that our initial result is in *3:
[{:n 6, :proper-divisors #{1 2 3}, :even? true, :prime? false, :perfect-number? true} {:n 12, :proper-divisors #{1 2 3 4 6}, :even? true, :prime? false, :perfect-number? false} {:n 28, :proper-divisors #{1 2 4 7 14}, :even? true, :prime? false, :perfect-number? true}]
user=&gt;</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p><strong>TIP: saving a result by <code>def</code>-ining it</strong></p>
</div>
<div class="paragraph">
<p>If you want to keep a result around for longer than 3 evaluations, you can simply
 evaluate
 <code>(def &lt;some-name&gt; *1)</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (mapv number-summary [6 12 28])
[{:n 6, :proper-divisors #{1 2 3}, :even? true, :prime? false ; ...
user=&gt; (def my-summarized-numbers *1) ;; saving the result
#'user/my-summarized-numbers
user=&gt; my-summarized-numbers
[{:n 6, :proper-divisors #{1 2 3}, :even? true, :prime? false ; ...
user=&gt; (count my-summarized-numbers)
3
user=&gt; (first my-summarized-numbers)
{:n 6, :proper-divisors #{1 2 3}, :even? true, :prime? false, ; ...
user=&gt; (pp/print-table my-summarized-numbers)

| :n | :proper-divisors | :even? | :prime? | :perfect-number? |
|----+------------------+--------+---------+------------------|
|  6 |         #{1 2 3} |   true |   false |             true |
| 12 |     #{1 2 3 4 6} |   true |   false |            false |
| 28 |    #{1 2 4 7 14} |   true |   false |             true |
nil
user=&gt;</code></pre>
</div>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_investigating_exceptions"><a class="anchor" href="#_investigating_exceptions"></a>Investigating Exceptions</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Some expressions won&#8217;t return a result when you evaluate them, but throw an <a href="https://en.wikipedia.org/wiki/Exception_handling">Exception</a>
 instead. Throwing an Exception is your program saying to you: "something went wrong
 when evaluating the expression, and I don&#8217;t know how to deal with it, so I gave up."</p>
</div>
<div class="paragraph">
<p>For instance, an Exception will be thrown if you divide a number by zero:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (/ 1 0)
Execution error (ArithmeticException) at user/eval163 (REPL:1).
Divide by zero</code></pre>
</div>
</div>
<div class="paragraph">
<p>By default, the REPL prints a two-line summary of the Exception. The first line reports the error phase (execution, compilation, macroexpansion, etc) and its location. The second line reports the cause.</p>
</div>
<div class="paragraph">
<p>This can be enough in many cases, but there is more information available.</p>
</div>
<div class="paragraph">
<p>First, you can visualize the <em>stacktrace</em> of the Exception - that is, the chain
 of function calls which led to the faulty instruction. The stacktrace can be printed
 using <a href="https://clojure.github.io/clojure/clojure.repl-api.html#clojure.repl/pst">clojure.repl/pst</a>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (pst *e)
ArithmeticException Divide by zero
	clojure.lang.Numbers.divide (Numbers.java:163)
	clojure.lang.Numbers.divide (Numbers.java:3833)
	user/eval15 (NO_SOURCE_FILE:3)
	user/eval15 (NO_SOURCE_FILE:3)
	clojure.lang.Compiler.eval (Compiler.java:7062)
	clojure.lang.Compiler.eval (Compiler.java:7025)
	clojure.core/eval (core.clj:3206)
	clojure.core/eval (core.clj:3202)
	clojure.main/repl/read-eval-print--8572/fn--8575 (main.clj:243)
	clojure.main/repl/read-eval-print--8572 (main.clj:243)
	clojure.main/repl/fn--8581 (main.clj:261)
	clojure.main/repl (main.clj:261)
nil</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
<div class="paragraph">
<p><strong>TIP:</strong> the last thrown Exception can be obtained by evaluating <code>*e</code>.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Finally, just evaluating the Exception at the REPL can provide a useful visualization:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; *e
#error {
 :cause "Divide by zero"
 :via
 [{:type java.lang.ArithmeticException
   :message "Divide by zero"
   :at [clojure.lang.Numbers divide "Numbers.java" 163]}]
 :trace
 [[clojure.lang.Numbers divide "Numbers.java" 163]
  [clojure.lang.Numbers divide "Numbers.java" 3833]
  [user$eval15 invokeStatic "NO_SOURCE_FILE" 3]
  [user$eval15 invoke "NO_SOURCE_FILE" 3]
  [clojure.lang.Compiler eval "Compiler.java" 7062]
  [clojure.lang.Compiler eval "Compiler.java" 7025]
  [clojure.core$eval invokeStatic "core.clj" 3206]
  [clojure.core$eval invoke "core.clj" 3202]
  [clojure.main$repl$read_eval_print__8572$fn__8575 invoke "main.clj" 243]
  [clojure.main$repl$read_eval_print__8572 invoke "main.clj" 243]
  [clojure.main$repl$fn__8581 invoke "main.clj" 261]
  [clojure.main$repl invokeStatic "main.clj" 261]
  [clojure.main$repl_opt invokeStatic "main.clj" 325]
  [clojure.main$main invokeStatic "main.clj" 424]
  [clojure.main$main doInvoke "main.clj" 387]
  [clojure.lang.RestFn invoke "RestFn.java" 397]
  [clojure.lang.AFn applyToHelper "AFn.java" 152]
  [clojure.lang.RestFn applyTo "RestFn.java" 132]
  [clojure.lang.Var applyTo "Var.java" 702]
  [clojure.main main "main.java" 37]]}</code></pre>
</div>
</div>
<div class="paragraph">
<p>In this simplistic example, displaying all this information may be more than what is
 needed to diagnose the issue; but this visualization becomes more helpful for "real-world"
 Exceptions, which tend to have the following charateristics in Clojure programs:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Exceptions convey data:</strong> in Clojure programs, it&#8217;s common to attach additional data
to an Exception (not just a human-readable error message): this is done by creating the Exception via
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/ex-info">clojure.core/ex-info</a>.</p>
</li>
<li>
<p><strong>Exceptions are chained:</strong> an Exception can be annotated with an optional <em>cause</em>, which is another
(lower-level) Exception.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Here&#8217;s an example program which demonstrates these sorts of Exceptions.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn divide-verbose
  "Divides two numbers `x` and `y`, but throws more informative Exceptions when it goes wrong.
  Returns a (double-precision) floating-point number."
  [x y]
  (try
    (double (/ x y))
    (catch Throwable cause
      (throw
        (ex-info
          (str "Failed to divide " (pr-str x) " by " (pr-str y))
          {:numerator x
           :denominator y}
          cause)))))

(defn average
  "Computes the average of a collection of numbers."
  [numbers]
  (try
    (let [sum (apply + numbers)
          cardinality (count numbers)]
      (divide-verbose sum cardinality))
    (catch Throwable cause
      (throw
        (ex-info
          "Failed to compute the average of numbers"
          {:numbers numbers}
          cause)))))</code></pre>
</div>
</div>
<div class="paragraph">
<p>We don&#8217;t know it yet, but our <code>average</code> function fails when applied to an empty collection of numbers.
However, visualizing the Exception makes it easy to diagnose. In the REPL session below, we can see
that calling our function with an empty vector of numbers led to dividing zero by zero:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (average [])
Execution error (ArithmeticException) at user/divide-verbose (REPL:6).
Divide by zero
user=&gt; *e  ;; notice the `:data` key inside the chain of Exceptions represented in `:via`
#error {
 :cause "Divide by zero"
 :via
 [{:type clojure.lang.ExceptionInfo
   :message "Failed to compute the average of numbers"
   :data {:numbers []}
   :at [user$average invokeStatic "NO_SOURCE_FILE" 10]}
  {:type clojure.lang.ExceptionInfo
   :message "Failed to divide 0 by 0"
   :data {:numerator 0, :denominator 0}
   :at [user$divide_verbose invokeStatic "NO_SOURCE_FILE" 9]}
  {:type java.lang.ArithmeticException
   :message "Divide by zero"
   :at [clojure.lang.Numbers divide "Numbers.java" 188]}]
 :trace
 [[clojure.lang.Numbers divide "Numbers.java" 188]
  [user$divide_verbose invokeStatic "NO_SOURCE_FILE" 6]
  [user$divide_verbose invoke "NO_SOURCE_FILE" 1]
  [user$average invokeStatic "NO_SOURCE_FILE" 7]
  [user$average invoke "NO_SOURCE_FILE" 1]
  [user$eval173 invokeStatic "NO_SOURCE_FILE" 1]
  [user$eval173 invoke "NO_SOURCE_FILE" 1]
  [clojure.lang.Compiler eval "Compiler.java" 7176]
  [clojure.lang.Compiler eval "Compiler.java" 7131]
  [clojure.core$eval invokeStatic "core.clj" 3214]
  [clojure.core$eval invoke "core.clj" 3210]
  [clojure.main$repl$read_eval_print__9068$fn__9071 invoke "main.clj" 414]
  [clojure.main$repl$read_eval_print__9068 invoke "main.clj" 414]
  [clojure.main$repl$fn__9077 invoke "main.clj" 435]
  [clojure.main$repl invokeStatic "main.clj" 435]
  [clojure.main$repl_opt invokeStatic "main.clj" 499]
  [clojure.main$main invokeStatic "main.clj" 598]
  [clojure.main$main doInvoke "main.clj" 561]
  [clojure.lang.RestFn invoke "RestFn.java" 397]
  [clojure.lang.AFn applyToHelper "AFn.java" 152]
  [clojure.lang.RestFn applyTo "RestFn.java" 132]
  [clojure.lang.Var applyTo "Var.java" 705]
  [clojure.main main "main.java" 37]]}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_graphical_and_web_based_visualizations"><a class="anchor" href="#_graphical_and_web_based_visualizations"></a>Graphical and web-based visualizations</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Finally, the REPL being a full-featured programming environment, it is not limited
 to text-based visualizations. Here are some handy "graphical" visualization tools bundled
 Clojure:</p>
</div>
<div class="paragraph">
<p><a href="https://clojure.github.io/clojure/clojure.java.javadoc-api.html">clojure.java.javadoc</a> lets
you view the <a href="https://en.wikipedia.org/wiki/Javadoc">Javadoc</a> of a class or object.
Here is how to view the Javadoc for a Java <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html">regex Pattern</a>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (require '[clojure.java.javadoc :as jdoc])
nil
user=&gt; (jdoc/javadoc #"a+") ;; opens the Javadoc page for java.util.Pattern in a Web browser
true
user=&gt; (jdoc/javadoc java.util.regex.Pattern) ;; equivalent to the above
true</code></pre>
</div>
</div>
<div class="paragraph">
<p><a href="https://clojure.github.io/clojure/clojure.inspector-api.html">clojure.inspector</a> lets you open
GUI-based visualizations of data, for instance:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (require '[clojure.inspector :as insp])
nil
user=&gt; (insp/inspect-table (mapv number-summary [2 5 6 28 42]))
#object[javax.swing.JFrame 0x26425897 "javax.swing.JFrame[frame1,0,23,400x600,layout=java.awt.BorderLayout,title=Clojure Inspector,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,22,400x578,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]"]</code></pre>
</div>
</div>
<div class="paragraph">
<p><span class="image"><img src="/images/content/guides/repl/clj-inspect-table.png" alt="clojure.inspector table viz"></span></p>
</div>
<div class="paragraph">
<p><a href="https://clojure.github.io/clojure/clojure.java.browse-api.html#clojure.java.browse/browse-url">clojure.java.browse/browse-url</a>
lets you open any URL in a Web browser, which can be handy for specific needs.</p>
</div>
<div class="paragraph">
<p>Finally, there also exist 3rd-party Clojure tools for data visualization; we will see a selection of them in chapter <a href="enhancing_your_repl_workflow">Enhancing your REPL workflow</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_dealing_with_mysterious_values_advanced"><a class="anchor" href="#_dealing_with_mysterious_values_advanced"></a>Dealing with mysterious values (advanced)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Sometimes, the printed representation of a value in the REPL is not very informative; sometimes,
it can even be misleading as to the nature of that value.<sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnotedef_1" title="View footnote.">1</a>]</sup>
This often happens with values which are obtained via Java interop.</p>
</div>
<div class="paragraph">
<p>As an example, we&#8217;ll create an InputStream object using the <a href="https://clojuredocs.org/clojure.java.io"><code>clojure.java.io</code></a> lib. If you don&#8217;t know
what an InputStream is, all the better - the point of this section is to teach you how to find your footing
in uncharted territory:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (require '[clojure.java.io :as io])
nil
user=&gt; (def v (io/input-stream "https://www.clojure.org")) ;; NOTE won't work if you're not connected to the Internet
#'user/v
user=&gt; v
#object[java.io.BufferedInputStream 0x4ee37ca3 "java.io.BufferedInputStream@4ee37ca3"]</code></pre>
</div>
</div>
<div class="paragraph">
<p>The above code sample defined an InputStream named <code>v</code>.</p>
</div>
<div class="paragraph">
<p>Now imagine you don&#8217;t know where <code>v</code> comes from, and let&#8217;s try to interact with it at the REPL
so as to gain more understanding of it.</p>
</div>
<div class="sect3">
<h4 id="_viewing_the_type_hierarchy_using_type_and_ancestors"><a class="anchor" href="#_viewing_the_type_hierarchy_using_type_and_ancestors"></a>Viewing the type hierarchy using <code>type</code> and <code>ancestors</code></h4>
<div class="paragraph">
<p>The printed representation of <code>v</code> tells us one thing about it: its <em>runtime type</em>, in this case <code>java.io.BufferedInputStream</code>.
The <em>type</em> of a value can help us know what operations we may call on it.
We can evaluate <code>(<a href="https://clojuredocs.org/clojure.core/type">type</a> v)</code> to obtain the <em>concrete type</em> of <code>v</code>, and
<code>(<a href="https://clojuredocs.org/clojure.core/ancestors">ancestors</a> (type v))</code> to obtain its entire <em>type hierarchy:</em></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (type v) ;; what is the type of our obscure value?
java.io.BufferedInputStream
user=&gt; (ancestors (type v))
#{java.io.InputStream java.lang.AutoCloseable java.io.Closeable java.lang.Object java.io.FilterInputStream}</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_using_javadoc"><a class="anchor" href="#_using_javadoc"></a>Using Javadoc</h4>
<div class="paragraph">
<p>As we saw in the previous section, we can use the <a href="https://clojure.github.io/clojure/clojure.java.javadoc-api.html">clojure.java.javadoc</a> lib
to view online documentation about a Java type:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (require '[clojure.java.javadoc :as jdoc])
nil
user=&gt; (jdoc/javadoc java.io.InputStream) ;; should open a web page about java.io.InputStream
true</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_inspecting_java_types_with_clojure_reflect"><a class="anchor" href="#_inspecting_java_types_with_clojure_reflect"></a>Inspecting Java types with <code>clojure.reflect</code></h4>
<div class="paragraph">
<p>Javadoc is helpful, but sometimes Javadoc won&#8217;t even be available. In such cases, we can use
the REPL itself to inspect types, via Java reflection.</p>
</div>
<div class="paragraph">
<p>We can use the <code><a href="https://clojure.github.io/clojure/clojure.reflect-api.html#clojure.reflect/reflect">clojure.reflect/reflect</a></code>
function to obtain information about a Java type as a plain Clojure data structure:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (require '[clojure.reflect :as reflect])
nil
user=&gt; (reflect/reflect java.io.InputStream)
{:bases #{java.lang.Object java.io.Closeable}, :flags #{:public :abstract}, :members #{#clojure.reflect.Method{:name close, :return-type void, :declaring-class java.io.InputStream, :parameter-types [], :exception-types [java.io.IOException], :flags #{:public}} #clojure.reflect.Method{:name mark, :return-type void, :declaring-class java.io.InputStream, :parameter-types [int], :exception-types [], :flags #{:public :synchronized}} #clojure.reflect.Method{:name available, :return-type int, :declaring-class java.io.InputStream, :parameter-types [], :exception-types [java.io.IOException], :flags #{:public}} #clojure.reflect.Method{:name read, :return-type int, :declaring-class java.io.InputStream, :parameter-types [], :exception-types [java.io.IOException], :flags #{:public :abstract}} #clojure.reflect.Method{:name markSupported, :return-type boolean, :declaring-class java.io.InputStream, :parameter-types [], :exception-types [], :flags #{:public}} #clojure.reflect.Field{:name MAX_SKIP_BUFFER_SIZE, :type int, :declaring-class java.io.InputStream, :flags #{:private :static :final}} #clojure.reflect.Constructor{:name java.io.InputStream, :declaring-class java.io.InputStream, :parameter-types [], :exception-types [], :flags #{:public}} #clojure.reflect.Method{:name read, :return-type int, :declaring-class java.io.InputStream, :parameter-types [byte&lt;&gt;], :exception-types [java.io.IOException], :flags #{:public}} #clojure.reflect.Method{:name skip, :return-type long, :declaring-class java.io.InputStream, :parameter-types [long], :exception-types [java.io.IOException], :flags #{:public}} #clojure.reflect.Method{:name reset, :return-type void, :declaring-class java.io.InputStream, :parameter-types [], :exception-types [java.io.IOException], :flags #{:public :synchronized}} #clojure.reflect.Method{:name read, :return-type int, :declaring-class java.io.InputStream, :parameter-types [byte&lt;&gt; int int], :exception-types [java.io.IOException], :flags #{:public}}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now, that is a <em>very</em> hairy data structure. Fortunately, we have learned how to deal with hairy data structures in the
<a href="#_pretty_printing_using_code_clojure_pprint_code">first section</a> of this chapter: pretty-printing to the rescue!
Let&#8217;s use pretty-printing to display the methods exposed by <code>java.io.InputStream</code> in a table:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (-&gt;&gt; (reflect/reflect java.io.InputStream) :members (sort-by :name) (pp/print-table [:name :flags :parameter-types :return-type]))

|                :name |                     :flags | :parameter-types | :return-type |
|----------------------+----------------------------+------------------+--------------|
| MAX_SKIP_BUFFER_SIZE | #{:private :static :final} |                  |              |
|            available |                 #{:public} |               [] |          int |
|                close |                 #{:public} |               [] |         void |
|  java.io.InputStream |                 #{:public} |               [] |              |
|                 mark |   #{:public :synchronized} |            [int] |         void |
|        markSupported |                 #{:public} |               [] |      boolean |
|                 read |       #{:public :abstract} |               [] |          int |
|                 read |                 #{:public} |         [byte&lt;&gt;] |          int |
|                 read |                 #{:public} | [byte&lt;&gt; int int] |          int |
|                reset |   #{:public :synchronized} |               [] |         void |
|                 skip |                 #{:public} |           [long] |         long |
nil</code></pre>
</div>
</div>
<div class="paragraph">
<p>For example, this tells us that we can call a <code>.read</code> method on <code>v</code> with no arguments, which will return an <code>int</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; (.read v)
60
user=&gt; (.read v)
33
user=&gt; (.read v)
68</code></pre>
</div>
</div>
<div class="paragraph">
<p>Without any prior knowledge, we have managed to learn that <code>v</code> is an InputStream, and read bytes from it.</p>
</div>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnotedef_1">
<a href="#_footnoteref_1">1</a>. For instance, <a href="https://docs.datomic.com/on-prem/entities.html">Datomic</a> and <a href="https://github.com/tonsky/datascript">DataScript</a> Entity objects are printed like Clojure maps, even though they are significantly different from ordinary maps.
</div>
</div>


<div class="clj-prev-next-container">
  <a href="basic_usage" class="clj-prev-link"><span class="clj-prevnext-link-icon">&#xeab5;</span>&nbsp;Basic Usage</a>
  <a href="navigating_namespaces" class="clj-next-link">Navigating Namespaces&nbsp;<span class="clj-prevnext-link-icon">&#xeab8;</span></a>
</div>

    </div>
  </div>
</div>

  <div class="w-section clj-footer">
    <div class="w-container clj-footer-links-container">
      <div class="w-row">
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Community</h6>
            <a href="/community/resources" class="clj-footer-link">Resources</a>
            <a href="/community/contributing" class="clj-footer-link">Contributing</a>
            <a href="/community/companies" class="clj-footer-link">Companies</a>
            <a href="/community/contributing_site" class="clj-footer-link">Site</a>
          <h6 class="clj-footer-heading">Legal</h6>
            <a href="/community/license" class="clj-footer-link">License</a>
            <a href="/privacy" class="clj-footer-link">Privacy Policy</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Documentation</h6>
            <a href="/about/rationale" class="clj-footer-link">Overview</a>
            <a href="/reference/documentation" class="clj-footer-link">Reference</a>
            <a href="/api/api" class="clj-footer-link">API</a>
            <a href="/guides/guides" class="clj-footer-link">Guides</a>
            <a href="/community/libraries" class="clj-footer-link">Libraries &amp; Tools</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Updates</h6>
            <a href="/news/news" class="clj-footer-link">News</a>
            <a href="/community/events" class="clj-footer-link">Events</a>
          <h6 class="clj-footer-heading">ETC</h6>
            <a href="https://www.youtube.com/user/ClojureTV" class="clj-footer-link">ClojureTV</a>
            <a href="/community/books" class="clj-footer-link">Books</a>
            <a href="/community/swag" class="clj-footer-link">Swag</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Code</h6>
            <a href="/releases/downloads" class="clj-footer-link">Releases</a>
            <a href="https://github.com/clojure/clojure/" class="clj-footer-link">Source</a>
            <a href="http://clojurescript.org" class="clj-footer-link">ClojureScript</a>
            <a href="/about/clojureclr" class="clj-footer-link">ClojureCLR</a>
        </div>
      </div>
    </div>
    <div class="w-container clj-footer-legal-container">
      <div class="w-clearfix clj-footer-legal">
        <div class="clj-footer-logo">&nbsp;</div>
        <div class="clj-footer-legal-links">
          <div class="clj-footer-copyright">Copyright 2008-2022 Rich Hickey | <a class="clj-footer-sub-link" href="/privacy">Privacy Policy</a><br/>Logo &amp; site design by Tom Hickey
          </div>
          <div class="clj-footer-designed-by">Published 2023-12-18<br/>Update <a class="clj-footer-sub-link" href="https://github.com/clojure/clojure-site/blob/master/content/guides/repl/data_visualization_at_the_repl.adoc">this page</a>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script type="text/javascript" src="/js/webflow.js"></script>
  <script type="text/javascript" src="/js/highlight.pack.js"></script>
  <script>
  $(document).ready( (event) => {
    $('pre code').each((index, obj) => {
      $(obj).addClass($(obj).attr("data-lang"));
      hljs.highlightBlock(obj);
    });
  });
  </script>
  <!--[if lte IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif]-->
</body>
</html>
