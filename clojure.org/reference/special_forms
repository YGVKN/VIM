<!DOCTYPE html>
<!-- This site was created in Webflow. http://www.webflow.com-->
<!-- Last Published: Fri Nov 13 2015 01:48:45 GMT+0000 (UTC) -->
<html lang="en" data-wf-site="56414d6fc8c27cad0f4e12e7" data-wf-page="5643ac587b1f28dc58ed6b89">
<head>
  <meta charset="utf-8">
  <title>Clojure - Special Forms</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="generator" content="Webflow">
  <meta name="google-site-verification" content="a30CDuC9UBifM7EL575LK9a4TEE6mNfWbKqXIoSZChg" />
  <meta name="google-site-verification" content="iXqpntr4CN3JRM1sVm5D_YzZw8bFRizBaTVycwqii2E" />
  <meta name="keywords" content="clojure,programming" />
  <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,600;1,300;1,400;1,600&family=PT+Serif:ital@0;1&&family=Source+Code+Pro:wght@500&display=swap">
  <link rel="stylesheet" type="text/css" href="/css/normalize.css">
  <link rel="stylesheet" type="text/css" href="/css/webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/clojureorg.webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/asciidoctor-mod.css">
  <link type="text/css" href="/css/default-en.css" rel="stylesheet">
  <link type="text/css" href="/css/default.css" rel="stylesheet">
  <link type="text/css" href="/css/search-result.css" rel="stylesheet">
  <link rel="alternate" type="application/atom+xml" title="News" href="/feed.xml" />
  <script type="text/javascript" src="/js/modernizr.js"></script>
  <link rel="shortcut icon" type="image/x-icon" href="/images/clojure-logo-icon-32.png">
  <link rel="apple-touch-icon" href="/images/clojure-logo-icon-256.png">
  <!-- Matomo -->
  <script>
    var _paq = window._paq = window._paq || [];
    /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
      var u="https://cognitect.matomo.cloud/";
      _paq.push(['setTrackerUrl', u+'matomo.php']);
      _paq.push(['setSiteId', '9']);
      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
      g.async=true; g.src='//cdn.matomo.cloud/cognitect.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);
    })();
  </script>
<!-- End Matomo Code -->
  <script type="text/javascript">
    function searchClj(obj) {
      let e = document.getElementById("searchType");
      document.getElementById("hiddenSearch").value=e.value;
    }
  </script>
</head>
<body>
  <div data-collapse="none" data-animation="default" data-duration="400" data-contain="1" class="w-nav clj-navbar">
    <div class="w-container">
      <a href="/index" class="w-nav-brand w-clearfix clj-logo-container"><img width="60" src="/images/clojure-logo-120b.png" class="clj-logo" alt="Clojure logo">
        <div class="clj-logo-text">Clojure</div>
      </a>
      <nav role="navigation" class="w-nav-menu clj-nav-menu"><a href="/about/rationale" class="w-nav-link clj-nav-link">Overview</a><a href="/reference/documentation" class="w-nav-link clj-nav-link">Reference‚Äç</a><a href="/api/api" class="w-nav-link clj-nav-link">API</a><a href="/releases/downloads" class="w-nav-link clj-nav-link">Releases</a><a href="/guides/guides" class="w-nav-link clj-nav-link">Guides</a><a href="/community/success_stories" class="w-nav-link clj-nav-link">Community</a><a href="/dev/dev" class="w-nav-link clj-nav-link">Dev</a><a href="/news/news" class="w-nav-link clj-nav-link">News</a><a href="#" data-ix="search-click-trigger" class="w-nav-link clj-nav-link clj-nav-search">&#xed11;</a>
      </nav>
      <div class="w-nav-button clj-menu-button">
        <div class="w-icon-nav-menu"></div>
      </div>
    </div>
  </div>
  <div data-ix="hide-search" class="w-section clj-search-section">
    <div class="w-container">
      <div class="w-form clj-search-form-wrapper">
        <form id="wf-form-Search-Form" name="wf-form-Search-Form" action="https://duckduckgo.com/" method="get" onSubmit="searchClj(this)">
          <div class="w-row">
            <div class="w-col w-col-6 w-col-small-6">
              <input id="hiddenSearch" type="hidden" name="sites" value="www.clojure.org">
              <input name="q" id="q" type="text" placeholder="Search clojure.org reference, guides, and API" title="Search text" autofocus="autofocus" class="w-input clj-search-input">
            </div>
            <div class="w-col w-col-3 w-col-small-3 clj-search-type">
              <select name="searchType" id="searchType" class="w-select clj-search-type">
                <option value="www.clojure.org">clojure.org</option>
                <option value="ask.clojure.org">ask.clojure.org</option>
              </select>
            </div>
            <div class="w-col w-col-3 w-col-small-3">
              <input type="submit" value="Search" class="w-button clj-search-submit">
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

<div class="w-section clj-content-section">
  <div class="w-container">
    <div class="clj-section-nav-container">
      <div data-collapse="small" data-animation="default" data-duration="200" data-contain="1" class="w-nav clj-section-navbar">
        <div class="w-container">
          <nav role="navigation" class="w-nav-menu clj-section-nav-menu">
            <a href="reader" class="w-nav-link clj-section-nav-item-link">The Reader</a>
            <a href="repl_and_main" class="w-nav-link clj-section-nav-item-link">The REPL and main</a>
            <a href="evaluation" class="w-nav-link clj-section-nav-item-link">Evaluation</a>
            <a href="special_forms" class="w-nav-link clj-section-nav-item-link">Special Forms</a>
            <a href="macros" class="w-nav-link clj-section-nav-item-link">Macros</a>
            <a href="other_functions" class="w-nav-link clj-section-nav-item-link">Other Functions</a>
            <a href="data_structures" class="w-nav-link clj-section-nav-item-link">Data Structures</a>
            <a href="datatypes" class="w-nav-link clj-section-nav-item-link">Datatypes</a>
            <a href="sequences" class="w-nav-link clj-section-nav-item-link">Sequences</a>
            <a href="transients" class="w-nav-link clj-section-nav-item-link">Transients</a>
            <a href="transducers" class="w-nav-link clj-section-nav-item-link">Transducers</a>
            <a href="multimethods" class="w-nav-link clj-section-nav-item-link">Multimethods and Hierarchies</a>
            <a href="protocols" class="w-nav-link clj-section-nav-item-link">Protocols</a>
            <a href="metadata" class="w-nav-link clj-section-nav-item-link">Metadata</a>
            <a href="namespaces" class="w-nav-link clj-section-nav-item-link">Namespaces</a>
            <a href="libs" class="w-nav-link clj-section-nav-item-link">Libs</a>
            <a href="vars" class="w-nav-link clj-section-nav-item-link">Vars and Environments</a>
            <a href="refs" class="w-nav-link clj-section-nav-item-link">Refs and Transactions</a>
            <a href="agents" class="w-nav-link clj-section-nav-item-link">Agents</a>
            <a href="atoms" class="w-nav-link clj-section-nav-item-link">Atoms</a>
            <a href="reducers" class="w-nav-link clj-section-nav-item-link">Reducers</a>
            <a href="java_interop" class="w-nav-link clj-section-nav-item-link">Java Interop</a>
            <a href="compilation" class="w-nav-link clj-section-nav-item-link">Compilation and Class Generation</a>
            <a href="other_libraries" class="w-nav-link clj-section-nav-item-link">Other Libraries</a>
            <a href="lisps" class="w-nav-link clj-section-nav-item-link">Differences with Lisps</a>
            <a href="deps_and_cli" class="w-nav-link clj-section-nav-item-link">Deps and CLI</a>
            <a href="deps_edn" class="w-nav-link clj-section-nav-item-link">deps.edn</a>
          </nav>
          <div data-ix="toggle-section-nav-icon" class="w-nav-button w-clearfix clj-section-nav-toggle">
            <div class="clj-section-nav-text">Special Forms</div>
            <div class="clj-section-nav-icon-closed">&#xeab2;</div>
            <div data-ix="init-hide-section-nav-icon-open" class="clj-section-nav-icon-open">&#xeab9;</div>
          </div>
        </div>
      </div>
    </div>
    <div class="clj-content-container">

      <h1>Special Forms</h1>

      <div id="preamble">
<div class="sectionbody">
<div id="toc" class="toc">
<div id="toctitle" class="title">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#def">(<code>def</code> <em>symbol</em> <em>doc-string</em>? <em>init</em>?)</a></li>
<li><a href="#if">(<code>if</code> <em>test</em> <em>then</em> <em>else</em>?)</a></li>
<li><a href="#do">(<code>do</code> <em>expr</em>*)</a></li>
<li><a href="#let">(<code>let</code> [ <em>binding</em>* ] <em>expr</em>*)</a></li>
<li><a href="#quote">(<code>quote</code> <em>form</em>)</a></li>
<li><a href="#var">(<code>var</code> <em>symbol</em>)</a></li>
<li><a href="#fn">(<code>fn</code> <em>name</em>? [<em>params</em>* ] <em>expr</em>*)</a></li>
<li><a href="#_fn_name_params_expr">(<code>fn</code> <em>name</em>? ([<em>params</em>* ] <em>expr</em>*)+)</a></li>
<li><a href="#_fn_name_param_condition_map_expr">(<code>fn</code> <em>name</em>? [<em>param</em>* ] <em>condition-map</em>? <em>expr</em>*)</a></li>
<li><a href="#_fn_name_param_condition_map_expr_2">(<code>fn</code> name? ([<em>param</em>* ] <em>condition-map</em>? <em>expr</em>*)+)</a></li>
<li><a href="#loop">(<code>loop</code> [<em>binding</em>* ] <em>expr</em>*)</a></li>
<li><a href="#recur">(<code>recur</code> <em>expr</em>*)</a></li>
<li><a href="#throw">(<code>throw</code> <em>expr</em>)</a></li>
<li><a href="#try">(<code>try</code> <em>expr</em>* <em>catch-clause</em>* <em>finally-clause</em>?)</a></li>
<li><a href="#monitor-enter">(<code>monitor-enter</code> <em>expr</em>)</a></li>
<li><a href="#monitor-exit">(<code>monitor-exit</code> <em>expr</em>)</a></li>
<li><a href="#_other_special_forms">Other Special Forms</a></li>
<li><a href="#binding-forms">Binding Forms (Destructuring)</a>
<ul class="sectlevel2">
<li><a href="#sequential-destructuring">Sequential destructuring</a></li>
<li><a href="#associative-destructuring">Associative destructuring</a></li>
<li><a href="#keyword-arguments">Keyword Arguments</a></li>
<li><a href="#nested-destructuring">Nested destructuring</a></li>
</ul>
</li>
</ul>
</div>
<div class="paragraph">
<p>Special forms have evaluation rules that differ from standard Clojure evaluation rules and are understood directly by the Clojure compiler.</p>
</div>
<div class="paragraph">
<p>Headings for the special forms informally describe the special form grammar using regular expression syntax: ? (optional), * (0 or more), and + (1 or more). Non-terminals are denoted by <em>italics</em>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="def"><a class="anchor" href="#def"></a>(<code>def</code> <em>symbol</em> <em>doc-string</em>? <em>init</em>?)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Creates and interns or locates a global <a href="https://clojure.org/reference/vars">var</a> with the name of <em>symbol</em> and a namespace of the value of the current namespace (<code>*ns*</code>). If <em>init</em> is supplied, it is evaluated, and the root binding of the var is set to the resulting value. If <em>init</em> is not supplied, the root binding of the var is unaffected. <code>def</code> always applies to the root binding, even if the var is thread-bound at the point where <code>def</code> is called. <code>def</code> yields the var itself (not its value). Throws an exception if <em>symbol</em> is already in the namespace and not mapped to an interned var. Support for <em>doc-string</em> was added in Clojure 1.3.</p>
</div>
<div class="paragraph">
<p>Any metadata on the <em>symbol</em> will be evaluated, and become metadata on the var itself. There are several metadata keys that have special interpretation:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:private</code></p>
<div class="paragraph">
<p>a boolean indicating the access control for the var. If this key is not present, the default access is public (e.g. as if <code>:private false</code>).</p>
</div>
</li>
<li>
<p><code>:doc</code></p>
<div class="paragraph">
<p>a string containing short (1-3 line) documentation for the var contents</p>
</div>
</li>
<li>
<p><code>:test</code></p>
<div class="paragraph">
<p>a fn of no args that uses <code>assert</code> to check various operations. The var itself will be accessible during evaluation of a literal fn in the metadata map.</p>
</div>
</li>
<li>
<p><code>:tag</code></p>
<div class="paragraph">
<p>a symbol naming a class or a Class object that indicates the Java type of the object in the var, or its return value if the object is a fn.</p>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>In addition the compiler will place the following metadata keys on the var:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:file</code> string</p>
</li>
<li>
<p><code>:line</code> int</p>
</li>
<li>
<p><code>:name</code> simple symbol</p>
</li>
<li>
<p><code>:ns</code> namespace in which var is interned</p>
</li>
<li>
<p><code>:macro</code> <code>true</code> if var names a macro</p>
</li>
<li>
<p><code>:arglists</code> a list of vector(s) of argument forms, as were supplied to <code>defn</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The var metadata can be used for application-specific purposes as well. Consider using namespace-qualified keys (e.g. <code>:myns/foo</code>) to avoid clashes.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn
 ^{:doc "mymax [xs+] gets the maximum value in xs using &gt; "
   :test (fn []
             (assert (= 42  (mymax 2 42 5 4))))
   :user/comment "this is the best fn ever!"}
  mymax
  ([x] x)
  ([x y] (if (&gt; x y) x y))
  ([x y &amp; more]
   (reduce mymax (mymax x y) more)))

user=&gt; (meta #'mymax)
  {:name mymax,
   :user/comment "this is the best fn ever!",
   :doc "mymax [xs+] gets the maximum value in xs using &gt; ",
   :arglists ([x] [x y] [x y &amp; more])
   :file "repl-1",
   :line 126,
   :ns #&lt;Namespace user &gt;,
   :test #&lt;user$fn__289 user$fn__289@20f443 &gt;}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Many macros expand into <code>def</code> (e.g. <code>defn</code>, <code>defmacro</code>), and thus also convey metadata for the resulting var from the <em>symbol</em> used as the name.</p>
</div>
<div class="paragraph">
<p>Using <code>def</code> to modify the root value of a var at other than the top level is usually an indication that you are using the var as a mutable global, and is considered bad style. Consider either using binding to provide a thread-local value for the var, or putting a <a href="https://clojure.org/reference/refs">ref</a> or <a href="https://clojure.org/reference/agents">agent</a> in the var and using transactions or actions for mutation.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="if"><a class="anchor" href="#if"></a>(<code>if</code> <em>test</em> <em>then</em> <em>else</em>?)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Evaluates <em>test</em>. If not the singular values <code>nil</code> or <code>false</code>, evaluates and yields <em>then</em>, otherwise, evaluates and yields <em>else</em>. If <em>else</em> is not supplied it defaults to <code>nil</code>. All of the other conditionals in Clojure are based upon the same logic, that is, <code>nil</code> and <code>false</code> constitute logical falsity, and everything else constitutes logical truth, and those meanings apply throughout. <code>if</code> performs conditional tests of boolean Java method return values without conversion to Boolean. Note that <code>if</code> does not test for arbitrary values of java.lang.Boolean, only the singular value <code>false</code> (Java&#8217;s <code>Boolean.FALSE</code>), so if you are creating your own boxed Booleans make sure to use <code>Boolean/valueOf</code> and not the Boolean constructors.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="do"><a class="anchor" href="#do"></a>(<code>do</code> <em>expr</em>*)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Evaluates the expressions <em>expr</em>s in order and returns the value of the last. If no expressions are supplied, returns <code>nil</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="let"><a class="anchor" href="#let"></a>(<code>let</code> [ <em>binding</em>* ] <em>expr</em>*)</h2>
<div class="sectionbody">
<div class="paragraph">
<p><em>binding</em> &#8658; <em>binding-form</em> <em>init-expr</em></p>
</div>
<div class="paragraph">
<p>Evaluates the expressions <em>expr</em>s in a lexical context in which the symbols in the <em>binding-form</em>s are bound to their respective <em>init-expr</em>s or parts therein. The bindings are sequential, so each <em>binding</em> can see the prior bindings. The <em>expr</em>s are contained in an implicit <code>do</code>. If a <em>binding</em> symbol is annotated with a metadata tag, the compiler will try to resolve the tag to a class name and presume that type in subsequent references to the <em>binding</em>. The simplest <em>binding-form</em> is a symbol, which is bound to the entire <em>init-expr</em>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [x 1
      y x]
  y)
-&gt; 1</code></pre>
</div>
</div>
<div class="paragraph">
<p>See <a href="special_forms#binding-forms">Binding Forms</a> for more information about binding forms.</p>
</div>
<div class="paragraph">
<p><strong>Locals created with <code>let</code> are not variables. Once created their values never change!</strong></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="quote"><a class="anchor" href="#quote"></a>(<code>quote</code> <em>form</em>)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Yields the unevaluated <em>form</em>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; '(a b c)
(a b c)</code></pre>
</div>
</div>
<div class="paragraph">
<p>Note there is no attempt made to call the function <code>a</code>. The return value is a list of 3 symbols.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="var"><a class="anchor" href="#var"></a>(<code>var</code> <em>symbol</em>)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <em>symbol</em> must resolve to a var, and the Var object itself <em>(not its value)</em> is returned. The reader macro <code>#'x</code> expands to <code>(var x)</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="fn"><a class="anchor" href="#fn"></a>(<code>fn</code> <em>name</em>? [<em>params</em>* ] <em>expr</em>*)</h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_fn_name_params_expr"><a class="anchor" href="#_fn_name_params_expr"></a>(<code>fn</code> <em>name</em>? ([<em>params</em>* ] <em>expr</em>*)+)</h2>
<div class="sectionbody">
<div class="paragraph">
<p><em>params</em> &#8658; <em>positional-param</em>* , or <em>positional-param</em>* &amp; <em>rest-param</em><br>
<em>positional-param</em> &#8658; <em>binding-form</em><br>
<em>rest-param</em> &#8658; <em>binding-form</em><br>
<em>name</em> &#8658; <em>symbol</em></p>
</div>
<div class="paragraph">
<p>Defines a function (fn). Fns are first-class objects that implement the <a href="https://clojure.github.io/clojure/javadoc/clojure/lang/IFn.html">IFn interface</a>. The <code>IFn</code> interface defines an <code>invoke()</code> function that is overloaded with arity ranging from 0-20. A single fn object can implement one or more invoke methods, and thus be overloaded on arity. One and only one overload can itself be variadic, by specifying the ampersand followed by a single <em>rest-param</em>. Such a variadic entry point, when called with arguments that exceed the positional params, collects them in a seq which is bound to, or destructured by, the rest param. If the supplied args do not exceed the positional params, the rest param will be <code>nil</code>.</p>
</div>
<div class="paragraph">
<p>The first form defines a fn with a single invoke method. The second defines a fn with one or more overloaded invoke methods. The arities of the overloads must be distinct. In either case, the result of the expression is a single fn object.</p>
</div>
<div class="paragraph">
<p>The expressions <em>expr</em>s are compiled in an environment in which the <em>params</em> are bound to the actual arguments. The <em>expr</em>s are enclosed in an implicit <code>do</code>. If a name <em>symbol</em> is provided, it is bound within the function definition to the function object itself, allowing for self-calling, even in anonymous functions. If a <em>param</em> symbol is annotated with a metadata tag, the compiler will try to resolve the tag to a class name and presume that type in subsequent references to the binding.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(def mult
  (fn this
      ([] 1)
      ([x] x)
      ([x y] (* x y))
      ([x y &amp; more]
          (apply this (this x y) more))))</code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that named fns such as <code>mult</code> are normally defined with <code>defn</code>, which expands into something such as the above.</p>
</div>
<div class="paragraph">
<p>A fn (overload) defines a recursion point at the top of the function, with arity equal to the number of <em>param</em>s <em>including the rest param, if present</em>. See <a href="special_forms#recur"><code>recur</code></a>.</p>
</div>
<div class="paragraph">
<p>fns implement the Java <code>Callable</code>, <code>Runnable</code> and <code>Comparator</code> interfaces.</p>
</div>
<div class="paragraph">
<p><strong><em>Since 1.1</em></strong></p>
</div>
<div class="paragraph">
<p>Functions support specifying runtime pre- and post-conditions.</p>
</div>
<div class="paragraph">
<p>The syntax for function definitions becomes the following:</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_fn_name_param_condition_map_expr"><a class="anchor" href="#_fn_name_param_condition_map_expr"></a>(<code>fn</code> <em>name</em>? [<em>param</em>* ] <em>condition-map</em>? <em>expr</em>*)</h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_fn_name_param_condition_map_expr_2"><a class="anchor" href="#_fn_name_param_condition_map_expr_2"></a>(<code>fn</code> name? ([<em>param</em>* ] <em>condition-map</em>? <em>expr</em>*)+)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The syntax extension also applies to <code>defn</code> and other macros which expand to <code>fn</code> forms.</p>
</div>
<div class="paragraph">
<p>Note: If the sole form following the parameter vector is a map, it is treated as the function body, and not the condition map.</p>
</div>
<div class="paragraph">
<p>The <em>condition-map</em> parameter may be used to specify pre- and post-conditions for a function. It is of the following form:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight linenums"><code data-lang="source">{:pre [pre-expr*]
 :post [post-expr*]}</code></pre>
</div>
</div>
<div class="paragraph">
<p>where either key is optional. The condition map may also be provided as metadata of the arglist.</p>
</div>
<div class="paragraph">
<p><em>pre-expr</em> and <em>post-expr</em> are boolean expressions that may refer to the parameters of the function. In addition, <code>%</code> may be used in a <em>post-expr</em> to refer to the function&#8217;s return value. If any of the conditions evaluate to <code>false</code> and <code>*assert*</code> is true, a <code>java.lang.AssertionError</code> exception is thrown.</p>
</div>
<div class="paragraph">
<p>Example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn constrained-sqr [x]
    {:pre  [(pos? x)]
     :post [(&gt; % 16), (&lt; % 225)]}
    (* x x))</code></pre>
</div>
</div>
<div class="paragraph">
<p>See <a href="special_forms#binding-forms">Binding Forms</a> for more information about binding forms.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="loop"><a class="anchor" href="#loop"></a>(<code>loop</code> [<em>binding</em>* ] <em>expr</em>*)</h2>
<div class="sectionbody">
<div class="paragraph">
<p><code>loop</code> is exactly like <code>let</code>, except that it establishes a recursion point at the top of the loop, with arity equal to the number of bindings. See <a href="special_forms#recur"><code>recur</code></a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="recur"><a class="anchor" href="#recur"></a>(<code>recur</code> <em>expr</em>*)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Evaluates the expressions <em>expr</em>s in order, then, in parallel, rebinds the bindings of the recursion point to the values of the <em>expr</em>s. If the recursion point was a <code>fn</code> method, then it rebinds the params. If the recursion point was a <a href="special_forms#loop"><code>loop</code></a>, then it rebinds the <code>loop</code> bindings. Execution then jumps back to the recursion point. The <code>recur</code> expression must match the arity of the recursion point exactly. In particular, if the recursion point was the top of a variadic fn method, there is no gathering of <code>rest</code> args - a single seq (or null) should be passed. <code>recur</code> in other than a tail position is an error.</p>
</div>
<div class="paragraph">
<p>Note that <code>recur</code> is the only non-stack-consuming looping construct in Clojure. There is no tail-call optimization and the use of self-calls for looping of unknown bounds is discouraged. <code>recur</code> is functional and its use in tail-position is verified by the compiler.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(def factorial
  (fn [n]
    (loop [cnt n acc 1]
       (if (zero? cnt)
            acc
          (recur (dec cnt) (* acc cnt))))))</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="throw"><a class="anchor" href="#throw"></a>(<code>throw</code> <em>expr</em>)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <em>expr</em> is evaluated and thrown, therefore it should yield an instance of some derivee of <code>Throwable</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="try"><a class="anchor" href="#try"></a>(<code>try</code> <em>expr</em>* <em>catch-clause</em>* <em>finally-clause</em>?)</h2>
<div class="sectionbody">
<div class="paragraph">
<p><em>catch-clause</em> &#8594; (catch <em>classname</em> <em>name</em> <em>expr</em>*)<br>
<em>finally-clause</em> &#8594; (finally <em>expr</em>*)</p>
</div>
<div class="paragraph">
<p>The <em>expr</em>s are evaluated and, if no exceptions occur, the value of the last expression is returned. If an exception occurs and <em>catch-clause</em>s are provided, each is examined in turn and the first for which the thrown exception is an instance of the <em>classname</em> is considered a matching <em>catch-clause</em>. If there is a matching <em>catch-clause</em>, its <em>expr</em>s are evaluated in a context in which <em>name</em> is bound to the thrown exception, and the value of the last is the return value of the function. If there is no matching <em>catch-clause</em>, the exception propagates out of the function. Before returning, normally or abnormally, any <em>finally-clause</em> <em>expr</em>s will be evaluated for their side effects.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="monitor-enter"><a class="anchor" href="#monitor-enter"></a>(<code>monitor-enter</code> <em>expr</em>)</h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="monitor-exit"><a class="anchor" href="#monitor-exit"></a>(<code>monitor-exit</code> <em>expr</em>)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>These are synchronization primitives that should be avoided in user code. Use the <code>locking</code> macro.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_other_special_forms"><a class="anchor" href="#_other_special_forms"></a>Other Special Forms</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a id="new"></a><a id="dot"></a>The special forms <a href="java_interop#dot">dot ('.')</a>, <a href="java_interop#new">new</a>, and <a href="java_interop#set">set!</a> of fields are described in the <a href="java_interop">Java Interop</a> section of the reference.</p>
</div>
<div class="paragraph">
<p><a id="set"></a><a href="vars#set%21">set!</a> of vars is described in the <a href="vars">Vars</a> section of the reference.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="binding-forms"><a class="anchor" href="#binding-forms"></a>Binding Forms (Destructuring)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The simplest <em>binding-form</em> in Clojure is a symbol. However, Clojure also supports abstract structural binding called destructuring in <code>let</code> binding lists, <code>fn</code> parameter lists, and by extension any macro that expands into a <code>let</code> or <code>fn</code>. Destructuring is a way to create a set of bindings to values within a collection by using an analogous collection as a binding form. A vector form specifies bindings by position in a sequential collection, a map form by key in an associative collection. Destructuring forms can appear anywhere <em>binding-form</em>s can, and thus nest, yielding code that is clearer than using collection accessors.</p>
</div>
<div class="paragraph">
<p><em>Binding-form</em>s that don‚Äôt match their respective part due to an absence of data (i.e. too few elements in a sequential structure, no key in an associative structure, etc) bind to <code>nil</code>.</p>
</div>
<div class="sect2">
<h3 id="sequential-destructuring"><a class="anchor" href="#sequential-destructuring"></a>Sequential destructuring</h3>
<div class="paragraph">
<p>Vector <em>binding_form</em>s sequentially bind values in collections like vectors, lists, seqs, strings, arrays, and anything that supports <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/nth"><code>nth</code></a>. The sequential destructuring form is a vector of <em>binding-form</em>s, which will be bound to successive elements from the <em>init-expr</em>, looked up via <code>nth</code>. In addition, and optionally, a <em>binding-form</em> following a <code>&amp;</code> will be  bound to the remainder of the sequence, i.e. that part not yet bound, and looked up via <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/nthnext"><code>nthnext</code></a>.</p>
</div>
<div class="paragraph">
<p>Finally, also optionally, <code>:as</code> followed by a symbol binds that symbol to the entire <em>init-expr</em>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [[a b c &amp; d :as e] [1 2 3 4 5 6 7]]
  [a b c d e])

-&gt;[1 2 3 (4 5 6 7) [1 2 3 4 5 6 7]]</code></pre>
</div>
</div>
<div class="paragraph">
<p>These forms can nest:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [[[x1 y1][x2 y2]] [[1 2] [3 4]]]
  [x1 y1 x2 y2])

-&gt;[1 2 3 4]</code></pre>
</div>
</div>
<div class="paragraph">
<p>In all of the sequential cases the <em>binding-form</em>s in the destructure binding will match the places in the target data structure where the desired values reside.</p>
</div>
</div>
<div class="sect2">
<h3 id="associative-destructuring"><a class="anchor" href="#associative-destructuring"></a>Associative destructuring</h3>
<div class="paragraph">
<p>Map <em>binding-form</em>s create bindings by looking up values in collections like maps, sets, vectors, strings, and arrays (the latter three have integer keys). It consists of a map of <em>binding-form&#8594;key</em> pairs, each <em>binding-form</em> bound to the value in the <em>init-expr</em> at the key provided. In addition, and optionally, an <code>:as</code> key in the binding form followed by a symbol binds that symbol to the entire <em>init-expr</em>. Also optionally, an <code>:or</code> key in the binding form followed by another map may be used to supply default values for some or all of the keys if they are not found in the <em>init-expr</em>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [{a :a, b :b, c :c, :as m :or {a 2 b 3}}  {:a 5 :c 6}]
  [a b c m])

-&gt;[5 3 6 {:c 6, :a 5}]</code></pre>
</div>
</div>
<div class="paragraph">
<p>It is often the case that you will want to bind symbols with the same name as the corresponding map keys. The <code>:keys</code> directive addresses the redundancy often found in the binding <em>binding-form&#8594;key</em> pairs:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [{fred :fred ethel :ethel lucy :lucy} m] ...</code></pre>
</div>
</div>
<div class="paragraph">
<p>can be written:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [{:keys [fred ethel lucy]} m] ...</code></pre>
</div>
</div>
<div class="paragraph">
<p>As of Clojure 1.6, you can also use prefixed map keys in the map destructuring form:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [m {:x/a 1, :y/b 2}
      {:keys [x/a y/b]} m]
  (+ a b))

-&gt; 3</code></pre>
</div>
</div>
<div class="paragraph">
<p>In the case of using prefixed keys, the bound symbol name is the same as the right-hand side of the prefixed key. You can also use auto-resolved keyword forms in the <code>:keys</code> directive:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [m {::x 42}
      {:keys [::x]} m]
  x)

-&gt; 42</code></pre>
</div>
</div>
<div class="paragraph">
<p>There are similar <code>:strs</code> and <code>:syms</code> directives for matching string and symbol keys, the latter also allowing prefixed symbol keys since Clojure 1.6.</p>
</div>
<div class="paragraph">
<p>Clojure 1.9 adds support for directly destructuring many keys (or symbols) that share the same namespace using the following destructuring key forms:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:<em>ns</em>/keys</code> - <em>ns</em> specifies the default namespace for the key to look up in the input</p>
<div class="ulist">
<ul>
<li>
<p>keys elements should not specify a namespace</p>
</li>
<li>
<p>keys elements also define new local symbols, as with <code>:keys</code></p>
</li>
</ul>
</div>
</li>
<li>
<p><code>:<em>ns</em>/syms</code> - <em>ns</em> specifies the default namespace for the symbol to look up in the input</p>
<div class="ulist">
<ul>
<li>
<p>syms elements should not specify a namespace</p>
</li>
<li>
<p>syms elements also define new local symbols, as with <code>:syms</code></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [m #:domain{:a 1, :b 2}
      {:domain/keys [a b]} m]
  [a b])

-&gt; [1 2]</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="keyword-arguments"><a class="anchor" href="#keyword-arguments"></a>Keyword Arguments</h3>
<div class="paragraph">
<p>Keyword arguments are optional trailing variadic arguments of the form <code>akey aval bkey bval&#8230;&#8203;</code> that can be accessed in the function body via associative destructuring. Also, introduced in Clojure 1.11, a function specified to take kwargs may be passed a single map instead of or in addition to (and following) the key/value pairs. When a lone map is passed, it is used outright for destructuring, else a trailing map is added to the map built from the preceding key/values via <code>conj</code>. To define a function that accepts keyword arguments you supply a map destructuring form in the <em>rest-param</em> declaration position. For example, a function that takes a sequence and optional keyword arguments and returns a vector containing the values is defined as:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn destr [&amp; {:keys [a b] :as opts}]
  [a b opts])

(destr :a 1)
-&gt;[1 nil {:a 1}]

(destr {:a 1 :b 2})
-&gt;[1 2 {:a 1 :b 2}]</code></pre>
</div>
</div>
<div class="paragraph">
<p>The map <em>binding-form</em> to the right of the <code>&amp;</code> in <code>destr</code> is an associative destructuring <em>binding-form</em> <a href="special_forms#associative-destructuring">detailed above</a>.</p>
</div>
<div class="paragraph">
<p>The two declarations of <code>foo</code> below are equivalent, demonstrating associative destructuring‚Äôs interpretation of seqs:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(defn foo [&amp; {:keys [quux]}] ...)

(defn foo [&amp; opts]
  (let [{:keys [quux]} opts] ...))</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="nested-destructuring"><a class="anchor" href="#nested-destructuring"></a>Nested destructuring</h3>
<div class="paragraph">
<p>Since binding forms can be nested within one another arbitrarily, you can pull apart just about anything:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(let [m {:j 15 :k 16 :ivec [22 23 24 25]}
      {j :j, k :k, i :i, [r s &amp; t :as v] :ivec, :or {i 12 j 13}} m]
  [i j k r s t v])

-&gt; [12 15 16 22 23 (24 25) [22 23 24 25]]</code></pre>
</div>
</div>
</div>
</div>
</div>


<div class="clj-prev-next-container">
  <a href="evaluation" class="clj-prev-link"><span class="clj-prevnext-link-icon">&#xeab5;</span>&nbsp;Evaluation</a>
  <a href="macros" class="clj-next-link">Macros&nbsp;<span class="clj-prevnext-link-icon">&#xeab8;</span></a>
</div>

    </div>
  </div>
</div>

  <div class="w-section clj-footer">
    <div class="w-container clj-footer-links-container">
      <div class="w-row">
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Community</h6>
            <a href="/community/resources" class="clj-footer-link">Resources</a>
            <a href="/community/contributing" class="clj-footer-link">Contributing</a>
            <a href="/community/companies" class="clj-footer-link">Companies</a>
            <a href="/community/contributing_site" class="clj-footer-link">Site</a>
          <h6 class="clj-footer-heading">Legal</h6>
            <a href="/community/license" class="clj-footer-link">License</a>
            <a href="/privacy" class="clj-footer-link">Privacy Policy</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Documentation</h6>
            <a href="/about/rationale" class="clj-footer-link">Overview</a>
            <a href="/reference/documentation" class="clj-footer-link">Reference</a>
            <a href="/api/api" class="clj-footer-link">API</a>
            <a href="/guides/guides" class="clj-footer-link">Guides</a>
            <a href="/community/libraries" class="clj-footer-link">Libraries &amp; Tools</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Updates</h6>
            <a href="/news/news" class="clj-footer-link">News</a>
            <a href="/community/events" class="clj-footer-link">Events</a>
          <h6 class="clj-footer-heading">ETC</h6>
            <a href="https://www.youtube.com/user/ClojureTV" class="clj-footer-link">ClojureTV</a>
            <a href="/community/books" class="clj-footer-link">Books</a>
            <a href="/community/swag" class="clj-footer-link">Swag</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Code</h6>
            <a href="/releases/downloads" class="clj-footer-link">Releases</a>
            <a href="https://github.com/clojure/clojure/" class="clj-footer-link">Source</a>
            <a href="http://clojurescript.org" class="clj-footer-link">ClojureScript</a>
            <a href="/about/clojureclr" class="clj-footer-link">ClojureCLR</a>
        </div>
      </div>
    </div>
    <div class="w-container clj-footer-legal-container">
      <div class="w-clearfix clj-footer-legal">
        <div class="clj-footer-logo">&nbsp;</div>
        <div class="clj-footer-legal-links">
          <div class="clj-footer-copyright">Copyright 2008-2022 Rich Hickey | <a class="clj-footer-sub-link" href="/privacy">Privacy Policy</a><br/>Logo &amp; site design by Tom Hickey
          </div>
          <div class="clj-footer-designed-by">Published 2023-12-18<br/>Update <a class="clj-footer-sub-link" href="https://github.com/clojure/clojure-site/blob/master/content/reference/special_forms.adoc">this page</a>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script type="text/javascript" src="/js/webflow.js"></script>
  <script type="text/javascript" src="/js/highlight.pack.js"></script>
  <script>
  $(document).ready( (event) => {
    $('pre code').each((index, obj) => {
      $(obj).addClass($(obj).attr("data-lang"));
      hljs.highlightBlock(obj);
    });
  });
  </script>
  <!--[if lte IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif]-->
</body>
</html>
