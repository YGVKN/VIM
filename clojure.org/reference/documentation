<!DOCTYPE html>
<!-- This site was created in Webflow. http://www.webflow.com-->
<!-- Last Published: Fri Nov 13 2015 01:48:45 GMT+0000 (UTC) -->
<html lang="en" data-wf-site="56414d6fc8c27cad0f4e12e7" data-wf-page="5643ac587b1f28dc58ed6b89">
<head>
  <meta charset="utf-8">
  <title>Clojure - The Reader</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="generator" content="Webflow">
  <meta name="google-site-verification" content="a30CDuC9UBifM7EL575LK9a4TEE6mNfWbKqXIoSZChg" />
  <meta name="google-site-verification" content="iXqpntr4CN3JRM1sVm5D_YzZw8bFRizBaTVycwqii2E" />
  <meta name="keywords" content="clojure,programming" />
  <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,600;1,300;1,400;1,600&family=PT+Serif:ital@0;1&&family=Source+Code+Pro:wght@500&display=swap">
  <link rel="stylesheet" type="text/css" href="/css/normalize.css">
  <link rel="stylesheet" type="text/css" href="/css/webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/clojureorg.webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/asciidoctor-mod.css">
  <link type="text/css" href="/css/default-en.css" rel="stylesheet">
  <link type="text/css" href="/css/default.css" rel="stylesheet">
  <link type="text/css" href="/css/search-result.css" rel="stylesheet">
  <link rel="alternate" type="application/atom+xml" title="News" href="/feed.xml" />
  <script type="text/javascript" src="/js/modernizr.js"></script>
  <link rel="shortcut icon" type="image/x-icon" href="/images/clojure-logo-icon-32.png">
  <link rel="apple-touch-icon" href="/images/clojure-logo-icon-256.png">
  <!-- Matomo -->
  <script>
    var _paq = window._paq = window._paq || [];
    /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
      var u="https://cognitect.matomo.cloud/";
      _paq.push(['setTrackerUrl', u+'matomo.php']);
      _paq.push(['setSiteId', '9']);
      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
      g.async=true; g.src='//cdn.matomo.cloud/cognitect.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);
    })();
  </script>
<!-- End Matomo Code -->
  <script type="text/javascript">
    function searchClj(obj) {
      let e = document.getElementById("searchType");
      document.getElementById("hiddenSearch").value=e.value;
    }
  </script>
</head>
<body>
  <div data-collapse="none" data-animation="default" data-duration="400" data-contain="1" class="w-nav clj-navbar">
    <div class="w-container">
      <a href="/index" class="w-nav-brand w-clearfix clj-logo-container"><img width="60" src="/images/clojure-logo-120b.png" class="clj-logo" alt="Clojure logo">
        <div class="clj-logo-text">Clojure</div>
      </a>
      <nav role="navigation" class="w-nav-menu clj-nav-menu"><a href="/about/rationale" class="w-nav-link clj-nav-link">Overview</a><a href="/reference/documentation" class="w-nav-link clj-nav-link">Reference‚Äç</a><a href="/api/api" class="w-nav-link clj-nav-link">API</a><a href="/releases/downloads" class="w-nav-link clj-nav-link">Releases</a><a href="/guides/guides" class="w-nav-link clj-nav-link">Guides</a><a href="/community/success_stories" class="w-nav-link clj-nav-link">Community</a><a href="/dev/dev" class="w-nav-link clj-nav-link">Dev</a><a href="/news/news" class="w-nav-link clj-nav-link">News</a><a href="#" data-ix="search-click-trigger" class="w-nav-link clj-nav-link clj-nav-search">&#xed11;</a>
      </nav>
      <div class="w-nav-button clj-menu-button">
        <div class="w-icon-nav-menu"></div>
      </div>
    </div>
  </div>
  <div data-ix="hide-search" class="w-section clj-search-section">
    <div class="w-container">
      <div class="w-form clj-search-form-wrapper">
        <form id="wf-form-Search-Form" name="wf-form-Search-Form" action="https://duckduckgo.com/" method="get" onSubmit="searchClj(this)">
          <div class="w-row">
            <div class="w-col w-col-6 w-col-small-6">
              <input id="hiddenSearch" type="hidden" name="sites" value="www.clojure.org">
              <input name="q" id="q" type="text" placeholder="Search clojure.org reference, guides, and API" title="Search text" autofocus="autofocus" class="w-input clj-search-input">
            </div>
            <div class="w-col w-col-3 w-col-small-3 clj-search-type">
              <select name="searchType" id="searchType" class="w-select clj-search-type">
                <option value="www.clojure.org">clojure.org</option>
                <option value="ask.clojure.org">ask.clojure.org</option>
              </select>
            </div>
            <div class="w-col w-col-3 w-col-small-3">
              <input type="submit" value="Search" class="w-button clj-search-submit">
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

<div class="w-section clj-content-section">
  <div class="w-container">
    <div class="clj-section-nav-container">
      <div data-collapse="small" data-animation="default" data-duration="200" data-contain="1" class="w-nav clj-section-navbar">
        <div class="w-container">
          <nav role="navigation" class="w-nav-menu clj-section-nav-menu">
            <a href="reader" class="w-nav-link clj-section-nav-item-link">The Reader</a>
            <a href="repl_and_main" class="w-nav-link clj-section-nav-item-link">The REPL and main</a>
            <a href="evaluation" class="w-nav-link clj-section-nav-item-link">Evaluation</a>
            <a href="special_forms" class="w-nav-link clj-section-nav-item-link">Special Forms</a>
            <a href="macros" class="w-nav-link clj-section-nav-item-link">Macros</a>
            <a href="other_functions" class="w-nav-link clj-section-nav-item-link">Other Functions</a>
            <a href="data_structures" class="w-nav-link clj-section-nav-item-link">Data Structures</a>
            <a href="datatypes" class="w-nav-link clj-section-nav-item-link">Datatypes</a>
            <a href="sequences" class="w-nav-link clj-section-nav-item-link">Sequences</a>
            <a href="transients" class="w-nav-link clj-section-nav-item-link">Transients</a>
            <a href="transducers" class="w-nav-link clj-section-nav-item-link">Transducers</a>
            <a href="multimethods" class="w-nav-link clj-section-nav-item-link">Multimethods and Hierarchies</a>
            <a href="protocols" class="w-nav-link clj-section-nav-item-link">Protocols</a>
            <a href="metadata" class="w-nav-link clj-section-nav-item-link">Metadata</a>
            <a href="namespaces" class="w-nav-link clj-section-nav-item-link">Namespaces</a>
            <a href="libs" class="w-nav-link clj-section-nav-item-link">Libs</a>
            <a href="vars" class="w-nav-link clj-section-nav-item-link">Vars and Environments</a>
            <a href="refs" class="w-nav-link clj-section-nav-item-link">Refs and Transactions</a>
            <a href="agents" class="w-nav-link clj-section-nav-item-link">Agents</a>
            <a href="atoms" class="w-nav-link clj-section-nav-item-link">Atoms</a>
            <a href="reducers" class="w-nav-link clj-section-nav-item-link">Reducers</a>
            <a href="java_interop" class="w-nav-link clj-section-nav-item-link">Java Interop</a>
            <a href="compilation" class="w-nav-link clj-section-nav-item-link">Compilation and Class Generation</a>
            <a href="other_libraries" class="w-nav-link clj-section-nav-item-link">Other Libraries</a>
            <a href="lisps" class="w-nav-link clj-section-nav-item-link">Differences with Lisps</a>
            <a href="deps_and_cli" class="w-nav-link clj-section-nav-item-link">Deps and CLI</a>
            <a href="deps_edn" class="w-nav-link clj-section-nav-item-link">deps.edn</a>
          </nav>
          <div data-ix="toggle-section-nav-icon" class="w-nav-button w-clearfix clj-section-nav-toggle">
            <div class="clj-section-nav-text">The Reader</div>
            <div class="clj-section-nav-icon-closed">&#xeab2;</div>
            <div data-ix="init-hide-section-nav-icon-open" class="clj-section-nav-icon-open">&#xeab9;</div>
          </div>
        </div>
      </div>
    </div>
    <div class="clj-content-container">

      <h1>The Reader</h1>

      <div id="preamble">
<div class="sectionbody">
<div id="toc" class="toc">
<div id="toctitle" class="title">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_reader_forms">Reader forms</a>
<ul class="sectlevel2">
<li><a href="#_symbols">Symbols</a></li>
<li><a href="#_literals">Literals</a></li>
<li><a href="#_lists">Lists</a></li>
<li><a href="#_vectors">Vectors</a></li>
<li><a href="#_maps">Maps</a></li>
<li><a href="#_sets">Sets</a></li>
<li><a href="#_deftype_defrecord_and_constructor_calls_version_1_3_and_later">deftype, defrecord, and constructor calls (version 1.3 and later):</a></li>
</ul>
</li>
<li><a href="#macrochars">Macro characters</a>
<ul class="sectlevel2">
<li><a href="#_quote">Quote (')</a></li>
<li><a href="#_character">Character (\)</a></li>
<li><a href="#_comment">Comment (;)</a></li>
<li><a href="#_deref">Deref (@)</a></li>
<li><a href="#_metadata">Metadata (^)</a></li>
<li><a href="#_dispatch">Dispatch (#)</a></li>
<li><a href="#syntax-quote">Syntax-quote (`, note, the "backquote" character), Unquote (~) and Unquote-splicing (~@)</a></li>
</ul>
</li>
<li><a href="#_extensible_data_notation_edn">extensible data notation (edn)</a></li>
<li><a href="#tagged_literals">Tagged Literals</a>
<ul class="sectlevel2">
<li><a href="#_built_in_tagged_literals">Built-in tagged literals</a></li>
<li><a href="#_default_data_reader_function">Default data reader function</a></li>
</ul>
</li>
<li><a href="#_reader_conditionals">Reader Conditionals</a></li>
</ul>
</div>
<div class="paragraph">
<p>Clojure is a <a href="https://en.wikipedia.org/wiki/Homoiconicity">homoiconic</a> language, which is a fancy term describing the fact that Clojure programs are represented by Clojure data structures. This is a very important difference between Clojure (and Common Lisp) and most other programming languages - Clojure is defined in terms of the evaluation of data structures and <strong>not</strong> in terms of the syntax of character streams/files. It is quite common, and easy, for Clojure programs to manipulate, transform and produce other Clojure programs.</p>
</div>
<div class="paragraph">
<p>That said, most Clojure programs begin life as text files, and it is the task of the <em>reader</em> to parse the text and produce the data structure the compiler will see. This is not merely a phase of the compiler. The reader, and the Clojure data representations, have utility on their own in many of the same contexts one might use XML or JSON etc.</p>
</div>
<div class="paragraph">
<p>One might say the reader has syntax defined in terms of characters, and the Clojure language has syntax defined in terms of symbols, lists, vectors, maps etc. The reader is represented by the function <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/read">read</a>, which reads the next form (not character) from a stream, and returns the object represented by that form.</p>
</div>
<div class="paragraph">
<p>Since we have to start somewhere, this reference starts where evaluation starts, with the reader forms. This will inevitably entail talking about data structures whose descriptive details, and interpretation by the compiler, will follow.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_reader_forms"><a class="anchor" href="#_reader_forms"></a>Reader forms</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_symbols"><a class="anchor" href="#_symbols"></a>Symbols</h3>
<div class="ulist">
<ul>
<li>
<p>Symbols begin with a non-numeric character and can contain alphanumeric characters and *, +, !, -, _, ', ?, &lt;, &gt; and = (other characters may be allowed eventually).</p>
</li>
<li>
<p>'/' has special meaning, it can be used once in the middle of a symbol to separate the namespace from the name, e.g. <code>my-namespace/foo</code>. '/' by itself names the division function.</p>
</li>
<li>
<p>'.' has special meaning - it can be used one or more times in the middle of a symbol to designate a fully-qualified class name, e.g. <code>java.util.BitSet</code>, or in namespace names. Symbols beginning or ending with '.' are reserved by Clojure. Symbols containing / or . are said to be 'qualified'.</p>
</li>
<li>
<p>Symbols beginning or ending with ':' are reserved by Clojure. A symbol can contain one or more non-repeating ':'s.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_literals"><a class="anchor" href="#_literals"></a>Literals</h3>
<div class="ulist">
<ul>
<li>
<p>Strings - Enclosed in "double quotes". May span multiple lines. Standard Java escape characters are supported.</p>
</li>
<li>
<p>Numbers - generally represented as per Java</p>
<div class="ulist">
<ul>
<li>
<p>Integers can be indefinitely long and will be read as Longs when in range and clojure.lang.BigInts otherwise. Integers with an N suffix are always read as BigInts. Octal notation is allowed with a <code>0</code> prefix, and hexadecimal notation is allowed with a <code>0x</code> prefix. When possible, they can be specified in any base with radix from 2 to 36 (see <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html#parseLong(java.lang.String,%20int)">Long.parseLong()</a>); for example <code>2r101010</code>, <code>052</code>, <code>8r52</code>, <code>0x2a</code>, <code>36r16</code>, and <code>42</code> are all the same Long.</p>
</li>
<li>
<p>Floating point numbers are read as Doubles; with M suffix they are read as BigDecimals.</p>
</li>
<li>
<p>Ratios are supported, e.g. <code>22/7</code>.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Characters - preceded by a backslash: <code>\c</code>. <code>\newline</code>, <code>\space</code>, <code>\tab</code>, <code>\formfeed</code>, <code>\backspace</code>, and <code>\return</code> yield the corresponding characters. Unicode characters are represented with <code>\uNNNN</code> as in Java. Octals are represented with <code>\oNNN</code>.</p>
</li>
<li>
<p><code>nil</code> Means 'nothing/no-value'- represents Java null and tests logical false</p>
</li>
<li>
<p>Booleans - <code>true</code> and <code>false</code></p>
</li>
<li>
<p>Symbolic values - <code>##Inf</code>, <code>##-Inf</code>, and <code>##NaN</code></p>
</li>
<li>
<p>Keywords - Keywords are like symbols, except:</p>
<div class="ulist">
<ul>
<li>
<p>They can and must begin with a colon, e.g. :fred.</p>
</li>
<li>
<p>They cannot contain '.' in the name part, or name classes.</p>
</li>
<li>
<p>Like symbols, they can contain a namespace, <code>:person/name</code>, which may contain '.'s.</p>
</li>
<li>
<p>A keyword that begins with two colons is auto-resolved in the current namespace to a qualified keyword:</p>
<div class="ulist">
<ul>
<li>
<p>If the keyword is unqualified, the namespace will be the current namespace. In <code>user</code>, <code>::rect</code> is read as <code>:user/rect</code>.</p>
</li>
<li>
<p>If the keyword is qualified, the namespace will be resolved using aliases in the current namespace. In a namespace where <code>x</code> is aliased to <code>example</code>, <code>::x/foo</code> resolves to <code>:example/foo</code>.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_lists"><a class="anchor" href="#_lists"></a>Lists</h3>
<div class="paragraph">
<p>Lists are zero or more forms enclosed in parentheses: <code>(a b c)</code></p>
</div>
</div>
<div class="sect2">
<h3 id="_vectors"><a class="anchor" href="#_vectors"></a>Vectors</h3>
<div class="paragraph">
<p>Vectors are zero or more forms enclosed in square brackets: <code>[1 2 3]</code></p>
</div>
</div>
<div class="sect2">
<h3 id="_maps"><a class="anchor" href="#_maps"></a>Maps</h3>
<div class="ulist">
<ul>
<li>
<p>Maps are zero or more key/value pairs enclosed in braces: <code>{:a 1 :b 2}</code></p>
</li>
<li>
<p>Commas are considered whitespace, and can be used to organize the pairs: <code>{:a 1, :b 2}</code></p>
</li>
<li>
<p>Keys and values can be any forms.</p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="map_namespace_syntax"><a class="anchor" href="#map_namespace_syntax"></a>Map namespace syntax</h4>
<div class="paragraph">
<p><em>Added in Clojure 1.9</em></p>
</div>
<div class="paragraph">
<p>Map literals can optionally specify a default namespace context for keys in the map using a <code>#:ns</code> prefix, where <em>ns</em> is the name of a namespace and the prefix precedes the opening brace <code>{</code> of the map. Additionally, <code>#::</code> can be used to auto-resolve namespaces with the same semantics as auto-resolved keywords.</p>
</div>
<div class="paragraph">
<p>A map literal with namespace syntax is read with the following differences from a map without:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Keys</p>
<div class="ulist">
<ul>
<li>
<p>Keys that are keywords or symbols without a namespace are read with the default namespace.</p>
</li>
<li>
<p>Keys that are keywords or symbols with a namespace are not affected <strong>except</strong> for the special namespace <code>_</code>, which is removed during read. This allows for the specification of keywords or symbols without namespaces as keys in a map literal with namespace syntax.</p>
</li>
<li>
<p>Keys that are not symbols or keywords are not affected.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Values</p>
<div class="ulist">
<ul>
<li>
<p>Values are not affected.</p>
</li>
<li>
<p>Nested map literal keys are not affected.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>For example, the following map literal with namespace syntax:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">#:person{:first "Han"
         :last "Solo"
         :ship #:ship{:name "Millennium Falcon"
                      :model "YT-1300f light freighter"}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>is read as:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:person/first "Han"
 :person/last "Solo"
 :person/ship {:ship/name "Millennium Falcon"
               :ship/model "YT-1300f light freighter"}}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_sets"><a class="anchor" href="#_sets"></a>Sets</h3>
<div class="paragraph">
<p>Sets are zero or more forms enclosed in braces preceded by <code>#</code>: <code>#{:a :b :c}</code></p>
</div>
</div>
<div class="sect2">
<h3 id="_deftype_defrecord_and_constructor_calls_version_1_3_and_later"><a class="anchor" href="#_deftype_defrecord_and_constructor_calls_version_1_3_and_later"></a>deftype, defrecord, and constructor calls (version 1.3 and later):</h3>
<div class="ulist">
<ul>
<li>
<p>Calls to Java class, deftype, and defrecord constructors can be called using their fully qualified class name preceded by # and followed by a vector: <code>#my.klass_or_type_or_record[:a :b :c]</code><br></p>
</li>
<li>
<p>The elements in the vector part are passed <strong>unevaluated</strong> to the relevant constructor. defrecord instances can also be created with a similar form that takes a map instead: <code>#my.record{:a 1, :b 2}</code><br></p>
</li>
<li>
<p>The keyed values in the map are assigned <strong>unevaluated</strong> to the relevant fields in the defrecord. Any defrecord fields without corresponding entries in the literal map are assigned nil as their value. Any extra keyed values in the map literal are added to the resulting defrecord instance.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="macrochars"><a class="anchor" href="#macrochars"></a>Macro characters</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The behavior of the reader is driven by a combination of built-in constructs and an extension system called the read table. Entries in the read table provide mappings from certain characters, called macro characters, to specific reading behavior, called reader macros. Unless indicated otherwise, macro characters cannot be used in user symbols.</p>
</div>
<div class="sect2">
<h3 id="_quote"><a class="anchor" href="#_quote"></a>Quote (')</h3>
<div class="paragraph">
<p><code>'form</code> &#8658; <code>(quote form)</code></p>
</div>
</div>
<div class="sect2">
<h3 id="_character"><a class="anchor" href="#_character"></a>Character (\)</h3>
<div class="paragraph">
<p>As per above, yields a character literal. Example character literals are: <code>\a \b \c</code>.</p>
</div>
<div class="paragraph">
<p>The following special character literals can be used for common characters: <code>\newline</code>, <code>\space</code>, <code>\tab</code>, <code>\formfeed</code>, <code>\backspace</code>, and <code>\return</code>.</p>
</div>
<div class="paragraph">
<p>Unicode support follows Java conventions with support corresponding to the underlying Java version. A Unicode literal is of the form <code>\uNNNN</code>, for example <code>\u03A9</code> is the literal for Œ©.</p>
</div>
</div>
<div class="sect2">
<h3 id="_comment"><a class="anchor" href="#_comment"></a>Comment (;)</h3>
<div class="paragraph">
<p>Single-line comment, causes the reader to ignore everything from the semicolon to the end-of-line.</p>
</div>
</div>
<div class="sect2">
<h3 id="_deref"><a class="anchor" href="#_deref"></a>Deref (@)</h3>
<div class="paragraph">
<p><code>@form &#8658; (deref form)</code></p>
</div>
</div>
<div class="sect2">
<h3 id="_metadata"><a class="anchor" href="#_metadata"></a>Metadata (^)</h3>
<div class="paragraph">
<p>Metadata is a map associated with some kinds of objects: Symbols, Lists, Vector, Sets, Maps, tagged literals returning an IMeta, and record, type, and constructor calls. The metadata reader macro first reads the metadata and attaches it to the next form read (see <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/with-meta">with-meta</a> to attach meta to an object):<br>
<code>^{:a 1 :b 2} [1 2 3]</code> yields the vector <code>[1 2 3]</code> with a metadata map of <code>{:a 1 :b 2}</code>.<br></p>
</div>
<div class="paragraph">
<p>A shorthand version allows the metadata to be a simple symbol or string, in which case it is treated as a single entry map with a key of :tag and a value of the (resolved) symbol or string, e.g.:<br>
<code>^String x</code> is the same as <code>^{:tag java.lang.String} x</code><br></p>
</div>
<div class="paragraph">
<p>Such tags can be used to convey type information to the compiler.<br></p>
</div>
<div class="paragraph">
<p>Another shorthand version allows the metadata to be a keyword, in which case it is treated as a single entry map with a key of the keyword and a value of true, e.g.:<br>
<code>^:dynamic x</code> is the same as <code>^{:dynamic true} x</code><br></p>
</div>
<div class="paragraph">
<p>Metadata can be chained in which case they are merged from right to left.</p>
</div>
</div>
<div class="sect2">
<h3 id="_dispatch"><a class="anchor" href="#_dispatch"></a>Dispatch (#)</h3>
<div class="paragraph">
<p>The dispatch macro causes the reader to use a reader macro from another table, indexed by the character following</p>
</div>
<div class="ulist">
<ul>
<li>
<p>#{} - see Sets above</p>
</li>
<li>
<p>Regex patterns (#"pattern")</p>
<div class="paragraph">
<p>A regex pattern is read and <em>compiled at read time</em>. The resulting object is of type java.util.regex.Pattern. Regex strings do not follow the same escape character rules as strings. Specifically, backslashes in the pattern are treated as themselves (and do not need to be escaped with an additional backslash). For example, <code>(re-pattern "\\s*\\d+")</code> can be written more concisely as <code>#"\s*\d+"</code>.</p>
</div>
</li>
<li>
<p>Var-quote (#')</p>
<div class="paragraph">
<p><code>#'x</code> &#8658; <code>(var x)</code></p>
</div>
</li>
<li>
<p>Anonymous function literal (#())</p>
<div class="paragraph">
<p><code>#(&#8230;&#8203;)</code> &#8658; <code>(fn [args] (&#8230;&#8203;))</code><br>
where args are determined by the presence of argument literals taking the form %, %n or %&amp;. % is a synonym for %1, %n designates the nth arg (1-based), and %&amp; designates a rest arg. This is not a replacement for <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/fn">fn</a> - idiomatic use would be for very short one-off mapping/filter fns and the like. #() forms cannot be nested.</p>
</div>
</li>
<li>
<p>Ignore next form (#_)</p>
<div class="paragraph">
<p>The form following #_ is completely skipped by the reader. (This is a more complete removal than the <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/comment">comment</a> macro which yields nil).</p>
</div>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="syntax-quote"><a class="anchor" href="#syntax-quote"></a>Syntax-quote (`, note, the "backquote" character), Unquote (~) and Unquote-splicing (~@)</h3>
<div class="paragraph">
<p>For all forms other than Symbols, Lists, Vectors, Sets and Maps, `x is the same as 'x.<br></p>
</div>
<div class="paragraph">
<p>For Symbols, syntax-quote <em>resolves</em> the symbol in the current context, yielding a fully-qualified symbol (i.e. namespace/name or fully.qualified.Classname). If a symbol is non-namespace-qualified and ends with '#', it is resolved to a generated symbol with the same name to which '_' and a unique id have been appended. e.g. x# will resolve to x_123. All references to that symbol within a syntax-quoted expression resolve to the same generated symbol.<br></p>
</div>
<div class="paragraph">
<p>For Lists/Vectors/Sets/Maps, syntax-quote establishes a template of the corresponding data structure. Within the template, unqualified forms behave as if recursively syntax-quoted, but forms can be exempted from such recursive quoting by qualifying them with unquote or unquote-splicing, in which case they will be treated as expressions and be replaced in the template by their value, or sequence of values, respectively.<br></p>
</div>
<div class="paragraph">
<p>For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">user=&gt; (def x 5)
user=&gt; (def lst '(a b c))
user=&gt; `(fred x ~x lst ~@lst 7 8 :nine)
(user/fred user/x 5 user/lst a b c 7 8 :nine)</code></pre>
</div>
</div>
<div class="paragraph">
<p>The read table is currently not accessible to user programs.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_extensible_data_notation_edn"><a class="anchor" href="#_extensible_data_notation_edn"></a>extensible data notation (edn)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Clojure&#8217;s reader supports a superset of <a href="https://github.com/edn-format/edn">extensible data notation (edn)</a>. The edn specification is under active development, and complements this document by defining a subset of Clojure data syntax in a language-neutral way.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="tagged_literals"><a class="anchor" href="#tagged_literals"></a>Tagged Literals</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Tagged literals are Clojure&#8217;s implementation of edn <a href="https://github.com/edn-format/edn#tagged-elements">tagged elements</a>.</p>
</div>
<div class="paragraph">
<p>When Clojure starts, it searches for files named <code>data_readers.clj</code> or <code>data_readers.cljc</code> at the root of the classpath. Each such file must contain a Clojure map of symbols, like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{foo/bar my.project.foo/bar
 foo/baz my.project/baz}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The key in each pair is a tag that will be recognized by the Clojure reader. The value in the pair is the fully-qualified name of a <a href="vars">Var</a> which will be invoked by the reader to parse the form following the tag. For example, given the <code>data_readers.clj</code> file above, the Clojure reader would parse this form:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">#foo/bar [1 2 3]</code></pre>
</div>
</div>
<div class="paragraph">
<p>by invoking the Var <code>#'my.project.foo/bar</code> on the vector <code>[1 2 3]</code>. The data reader function is invoked on the form AFTER it has been read as a normal Clojure data structure by the reader. For your own data reader functions, you should report errors by throwing instances of RuntimeException with messages providing error information.</p>
</div>
<div class="paragraph">
<p>Reader tags without namespace qualifiers are reserved for Clojure. Default reader tags are defined in <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/default-data-readers">default-data-readers</a> but may be overridden in <code>data_readers.clj</code> / <code>data_readers.cljc</code> or by rebinding <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/%2Adata-readers%2A">*data-readers*</a>. If no data reader is found for a tag, the function bound in <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/%2Adefault-data-reader-fn%2A">*default-data-reader-fn*</a> will be invoked with the tag and value to produce a value. If *default-data-reader-fn* is nil (the default), a RuntimeException will be thrown.</p>
</div>
<div class="paragraph">
<p>If a <code>data_readers.cljc</code> is provided, it is read with the same semantics as any other cljc source file with reader conditionals.</p>
</div>
<div class="sect2">
<h3 id="_built_in_tagged_literals"><a class="anchor" href="#_built_in_tagged_literals"></a>Built-in tagged literals</h3>
<div class="paragraph">
<p>Clojure 1.4 introduced the <em>instant</em> and <em>UUID</em> tagged literals. Instants have the format <code>#inst "yyyy-mm-ddThh:mm:ss.fff+hh:mm"</code>.
NOTE: Some of the elements of this format are optional. See the code for details.
The default reader will parse the supplied string into a <code>java.util.Date</code> by default. For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(def instant #inst "2018-03-28T10:48:00.000")
(= java.util.Date (class instant))
;=&gt; true</code></pre>
</div>
</div>
<div class="paragraph">
<p>Since <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/%2Adata-readers%2A">*data-readers*</a> is a dynamic var that can be bound, you can replace the default reader with a different one. For example, <code>clojure.instant/read-instant-calendar</code> will parse the literal into a <code>java.util.Calendar</code>, while <code>clojure.instant/read-instant-timestamp</code> will parse it into a <code>java.util.Timestamp</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(binding [*data-readers* {'inst read-instant-calendar}]
  (= java.util.Calendar (class (read-string (pr-str instant)))))
;=&gt; true

(binding [*data-readers* {'inst read-instant-timestamp}]
  (= java.util.Timestamp (class (read-string (pr-str instant)))))
;=&gt; true</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>#uuid</code> tagged literal will be parsed into a <code>java.util.UUID</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(= java.util.UUID (class (read-string "#uuid \"3b8a31ed-fd89-4f1b-a00f-42e3d60cf5ce\"")))
;=&gt; true</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_default_data_reader_function"><a class="anchor" href="#_default_data_reader_function"></a>Default data reader function</h3>
<div class="paragraph">
<p>If no data reader is found when reading a tagged literal, the <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/%2Adefault-data-reader-fn%2A">*default-data-reader-fn*</a> is invoked. You can set your own default data reader function and the provided <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/tagged-literal">tagged-literal</a> function can be used to build an object that can store an unhandled literal. The object returned by <code>tagged-literal</code> supports keyword lookup of the <code>:tag</code> and <code>:form</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(set! *default-data-reader-fn* tagged-literal)

;; read #object as a generic TaggedLiteral object
(def x #object[clojure.lang.Namespace 0x23bff419 "user"])

[(:tag x) (:form x)]
;=&gt; [object [clojure.lang.Namespace 599782425 "user"]]</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_reader_conditionals"><a class="anchor" href="#_reader_conditionals"></a>Reader Conditionals</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Clojure 1.7 introduced a new extension (.cljc) for portable files that can be loaded by multiple Clojure platforms. The primary mechanism for managing platform-specific code is to isolate that code into a minimal set of namespaces, and then provide platform-specific versions (.clj/.class or .cljs) of those namespaces.</p>
</div>
<div class="paragraph">
<p>In cases where is not feasible to isolate the varying parts of the code, or where the code is mostly portable with only small platform-specific parts, 1.7 also introduced <em>reader conditionals</em>, which are supported only in cljc files and at the default REPL. Reader conditionals should be used sparingly and only when necessary.</p>
</div>
<div class="paragraph">
<p>Reader conditionals are a new reader dispatch form starting with <code>#?</code> or <code>#?@</code>. Both consist of a series of alternating features and expressions, similar to <code>cond</code>. Every Clojure platform has a well-known "platform feature" - <code>:clj</code>, <code>:cljs</code>, <code>:cljr</code>. Each condition in a reader conditional is checked in order until a feature matching the platform feature is found. The reader conditional will read and return that feature&#8217;s expression. The expression on each non-selected branch will be read but skipped. A well-known <code>:default</code> feature will always match and can be used to provide a default. If no branches match, no form will be read (as if no reader conditional expression was present).</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Implementors of non-official Clojure platforms should use a qualified keyword for their platform feature to avoid name collisions. Unqualified platform features are reserved for official platforms.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The following example will read as Double/NaN in Clojure, js/NaN in ClojureScript, and nil in any other platform:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">#?(:clj     Double/NaN
   :cljs    js/NaN
   :default nil)</code></pre>
</div>
</div>
<div class="paragraph">
<p>The syntax for <code>#?@</code> is exactly the same but the expression is expected to return a collection that can be spliced into the surrounding context, similar to unquote-splicing in syntax quote. Use of reader conditional splicing at the top level is not supported and will throw an exception. An example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">[1 2 #?@(:clj [3 4] :cljs [5 6])]
;; in clj =&gt;        [1 2 3 4]
;; in cljs =&gt;       [1 2 5 6]
;; anywhere else =&gt; [1 2]</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/read">read</a> and <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/read-string">read-string</a> functions optionally take a map of options as a first argument. The current feature set and reader conditional behavior can be set in the options map with these keys and values:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">  :read-cond - :allow to process reader conditionals, or
               :preserve to keep all branches
  :features - persistent set of feature keywords that are active</code></pre>
</div>
</div>
<div class="paragraph">
<p>An example of how to test ClojureScript reader conditionals from Clojure:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(read-string
  {:read-cond :allow
   :features #{:cljs}}
  "#?(:cljs :works! :default :boo)")
;; :works!</code></pre>
</div>
</div>
<div class="paragraph">
<p>However, note that the Clojure reader will <em>always</em> inject the platform feature :clj as well. For platform-agnostic reading, see <a href="https://github.com/clojure/tools.reader">tools.reader</a>.</p>
</div>
<div class="paragraph">
<p>If the reader is invoked with <code>{:read-cond :preserve}</code>, the reader conditional and non-executed branches will be preserved, as data, in the returned form. The reader-conditional will be returned as a type that supports keyword retrieval for keys with <code>:form</code> and a <code>:splicing?</code> flag. Read but skipped tagged literals will be returned as a type that supports keyword retrieval for keys with <code>:form</code> and <code>:tag</code> keys.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">(read-string
  {:read-cond :preserve}
  "[1 2 #?@(:clj [3 4] :cljs [5 6])]")
;; [1 2 #?@(:clj [3 4] :cljs [5 6])]</code></pre>
</div>
</div>
<div class="paragraph">
<p>The following functions can also be used as predicates or constructors for these types:<br>
<a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/reader-conditional%3F">reader-conditional?</a> <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/reader-conditional">reader-conditional</a> <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/tagged-literal%3F">tagged-literal?</a> <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/tagged-literal">tagged-literal</a></p>
</div>
</div>
</div>


<div class="clj-prev-next-container">
  
  <a href="repl_and_main" class="clj-next-link">REPL and main&nbsp;<span class="clj-prevnext-link-icon">&#xeab8;</span></a>
</div>

    </div>
  </div>
</div>

  <div class="w-section clj-footer">
    <div class="w-container clj-footer-links-container">
      <div class="w-row">
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Community</h6>
            <a href="/community/resources" class="clj-footer-link">Resources</a>
            <a href="/community/contributing" class="clj-footer-link">Contributing</a>
            <a href="/community/companies" class="clj-footer-link">Companies</a>
            <a href="/community/contributing_site" class="clj-footer-link">Site</a>
          <h6 class="clj-footer-heading">Legal</h6>
            <a href="/community/license" class="clj-footer-link">License</a>
            <a href="/privacy" class="clj-footer-link">Privacy Policy</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Documentation</h6>
            <a href="/about/rationale" class="clj-footer-link">Overview</a>
            <a href="/reference/documentation" class="clj-footer-link">Reference</a>
            <a href="/api/api" class="clj-footer-link">API</a>
            <a href="/guides/guides" class="clj-footer-link">Guides</a>
            <a href="/community/libraries" class="clj-footer-link">Libraries &amp; Tools</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Updates</h6>
            <a href="/news/news" class="clj-footer-link">News</a>
            <a href="/community/events" class="clj-footer-link">Events</a>
          <h6 class="clj-footer-heading">ETC</h6>
            <a href="https://www.youtube.com/user/ClojureTV" class="clj-footer-link">ClojureTV</a>
            <a href="/community/books" class="clj-footer-link">Books</a>
            <a href="/community/swag" class="clj-footer-link">Swag</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Code</h6>
            <a href="/releases/downloads" class="clj-footer-link">Releases</a>
            <a href="https://github.com/clojure/clojure/" class="clj-footer-link">Source</a>
            <a href="http://clojurescript.org" class="clj-footer-link">ClojureScript</a>
            <a href="/about/clojureclr" class="clj-footer-link">ClojureCLR</a>
        </div>
      </div>
    </div>
    <div class="w-container clj-footer-legal-container">
      <div class="w-clearfix clj-footer-legal">
        <div class="clj-footer-logo">&nbsp;</div>
        <div class="clj-footer-legal-links">
          <div class="clj-footer-copyright">Copyright 2008-2022 Rich Hickey | <a class="clj-footer-sub-link" href="/privacy">Privacy Policy</a><br/>Logo &amp; site design by Tom Hickey
          </div>
          <div class="clj-footer-designed-by">Published 2023-12-18<br/>Update <a class="clj-footer-sub-link" href="https://github.com/clojure/clojure-site/blob/master/content/reference/reader.adoc">this page</a>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script type="text/javascript" src="/js/webflow.js"></script>
  <script type="text/javascript" src="/js/highlight.pack.js"></script>
  <script>
  $(document).ready( (event) => {
    $('pre code').each((index, obj) => {
      $(obj).addClass($(obj).attr("data-lang"));
      hljs.highlightBlock(obj);
    });
  });
  </script>
  <!--[if lte IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif]-->
</body>
</html>
