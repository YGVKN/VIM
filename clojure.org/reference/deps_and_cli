<!DOCTYPE html>
<!-- This site was created in Webflow. http://www.webflow.com-->
<!-- Last Published: Fri Nov 13 2015 01:48:45 GMT+0000 (UTC) -->
<html lang="en" data-wf-site="56414d6fc8c27cad0f4e12e7" data-wf-page="5643ac587b1f28dc58ed6b89">
<head>
  <meta charset="utf-8">
  <title>Clojure - Deps and CLI Reference</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="generator" content="Webflow">
  <meta name="google-site-verification" content="a30CDuC9UBifM7EL575LK9a4TEE6mNfWbKqXIoSZChg" />
  <meta name="google-site-verification" content="iXqpntr4CN3JRM1sVm5D_YzZw8bFRizBaTVycwqii2E" />
  <meta name="keywords" content="clojure,programming" />
  <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,600;1,300;1,400;1,600&family=PT+Serif:ital@0;1&&family=Source+Code+Pro:wght@500&display=swap">
  <link rel="stylesheet" type="text/css" href="/css/normalize.css">
  <link rel="stylesheet" type="text/css" href="/css/webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/clojureorg.webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/asciidoctor-mod.css">
  <link type="text/css" href="/css/default-en.css" rel="stylesheet">
  <link type="text/css" href="/css/default.css" rel="stylesheet">
  <link type="text/css" href="/css/search-result.css" rel="stylesheet">
  <link rel="alternate" type="application/atom+xml" title="News" href="/feed.xml" />
  <script type="text/javascript" src="/js/modernizr.js"></script>
  <link rel="shortcut icon" type="image/x-icon" href="/images/clojure-logo-icon-32.png">
  <link rel="apple-touch-icon" href="/images/clojure-logo-icon-256.png">
  <!-- Matomo -->
  <script>
    var _paq = window._paq = window._paq || [];
    /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
      var u="https://cognitect.matomo.cloud/";
      _paq.push(['setTrackerUrl', u+'matomo.php']);
      _paq.push(['setSiteId', '9']);
      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
      g.async=true; g.src='//cdn.matomo.cloud/cognitect.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);
    })();
  </script>
<!-- End Matomo Code -->
  <script type="text/javascript">
    function searchClj(obj) {
      let e = document.getElementById("searchType");
      document.getElementById("hiddenSearch").value=e.value;
    }
  </script>
</head>
<body>
  <div data-collapse="none" data-animation="default" data-duration="400" data-contain="1" class="w-nav clj-navbar">
    <div class="w-container">
      <a href="/index" class="w-nav-brand w-clearfix clj-logo-container"><img width="60" src="/images/clojure-logo-120b.png" class="clj-logo" alt="Clojure logo">
        <div class="clj-logo-text">Clojure</div>
      </a>
      <nav role="navigation" class="w-nav-menu clj-nav-menu"><a href="/about/rationale" class="w-nav-link clj-nav-link">Overview</a><a href="/reference/documentation" class="w-nav-link clj-nav-link">Reference‚Äç</a><a href="/api/api" class="w-nav-link clj-nav-link">API</a><a href="/releases/downloads" class="w-nav-link clj-nav-link">Releases</a><a href="/guides/guides" class="w-nav-link clj-nav-link">Guides</a><a href="/community/success_stories" class="w-nav-link clj-nav-link">Community</a><a href="/dev/dev" class="w-nav-link clj-nav-link">Dev</a><a href="/news/news" class="w-nav-link clj-nav-link">News</a><a href="#" data-ix="search-click-trigger" class="w-nav-link clj-nav-link clj-nav-search">&#xed11;</a>
      </nav>
      <div class="w-nav-button clj-menu-button">
        <div class="w-icon-nav-menu"></div>
      </div>
    </div>
  </div>
  <div data-ix="hide-search" class="w-section clj-search-section">
    <div class="w-container">
      <div class="w-form clj-search-form-wrapper">
        <form id="wf-form-Search-Form" name="wf-form-Search-Form" action="https://duckduckgo.com/" method="get" onSubmit="searchClj(this)">
          <div class="w-row">
            <div class="w-col w-col-6 w-col-small-6">
              <input id="hiddenSearch" type="hidden" name="sites" value="www.clojure.org">
              <input name="q" id="q" type="text" placeholder="Search clojure.org reference, guides, and API" title="Search text" autofocus="autofocus" class="w-input clj-search-input">
            </div>
            <div class="w-col w-col-3 w-col-small-3 clj-search-type">
              <select name="searchType" id="searchType" class="w-select clj-search-type">
                <option value="www.clojure.org">clojure.org</option>
                <option value="ask.clojure.org">ask.clojure.org</option>
              </select>
            </div>
            <div class="w-col w-col-3 w-col-small-3">
              <input type="submit" value="Search" class="w-button clj-search-submit">
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

<div class="w-section clj-content-section">
  <div class="w-container">
    <div class="clj-section-nav-container">
      <div data-collapse="small" data-animation="default" data-duration="200" data-contain="1" class="w-nav clj-section-navbar">
        <div class="w-container">
          <nav role="navigation" class="w-nav-menu clj-section-nav-menu">
            <a href="reader" class="w-nav-link clj-section-nav-item-link">The Reader</a>
            <a href="repl_and_main" class="w-nav-link clj-section-nav-item-link">The REPL and main</a>
            <a href="evaluation" class="w-nav-link clj-section-nav-item-link">Evaluation</a>
            <a href="special_forms" class="w-nav-link clj-section-nav-item-link">Special Forms</a>
            <a href="macros" class="w-nav-link clj-section-nav-item-link">Macros</a>
            <a href="other_functions" class="w-nav-link clj-section-nav-item-link">Other Functions</a>
            <a href="data_structures" class="w-nav-link clj-section-nav-item-link">Data Structures</a>
            <a href="datatypes" class="w-nav-link clj-section-nav-item-link">Datatypes</a>
            <a href="sequences" class="w-nav-link clj-section-nav-item-link">Sequences</a>
            <a href="transients" class="w-nav-link clj-section-nav-item-link">Transients</a>
            <a href="transducers" class="w-nav-link clj-section-nav-item-link">Transducers</a>
            <a href="multimethods" class="w-nav-link clj-section-nav-item-link">Multimethods and Hierarchies</a>
            <a href="protocols" class="w-nav-link clj-section-nav-item-link">Protocols</a>
            <a href="metadata" class="w-nav-link clj-section-nav-item-link">Metadata</a>
            <a href="namespaces" class="w-nav-link clj-section-nav-item-link">Namespaces</a>
            <a href="libs" class="w-nav-link clj-section-nav-item-link">Libs</a>
            <a href="vars" class="w-nav-link clj-section-nav-item-link">Vars and Environments</a>
            <a href="refs" class="w-nav-link clj-section-nav-item-link">Refs and Transactions</a>
            <a href="agents" class="w-nav-link clj-section-nav-item-link">Agents</a>
            <a href="atoms" class="w-nav-link clj-section-nav-item-link">Atoms</a>
            <a href="reducers" class="w-nav-link clj-section-nav-item-link">Reducers</a>
            <a href="java_interop" class="w-nav-link clj-section-nav-item-link">Java Interop</a>
            <a href="compilation" class="w-nav-link clj-section-nav-item-link">Compilation and Class Generation</a>
            <a href="other_libraries" class="w-nav-link clj-section-nav-item-link">Other Libraries</a>
            <a href="lisps" class="w-nav-link clj-section-nav-item-link">Differences with Lisps</a>
            <a href="deps_and_cli" class="w-nav-link clj-section-nav-item-link">Deps and CLI</a>
            <a href="deps_edn" class="w-nav-link clj-section-nav-item-link">deps.edn</a>
          </nav>
          <div data-ix="toggle-section-nav-icon" class="w-nav-button w-clearfix clj-section-nav-toggle">
            <div class="clj-section-nav-text">Deps and CLI Reference</div>
            <div class="clj-section-nav-icon-closed">&#xeab2;</div>
            <div data-ix="init-hide-section-nav-icon-open" class="clj-section-nav-icon-open">&#xeab9;</div>
          </div>
        </div>
      </div>
    </div>
    <div class="clj-content-container">

      <h1>Deps and CLI Reference</h1>

      <div id="preamble">
<div class="sectionbody">
<div id="toc" class="toc">
<div id="toctitle" class="title">Table of Contents</div>
<ul class="sectlevel0">
<li><a href="#_rationale">Rationale</a></li>
<li><a href="#_overview">Overview</a>
<ul class="sectlevel1">
<li><a href="#_start_a_repl">Start a REPL</a></li>
<li><a href="#_execute_a_function">Execute a function</a></li>
<li><a href="#_running_a_main_or_script">Running a main or script</a></li>
<li><a href="#_running_a_tool">Running a tool</a></li>
</ul>
</li>
<li><a href="#_operation">Operation</a></li>
<li><a href="#_deps_edn">deps.edn</a>
<ul class="sectlevel1">
<li><a href="#_paths">Paths</a></li>
<li><a href="#_dependencies">Dependencies</a></li>
<li><a href="#_aliases">Aliases</a></li>
<li><a href="#_other_keys">Other keys</a></li>
</ul>
</li>
<li><a href="#_basis_and_classpath">Basis and classpath</a>
<ul class="sectlevel1">
<li><a href="#_resolve_deps">resolve-deps</a></li>
<li><a href="#_make_classpath_map">make-classpath-map</a>
<ul class="sectlevel2">
<li><a href="#_classpath_ordering">Classpath ordering</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#_clojure_cli_usage">Clojure CLI usage</a>
<ul class="sectlevel1">
<li><a href="#deps_sources">deps.edn sources</a></li>
<li><a href="#_classpath_caching">Classpath caching</a></li>
<li><a href="#_replace_project_environment_tool">Replace project environment (tool)</a></li>
<li><a href="#_merging_deps_edn">Merging deps.edn</a></li>
<li><a href="#_resolve_deps_modifiers">Resolve deps modifiers</a></li>
<li><a href="#_make_classpath_modifiers">Make classpath modifiers</a></li>
<li><a href="#_prepare_jvm_environment">Prepare JVM environment</a></li>
<li><a href="#_execution">Execution</a>
<ul class="sectlevel2">
<li><a href="#_main_execution">Main execution</a></li>
<li><a href="#_prepare_for_execution">Prepare for execution</a></li>
</ul>
</li>
<li><a href="#_other_programs">Other programs</a>
<ul class="sectlevel2">
<li><a href="#_dependency_tree_or_list">Dependency tree or list</a></li>
<li><a href="#_alias_list">Alias list</a></li>
<li><a href="#_help_functions">Help functions</a></li>
<li><a href="#prep">Prep libs</a></li>
<li><a href="#find-versions">Find versions</a></li>
<li><a href="#_local_maven_install">Local Maven install</a></li>
<li><a href="#_generate_maven_pom">Generate Maven pom</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#_procurers">Procurers</a>
<ul class="sectlevel1">
<li><a href="#_maven">Maven</a>
<ul class="sectlevel2">
<li><a href="#_modifying_the_default_repositories">Modifying the default repositories</a></li>
<li><a href="#_maven_authenticated_repos">Maven authenticated repos</a></li>
<li><a href="#_maven_s3_repos">Maven S3 repos</a></li>
<li><a href="#_maven_proxies">Maven proxies</a></li>
<li><a href="#_maven_http_headers">Maven HTTP headers</a></li>
</ul>
</li>
<li><a href="#_git">Git</a>
<ul class="sectlevel2">
<li><a href="#_coord_attributes">Coord attributes</a></li>
<li><a href="#_version_selection">Version selection</a></li>
<li><a href="#_configuration_and_debugging">Configuration and debugging</a></li>
</ul>
</li>
<li><a href="#_clojure_cli_installers">Clojure CLI installers</a></li>
</ul>
</li>
<li><a href="#tool_install">Tool installation and invocation</a>
<ul class="sectlevel1">
<li><a href="#_using_tool_aliases">Using tool aliases</a></li>
<li><a href="#_using_named_tools">Using named tools</a>
<ul class="sectlevel2">
<li><a href="#_find_versions">Find versions</a></li>
<li><a href="#_tool_installation">Tool installation</a></li>
<li><a href="#_tool_usage">Tool usage</a></li>
<li><a href="#_invoke_a_tool_by_name">Invoke a tool by name</a></li>
</ul>
</li>
<li><a href="#_best_practices_for_tool_authors">Best practices for tool authors</a></li>
<li><a href="#function_protocol">Function execution protocol</a></li>
</ul>
</li>
<li><a href="#_command_line_reference">Command line reference</a>
<ul class="sectlevel1">
<li><a href="#_arg_map_keys">Arg map keys</a></li>
<li><a href="#namespaces">Namespace resolution</a></li>
<li><a href="#_keys_and_key_paths">Keys and key paths</a></li>
<li><a href="#_trailing_map_argument">Trailing map argument</a></li>
<li><a href="#quoting">Quoting keys and values</a></li>
<li><a href="#env_vars">Environment variables</a></li>
<li><a href="#_glossary">Glossary</a></li>
</ul>
</li>
<li><a href="#_tools">Tools</a></li>
</ul>
</div>
</div>
</div>
<h1 id="_rationale" class="sect0"><a class="anchor" href="#_rationale"></a>Rationale</h1>
<div class="paragraph">
<p>Clojure "endeavors to be a general-purpose language suitable in those areas where Java is suitable" (from <a href="xref/../../about/rationale">Rationale</a>). To effectively target the JVM platform, Clojure needs to provide ready access to Java libraries, ideally in a way suited for dynamic development. In practice, this means meeting the JVM platform in two places:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>the classpath used when invoking JVM processes (and/or URLClassLoaders)</p>
</li>
<li>
<p>transitive dependency download and resolution from providers like Maven</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Clojure build tools have traditionally taken the approach of wrapping the Maven ecosystem to gain access to Java libraries. However, they have also forced this approach on Clojure code as well, requiring a focus on artifacts that must be built and deployed (which Clojure does not require). This approach has created friction for Clojure developers, making it hard to e.g. work with libs not yet publishing artifacts, work on speculative changes w/o artifacts or across multiple libs, or give control to a 3rd party to manage shared dependencies.</p>
</div>
<div class="paragraph">
<p>To this end Clojure provides:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/clojure/tools.deps">tools.deps</a> - a library providing an API for resolving dependency graphs and building classpaths that can utilize both Maven and other providers of code or artifacts</p>
</li>
<li>
<p>Clojure CLI (Command Line Interface) - <code>clojure</code> and <code>clj</code> allow users at the terminal to declare dependencies, assemble classpaths, and launch Clojure programs with data</p>
</li>
<li>
<p>System-specific installers for downloading the Clojure CLI, improving the "Getting Started" experience</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In addition to this reference, also see:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="xref/../../../guides/install_clojure">Clojure CLI installation guide</a></p>
</li>
<li>
<p><a href="xref/../../../releases/tools">CLI release info</a></p>
</li>
<li>
<p><a href="xref/../../../guides/deps_and_cli">Deps and CLI guide</a></p>
</li>
</ul>
</div>
<h1 id="_overview" class="sect0"><a class="anchor" href="#_overview"></a>Overview</h1>
<div class="paragraph">
<p>You use the Clojure CLI (<code>clj</code> or <code>clojure</code>) to run Clojure programs on the JVM, e.g. to start a REPL or invoke a specific function with data. The Clojure CLI will configure the JVM process by defining a classpath (with desired libraries), an execution environment (JVM options), the main class, and args.</p>
</div>
<div class="paragraph">
<p>Using a deps.edn file (or files), you tell Clojure where your source code resides and what libraries you need. Clojure will then calculate the full set of required libraries and a classpath, caching expensive parts of this process for better performance.</p>
</div>
<div class="paragraph">
<p>The internal steps of the Clojure CLI, as well as the Clojure functions you intend to run, are parameterized by data structures, often maps. Shell command lines are not optimized for passing nested data, so instead you will put the data structures in your deps edn file and refer to them on the command line via <em>aliases</em> - keywords that name data structures.</p>
</div>
<div class="paragraph">
<p><code>clj</code> and <code>clojure</code> differ in that <code>clj</code> has extra support for use as a REPL in a terminal, and should be preferred unless you don&#8217;t want that support, then use <code>clojure</code>. The invocation structure is the same for both:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code>clj     [clj-opt*] [exec-opt]
clojure [clj-opt*] [exec-opt]</code></pre>
</div>
</div>
<div class="sect1">
<h2 id="_start_a_repl"><a class="anchor" href="#_start_a_repl"></a>Start a REPL</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To run a REPL, invoke <code>clj</code> without any exec-opt:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code>$ clj
Clojure 1.10.3
user=&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_execute_a_function"><a class="anchor" href="#_execute_a_function"></a>Execute a function</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Use the following exec-opt to invoke a function that takes a map:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code>clojure [clj-opt*] -X[aliases] [a/fn] [kpath v]* kv-map?</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>-X</code> is configured with an arg map with <code>:exec-fn</code> and <code>:exec-args</code> keys, and stored under an alias in <code>deps.edn</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">;; deps.edn
{:aliases
 {:my-fn
  {:exec-fn my.qualified/fn
   :exec-args {:my {:data 123}
               :config 456}}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>To invoke, pass the name of the alias to <code>-X</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code>clj -X:my-fn</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can supply additional keys, or override values stored in the deps.edn file by passing pairs of key-path and value. The key-path should either be a single key or a vector of keys to refer to a nested key (as with <code>assoc-in</code>). Each key-path will be used to <code>assoc-in</code> to the original <code>:exec-args</code> map, overriding the value there.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code># Top key override
clj -X:my-fn :config 789

# Nested key override
clj -X:my-fn '[:my :data]' 789</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>See the later section on <a href="#quoting">"Quoting keys and values"</a> for more details on how to properly quote edn values on the command line.</p>
</div>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>If you want to execute an arbitrary function, you can pass it on the command instead, along with pairs of key-path and value:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code>clj -X my.qualified/fn :config 789</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Alias arg maps can also include a default namespace or namespace aliases for resolving the function (see <a href="#namespaces">"Namespace resolution"</a> for more details).</p>
</div>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_running_a_main_or_script"><a class="anchor" href="#_running_a_main_or_script"></a>Running a main or script</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You can use the <code>-M</code> exec-opt to invoke clojure.main, which supports calling a namespace with a <code>-main</code> function or a Clojure script:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code>clojure [clj-opt*] -M[aliases] [main-opts]</code></pre>
</div>
</div>
<div class="paragraph">
<p>The -M aliases are pulled from <code>deps.edn</code> and combined to form an arg map. The arg map can modify the classpath or supply main options.</p>
</div>
<div class="paragraph">
<p>See the <a href="repl_and_main">clojure.main</a> documentation for more details on main options.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_running_a_tool"><a class="anchor" href="#_running_a_tool"></a>Running a tool</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Use the <code>-T</code> exec-opt to invoke a tool that does not use the project classpath:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code>clojure [clj-opt*] -T[name|aliases] a/fn [kpath v]* kv-map?</code></pre>
</div>
</div>
<div class="paragraph">
<p>When running a tool, the project&#8217;s <code>:deps</code> and <code>:paths</code> are not used. The function is invoked with a map in the same way as -X execution, built from :exec-args if found in aliases and key/vals provided on the command line.</p>
</div>
<div class="paragraph">
<p>Tools are installed and referenced by a simpler local name, instead of via an alias. See <a href="deps_and_cli#tool_install">tool installation</a> for more details.</p>
</div>
</div>
</div>
<h1 id="_operation" class="sect0"><a class="anchor" href="#_operation"></a>Operation</h1>
<div class="paragraph">
<p>When you execute the Clojure CLI, there are a series of steps performed to prepare and execute your command. This section is an overview of those steps, see later sections for how to modify those steps in a variety of ways.</p>
</div>
<div class="paragraph">
<p><strong>Locate deps edn sources</strong></p>
</div>
<div class="paragraph">
<p>Configuration is stored in one or more "deps edn" maps. These are edn maps with the following primary top-level keys:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:deps</code> - map of lib (symbol) to coordinate</p>
</li>
<li>
<p><code>:paths</code> - vector of project source paths</p>
</li>
<li>
<p><code>:aliases</code> - map of alias name to alias data</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The Clojure CLI looks for 4 potential <a href="deps_and_cli#deps_sources">deps edn sources</a>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Root - part of the clj installation (a resource in the tools.deps library)</p>
</li>
<li>
<p>User - cross-project configuration (typically tools), usually found at <code>~/.clojure/deps.edn</code></p>
</li>
<li>
<p>Project - the <code>deps.edn</code> in the current directory</p>
</li>
<li>
<p>External - a deps edn map passed on the command line</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><strong>Check cache</strong></p>
</div>
<div class="paragraph">
<p>The next several steps of this execution can be skipped if we have already computed the classpath and cached it. Classpath and the runtime basis files are cached in the current directory under <code>.cpcache/</code>. The key is based on the contents of the deps.edn files and some of the command arguments passed and several files will be cached, most importantly the classpath and runtime basis.</p>
</div>
<div class="paragraph">
<p>If the key is found, and the cached files are newer than all deps.edn sources, they will be used and execution begins immediately.</p>
</div>
<div class="paragraph">
<p><strong>Replace project environment ("tool")</strong></p>
</div>
<div class="paragraph">
<p>When you execute a tool in the context of your project, the tool can use its own paths and/or deps in place of the project&#8217;s paths and/or deps.</p>
</div>
<div class="paragraph">
<p><strong>Merge sources</strong></p>
</div>
<div class="paragraph">
<p>All deps edn sources are merged into a single master edn file in the order listed above - root, user, project (possibly with tool replacements), external. This merged deps will be included in the runtime basis and used after this point.</p>
</div>
<div class="paragraph">
<p>The merge is essentially <code>merge-with merge</code>, except for the <code>:paths</code> key, where only the last <code>:paths</code> found is used (they replace, not combine).</p>
</div>
<div class="paragraph">
<p><strong>Resolve dependencies</strong></p>
</div>
<div class="paragraph">
<p>Starting from the master edn&#8217;s merged :deps, the full transitive expansion of the dependency tree is computed. Dependency sources (procurers) are used to obtain metadata and other dependency information. At the completion of this step, all libraries to use in the execution have been found and downloaded to local files if needed.</p>
</div>
<div class="paragraph">
<p>See <a href="dep_expansion">dep expansion</a> for more details on the dep expansion algorithm.</p>
</div>
<div class="paragraph">
<p><strong>Prep libs</strong></p>
</div>
<div class="paragraph">
<p>Libs in the transitive expansion will be checked for whether they are source libs that require prepping. If so, and prep is requested, prep the libs. If unprepped libs remain, throw and stop.</p>
</div>
<div class="paragraph">
<p><strong>Make classpath</strong></p>
</div>
<div class="paragraph">
<p>JVM execution relies on computing the classpath for the execution. The classpath will consist of the <code>:paths</code> in the merged <code>deps.edn</code> and the locations of all resolved dependencies.</p>
</div>
<div class="paragraph">
<p><strong>Prepare JVM environment</strong></p>
</div>
<div class="paragraph">
<p>JVM arguments may either be passed on the command line (with <code>-J</code>) or by using data stored in an alias under <code>:jvm-opts</code> and passed with <code>-X</code> or <code>-A</code> or <code>-M</code></p>
</div>
<div class="paragraph">
<p><strong>Execute command</strong></p>
</div>
<div class="paragraph">
<p>Finally the command is executed - see the Overview above for the execution options. The already computed (or loaded from cache) classpath, JVM environment, and main arguments if relevant are used in the execution.</p>
</div>
<h1 id="_deps_edn" class="sect0"><a class="anchor" href="#_deps_edn"></a>deps.edn</h1>
<div class="paragraph">
<p>The configuration file format (in <code>deps.edn</code> files) is an edn map with top-level keys <code>:deps</code>, <code>:paths</code>, and <code>:aliases</code>, plus provider-specific keys for configuring dependency sources.</p>
</div>
<div class="sect1">
<h2 id="_paths"><a class="anchor" href="#_paths"></a>Paths</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Paths are declared in a top level key <code>:paths</code> and are a vector of string paths or alias names. Relative paths are resolved in relation to the directory containing the deps.edn (the project root). These source paths will be added to the classpath. Source paths should be at or under the project root directory (where <code>deps.edn</code> is located).</p>
</div>
<div class="paragraph">
<p>Example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:paths ["src"]}</code></pre>
</div>
</div>
<div class="paragraph">
<p>If used, alias names should refer to a path vector in the alias data:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:paths [:clj-paths :resource-paths]
 :aliases
 {:clj-paths ["src/clj" "src/cljc"]
  :resource-paths ["resources"]}}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_dependencies"><a class="anchor" href="#_dependencies"></a>Dependencies</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dependencies are declared in deps.edn with a top level key <code>:deps</code> - a map from library to coordinate. Libraries are symbols of the form <code>&lt;groupID&gt;/&lt;artifactId&gt;</code>. To indicate a Maven classifier, use <code>&lt;groupId&gt;/&lt;artifactId&gt;$&lt;classifier&gt;</code>.</p>
</div>
<div class="paragraph">
<p>Coordinates can take several forms depending on the coordinate type:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Maven coordinate attributes:</p>
<div class="ulist">
<ul>
<li>
<p><code>:mvn/version</code> (required) - string of Maven version</p>
</li>
<li>
<p>Note: <code>:classifier</code> is not supported - add as part of lib name as specified above in Maven docs</p>
</li>
</ul>
</div>
</li>
<li>
<p>Local project attributes:</p>
<div class="ulist">
<ul>
<li>
<p><code>:local/root</code> (required) - directory path (will auto detect whether a deps or pom project, also see <code>:deps/manifest</code>)</p>
</li>
</ul>
</div>
</li>
<li>
<p>Local jar attributes:</p>
<div class="ulist">
<ul>
<li>
<p><code>:local/root</code> (required) - path to jar file</p>
</li>
<li>
<p>If the jar includes a pom.xml file, it will be used to find transitive deps</p>
</li>
</ul>
</div>
</li>
<li>
<p>Git coordinate:</p>
<div class="ulist">
<ul>
<li>
<p><code>:git/url</code> (optional if inferred from lib name, otherwise required, see Git config section)</p>
</li>
<li>
<p><code>:git/tag</code> (optional) indicates the semantics of the sha (<code>:tag</code> also supported for backwards compatibility), must refer to same <code>:git/sha</code></p>
</li>
<li>
<p><code>:git/sha</code> (required) if tag provided, can be prefix sha, otherwise should be full sha (<code>:sha</code> also supported for backwards compatibility)</p>
</li>
</ul>
</div>
</li>
<li>
<p>Common coordinate attributes (all optional):</p>
<div class="ulist">
<ul>
<li>
<p><code>:exclusions</code> - vector of lib symbols that are excluded as transitive deps from this coord</p>
</li>
<li>
<p><code>:deps/manifest</code> - specifies the project manifest type and overrides auto detection, useful values are <code>:deps</code>, <code>:pom</code>. (Other values are <code>:mvn</code>, and <code>:jar</code> but these don&#8217;t need to be specified.)</p>
</li>
<li>
<p><code>:deps/root</code> - relative directory path within a file based dep to search for the manifest file</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:deps
 {;; example maven dep
  org.clojure/tools.reader {:mvn/version "1.1.1"}

  ;; example git dep
  io.github.sally/awesome {:tag "v1.2.3" :sha "123abcd"}

  ;; example local project
  my.dev/project {:local/root "../project"}

  ;; example local jar
  my.driver/jar {:local/root "../libs/driver.jar"}
 }}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_aliases"><a class="anchor" href="#_aliases"></a>Aliases</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Aliases give a name to a data structure that can be used either by the Clojure CLI itself or other consumers of deps.edn. They are defined in the <code>:aliases</code> section of the config file. These Clojure CLI subprocesses use data which can be read from aliases:</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_other_keys"><a class="anchor" href="#_other_keys"></a>Other keys</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Some other top-level keys you may encounter:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:mvn/repos</code> - a map of Maven repository names to maps of repo info (like <code>:url</code>)</p>
</li>
<li>
<p><code>:mvn/local-repo</code> - a string path to a directory to use as the local Maven cache</p>
</li>
<li>
<p><code>:tools/usage</code> - exec argmap for a deps.edn-based tool</p>
</li>
<li>
<p><code>:deps/prep-lib</code> - a map describing how this source-based lib should be prepped</p>
</li>
</ul>
</div>
</div>
</div>
<h1 id="_basis_and_classpath" class="sect0"><a class="anchor" href="#_basis_and_classpath"></a>Basis and classpath</h1>
<div class="paragraph">
<p>The core of the tools.deps library is a process to take a merged deps.edn file, arg maps for the resolve-deps and make-classpath-map steps, and produce the "runtime basis", or "basis" for short. The basis is a superset of the deps.edn file also containing those args, the lib map, and the classpath map.</p>
</div>
<div class="paragraph">
<p>The JVM classpath consists of a series of roots, either directory paths or the path to a jar file. Classes (and Clojure files) map via package or namespace to a path relative to a classpath root. For example, the <code>java.lang.String</code> class can be found at path <code>java/lang/String.class</code> and the <code>clojure.set</code> Clojure namespace may be found at paths <code>clojure/set.class</code> (for AOT), <code>clojure/set.clj</code>, or <code>clojure/set.cljc</code>. When the JVM needs to load one of these files it searches each root for the relative path and loads it when found.</p>
</div>
<div class="paragraph">
<p>We divide the process of building a classpath into two primary operations: <code>resolve-deps</code> and <code>make-classpath-map</code>.</p>
</div>
<div class="sect1">
<h2 id="_resolve_deps"><a class="anchor" href="#_resolve_deps"></a>resolve-deps</h2>
<div class="sectionbody">
<div class="paragraph">
<p><strong><code>(resolve-deps deps args-map)</code></strong></p>
</div>
<div class="paragraph">
<p><code>resolve-deps</code> takes an initial map of required dependencies and a map of args that modify the resolution process. It builds a full graph of transitive dependencies, resolves any version differences, and flattens that graph to a full list of libraries to be included on the classpath.</p>
</div>
<div class="paragraph">
<p>The deps from the merged deps.edn is a map of library to coordinate. The library is (in Maven terms) the groupId and artifactId, which are sufficient to locate the desired project. The coordinate is used to describe a particular version that is being requested from a particular provider (like Maven or git).</p>
</div>
<div class="paragraph">
<p>For example, this deps map specifies a (Maven-based) dependency:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{org.clojure/core.cache {:mvn/version "0.6.5"}}</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>resolve-deps</code> expands these dependencies to include all transitive dependencies, cut cycles, resolve version differences, download required artifacts from the provider, and produce a <strong>lib map</strong> of the flattened set of all needed dependencies and where to find their artifacts:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{org.clojure/core.cache        {:mvn/version "0.6.5",
                                :deps/manifest :mvn,
                                :paths [".../core.cache-0.6.5.jar"]}
 org.clojure/data.priority-map {:mvn/version "0.0.7",
                                :deps/manifest :mvn,
                                :dependents [org.clojure/core.cache],
                                :paths [".../data.priority-map-0.0.7.jar"]}
 ... }</code></pre>
</div>
</div>
<div class="paragraph">
<p>The lib map lists all libraries, their selected coordinates, the <code>:paths</code> on disk, and a list of dependents that caused it to be included. Here you can see that <code>data.priority-map</code> was included as a dependency of core.cache.</p>
</div>
<div class="paragraph">
<p>The second <code>args-map</code> is a map of optional modifications to the standard expansion to account for common use cases: adding extra dependencies, overriding deps, and default deps. These can be used separately or together, or not at all:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:extra-deps { ... }
 :override-deps { ... }
 :default-deps { ... }}</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>:extra-deps</code> is the most common modification - it allows you to optionally add extra dependencies to the base dependency set. The value is a map of library to coordinate:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:extra-deps {criterium/criterium {:mvn/version "0.4.4"}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>:override-deps</code> overrides the coordinate version chosen by the version resolution to force a particular version instead. This also takes a map of library to coordinate:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:override-deps {org.clojure/clojure {:mvn/version "1.9.0"}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>:default-deps</code> provides a set of default coordinate versions to use if no coordinate is specified. The default deps can be used across a set of shared projects to act as a dependency management system:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:default-deps {org.clojure/core.cache {:mvn/version "0.6.4"}}}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_make_classpath_map"><a class="anchor" href="#_make_classpath_map"></a>make-classpath-map</h2>
<div class="sectionbody">
<div class="paragraph">
<p><strong><code>(make-classpath-map lib-map paths args-map)</code></strong></p>
</div>
<div class="paragraph">
<p>The <code>make-classpath-map</code> step takes the lib map (the result of <code>resolve-deps</code>), the internal source paths of the project <code>["src"]</code>, an args-map of optional modifications, and produces a classpath string for use in the JVM.</p>
</div>
<div class="paragraph">
<p>The args-map includes support for modifications to be applied while making the classpath: adding extra paths, and overriding the location of libraries specified in the lib map. These modifications can be used separately or together or not at all in a map like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:extra-paths [ ... ]
 :classpath-overrides { ... }}</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>:extra-paths</code> is used to include source paths in addition to your standard source paths, for example to include directories of test source:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:extra-paths ["test" "resources"]}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that external paths should be at or under the root directory of the project (location of the <code>deps.edn</code> file).</p>
</div>
<div class="paragraph">
<p><code>:classpath-overrides</code> specify a location to pull a dependency that overrides the path found during dependency resolution, for example to replace a dependency with a local debug version. Many of these use cases are ones where you would be tempted to prepend the classpath to "override" something else.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:classpath-overrides
 {org.clojure/clojure "/my/clojure/target"}}</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_classpath_ordering"><a class="anchor" href="#_classpath_ordering"></a>Classpath ordering</h3>
<div class="paragraph">
<p>Classpaths will be created in the following order, which is intended to be reproducible:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <code>:extra-paths</code> in the order specified once classpath modifiers are merged and applied</p>
</li>
<li>
<p>The <code>:paths</code> in the order specified once classpath modifiers are merged and applied</p>
</li>
<li>
<p>All dependency and transitive dependency libs, sorted by:</p>
<div class="ulist">
<ul>
<li>
<p>Depth from root</p>
</li>
<li>
<p>Alphabetical by group/artifact</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<h1 id="_clojure_cli_usage" class="sect0"><a class="anchor" href="#_clojure_cli_usage"></a>Clojure CLI usage</h1>
<div class="sect1">
<h2 id="deps_sources"><a class="anchor" href="#deps_sources"></a>deps.edn sources</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The Clojure CLI will use the following deps.edn map sources, in this order:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Root - found in the installation of clj (or as a resource in tools.deps)</p>
</li>
<li>
<p>User - cross-project configuration (typically tools)</p>
<div class="ulist">
<ul>
<li>
<p>Locations used in this order:</p>
<div class="ulist">
<ul>
<li>
<p>If <code>$CLJ_CONFIG</code> is set, then use <code>$CLJ_CONFIG</code> (explicit override)</p>
</li>
<li>
<p>If <code>$XDG_CONFIG_HOME</code> is set, then use <code>$XDG_CONFIG_HOME/clojure</code> (Freedesktop conventions)</p>
</li>
<li>
<p>Else use <code>$HOME/.clojure</code> (most common)</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>Project - the <code>deps.edn</code> in the current directory</p>
</li>
<li>
<p>External - a <code>deps.edn</code> map passed on the command line</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The deps.edn sources can be modified or inspected by the following options:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>-Sverbose</code> - print all source locations</p>
</li>
<li>
<p><code>-Sdeps</code> - pass the config data on the command line</p>
</li>
<li>
<p><code>-Srepro</code> - omit the user deps source (other sources will be used if found)</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_classpath_caching"><a class="anchor" href="#_classpath_caching"></a>Classpath caching</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The cached classpath file is used for execution when:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>It exists and</p>
</li>
<li>
<p>It is newer than all <code>deps.edn</code> sources</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Classpath and basis files are cached in a directory computed as follows:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>If there is a project deps.edn</p>
<div class="ulist">
<ul>
<li>
<p>Use <code>./.cpcache</code></p>
</li>
</ul>
</div>
</li>
<li>
<p>Else (no project deps.edn)</p>
<div class="ulist">
<ul>
<li>
<p>If <code>$CLJ_CACHE</code> is set, then use <code>$CLJ_CACHE</code> (explicit override)</p>
</li>
<li>
<p>If <code>$XDG_CACHE_HOME</code> is set, then use <code>$XDG_CACHE_HOME/clojure</code> (Freedesktop conventions)</p>
</li>
<li>
<p>Else use <code>config_dir/.cpcache</code> (see deps.edn sources for config_dir logic, usually <code>~/.clojure</code>)</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>A hash is computed based on the config file paths, the resolve-aliases, and the classpath aliases.</p>
</div>
<div class="paragraph">
<p>Files cached (if needed):</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>&lt;hash&gt;.cp</code> - a classpath string, the output of <code>make-classpath-map</code></p>
</li>
<li>
<p><code>&lt;hash&gt;.jvm</code> - jvm options for main execution</p>
</li>
<li>
<p><code>&lt;hash&gt;.main</code> - main options for main execution</p>
</li>
<li>
<p><code>&lt;hash&gt;.basis</code> - the runtime basis, passed to the program</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Caching can be modified by the following options:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>-Sforce</code> - ignore cache and force recomputation</p>
</li>
<li>
<p><code>-Scp CP</code> - don&#8217;t use cache or compute, use the provided classpath instead</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_replace_project_environment_tool"><a class="anchor" href="#_replace_project_environment_tool"></a>Replace project environment (tool)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <code>tool</code> process is used when executing a tool that should not use the project classpath environment. This process takes the project deps.edn and the following modifier args and replaces them (if provided) before the project deps is merged:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:replace-deps</code> - a deps map from lib to coordinate of deps to REPLACE the project <code>:deps</code></p>
</li>
<li>
<p><code>:replace-paths</code> a collection of string paths to REPLACE project <code>:paths</code> (note these should be under the project root)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>This tool map should be provided as an alias in one of the deps sources and provided to the Clojure CLI using -A (for REPL invocation), -X (for function execution), or -M (for clojure.main execution). Multiple aliases can be provided by concatentating the alias names.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_merging_deps_edn"><a class="anchor" href="#_merging_deps_edn"></a>Merging deps.edn</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <code>deps.edn</code> files found from the source locations (with modifications from any options) are merged to form one master deps map. The merge is done in the order above root/user/project/config, last one wins. The operation is essentially <code>merge-with merge</code>, except for the <code>:paths</code> key, where only the last one found is used (they are not combined).</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_resolve_deps_modifiers"><a class="anchor" href="#_resolve_deps_modifiers"></a>Resolve deps modifiers</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The resolve-deps modifiers are provided in a map that was described in a prior section:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:extra-deps</code> - a deps map from lib to coordinate of deps to add to the deps</p>
</li>
<li>
<p><code>:override-deps</code> - a deps map from lib to coordinate of override versions to use</p>
</li>
<li>
<p><code>:default-deps</code> - a deps map from lib to coordinate of versions to use if none is found</p>
</li>
<li>
<p>If multiple alias maps with these keys are activated, all of them are merge-with merged</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The resolve-deps args should be provided as an alias in one of the deps sources and provided to the Clojure CLI using -A (for REPL invocation), -X (for function execution), or -M (for clojure.main execution). Multiple aliases can be provided by concatentating the alias names.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_make_classpath_modifiers"><a class="anchor" href="#_make_classpath_modifiers"></a>Make classpath modifiers</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The make-classpath-map modifiers are provided in a map that was described in a prior section:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:extra-paths</code> - a collection of string paths to add to <code>:paths</code> (should be in the project)</p>
</li>
<li>
<p><code>:classpath-overrides</code> - a map of lib to string path to replace the location of the lib</p>
</li>
<li>
<p>If multiple maps with these keys are activated, <code>:extra-paths</code> concatenate and <code>:classpath-overrides</code> merge-with merge</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The resolve-deps args should be provided as an alias in one of deps sources and provided to the Clojure CLI using -A (for REPL invocation), -X (for function execution), or -M (for clojure.main execution). Multiple aliases can be provided by concatentating the alias names.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_prepare_jvm_environment"><a class="anchor" href="#_prepare_jvm_environment"></a>Prepare JVM environment</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The JVM has many options and some programs also take configuration via Java system properties. JVM options can be passed on the command line for any execution specifier by prefixing with <code>-J</code>. If multiple options are specified, each must be prefixed.</p>
</div>
<div class="paragraph">
<p>Additionally, main execution can take a map with key <code>:jvm-opts</code>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:jvm-opts</code> - a collection of string JVM options</p>
</li>
<li>
<p>If multiple maps with these keys are activated, <code>:jvm-opts</code> concatenate</p>
</li>
<li>
<p>If -J JVM options are also specified on the command line, they are concatenated after the alias options</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>This map is stored in alias data and provided to the Clojure CLI using -A (for REPL invocation), -X (for function execution), or -M (for clojure.main execution).  Multiple aliases can be provided by concatentating the alias names.</p>
</div>
<div class="paragraph">
<p>If JVM options are provided in the <code>JAVA_OPTS</code> environment variable, these will be included first on the command line (note: these options are not part of the command cache and may vary between executions).</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_execution"><a class="anchor" href="#_execution"></a>Execution</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_main_execution"><a class="anchor" href="#_main_execution"></a>Main execution</h3>
<div class="paragraph">
<p>One additional option for main execution is a map with key <code>:main-opts</code>:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:main-opts</code> - a collection of clojure.main options</p>
</li>
<li>
<p>If multiple maps with these keys are activated, only the last one will be used</p>
</li>
<li>
<p>If command line clojure.main arguments are supplied on the command line, they are concatenated after the last main alias map</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>This map is stored in alias data and provided to the Clojure CLI using <code>-M:an-alias</code>. Multiple aliases can be provided by concatentating the alias names.</p>
</div>
</div>
<div class="sect2">
<h3 id="_prepare_for_execution"><a class="anchor" href="#_prepare_for_execution"></a>Prepare for execution</h3>
<div class="paragraph">
<p>The <code>-P</code> flag can be used with any other execution mode to "prepare" but not execute. Importantly, this flag will cause the Clojure CLI to resolve deps, download libraries, make and cache classpaths. This may be useful in containers, continuous integration systems, etc where an environment can be prepared to execute and do necessary network activity first, and then later execute without that activity.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_other_programs"><a class="anchor" href="#_other_programs"></a>Other programs</h2>
<div class="sectionbody">
<div class="paragraph">
<p>There are some options that can be provided to <code>clj</code> that short circuit normal execution and run an alternate program instead:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>-Sdescribe</code> - print environment and command parsing info as data</p>
</li>
<li>
<p><code>-Spath</code> - compute classpath and echo to stdout only</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The <code>:deps</code> alias is built into the root deps.edn and provides a default namespace with several additional programs described in the next sections.</p>
</div>
<div class="sect2">
<h3 id="_dependency_tree_or_list"><a class="anchor" href="#_dependency_tree_or_list"></a>Dependency tree or list</h3>
<div class="paragraph">
<p>These programs are provided to see the dependencies used by your program:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>-X:deps list</code> - print dependency list and license information</p>
</li>
<li>
<p><code>-X:deps tree</code> - print dependency tree (also see <a href="dep_expansion#_tree_printing">tree printing</a>)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The <code>list</code> view shows a sorted list of all dependencies and selected versions and their licenses (if it can be found programatically). See <a href="https://clojure.github.io/tools.deps.cli/clojure.tools.deps.cli.api-api.html#clojure.tools.deps.cli.api/list">API docs</a> for more.</p>
</div>
<div class="paragraph">
<p>The <code>tree</code> view shows all dependencies in the <a href="dep_expansion">dependency expansion</a> tree and explains why a version was selected or not. See <a href="https://clojure.github.io/tools.deps.cli/clojure.tools.deps.cli.api-api.html#clojure.tools.deps.cli.api/tree">API docs</a> for more.</p>
</div>
</div>
<div class="sect2">
<h3 id="_alias_list"><a class="anchor" href="#_alias_list"></a>Alias list</h3>
<div class="paragraph">
<p>This program is used to print all aliases available in the current deps environment:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>-X:deps aliases</code> - print all aliases available in the current deps environment</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>See <a href="https://clojure.github.io/tools.deps.cli/clojure.tools.deps.cli.api-api.html#clojure.tools.deps.cli.api/aliases">API docs</a> for more.</p>
</div>
</div>
<div class="sect2">
<h3 id="_help_functions"><a class="anchor" href="#_help_functions"></a>Help functions</h3>
<div class="paragraph">
<p>The <code>help/doc</code> and <code>help/dir</code> functions introspect how a tool can be used. Because the <code>:deps</code> alias does not include the project classpath, these are not currently useful when executing functions in your own project.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>-X:deps help/doc</code> - show the doc strings and parameter lists of the functions given with key <code>:ns</code> or function specified by an additional key <code>:fn</code>; if neither given then <code>:ns-default</code> is used</p>
</li>
<li>
<p><code>-X:deps help/dir</code> - prints the public functions in namespace provided with key <code>:ns</code> or <code>:ns-default</code> if not given</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Example for listing the set of functions in the <code>:ns-default</code> for the built in <code>tools</code> tool:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">clojure -A:deps -Ttools help/dir</code></pre>
</div>
</div>
<div class="paragraph">
<p>Example for listing the set of functions in an alias:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">clojure -X:deps:my-alias help/dir</code></pre>
</div>
</div>
<div class="paragraph">
<p>Print the docstrings for the help namespace itself (note that <code>help</code> is defined in the <code>:ns-aliases</code> map for <code>:deps</code>):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">clojure -X:deps help/doc :ns help</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Also see: <a href="https://clojure.github.io/tools.deps.cli/clojure.tools.deps.cli.help-api.html">API docs</a></p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="prep"><a class="anchor" href="#prep"></a>Prep libs</h3>
<div class="paragraph">
<p>Source libs with Clojure source can immediately be added to the classpath of a project using it. However, some source libs require some preparation before they can be added, for example due to needing Java compilation, or copying / replacing resource files, etc. The Clojure CLI will now detect projects that need preparation and prevent the program from being run from source unless the prep step has been completed.</p>
</div>
<div class="paragraph">
<p>If your library needs preparation, add the <code>:deps/prep-lib</code> key to your <code>deps.edn</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:paths ["src" "target/classes"]
 :deps/prep-lib
 {:ensure "target/classes"
  :alias :build
  :fn compile-java}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The keys under <code>:deps/prep-lib</code> are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:ensure</code> - directory existence determines whether prep is needed (if it exists, prep has been done)</p>
</li>
<li>
<p><code>:alias</code> - alias to invoke with <code>-T</code> during prep</p>
</li>
<li>
<p><code>:fn</code> - function to invoke with <code>-T</code> during prep</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Thus, the deps.edn should also have an alias that can execute the fn specified. See the <a href="xref/../../../guides/tools_build">tools.build Guide</a> for how to use tools.build to define a build script with an invokable function.</p>
</div>
<div class="paragraph">
<p>If you add this git library as a dependency and try to run a program, the Clojure CLI will download it, detect that it needs preparation, and that it has not been prepared ("target/classes" path does not exist), and exit.</p>
</div>
<div class="paragraph">
<p>To find and "prepare" libs in the dependency tree you can use the <code>prep</code> tool provided with the built-in <code>:deps</code> alias:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -X:deps prep</code></pre>
</div>
</div>
<div class="paragraph">
<p>The prep task will find all libs in the dependency expansion and look for libs that are source libs, need prep (based on their <code>:deps/prep-lib</code> key), and are not yet prepped (based on the <code>:ensure</code> dir in their <code>:deps/prep-lib</code> map). Those libs will run the command specified there by alias and function, as if:  <code>clj -T:&lt;alias&gt; &lt;fn&gt;</code>.</p>
</div>
<div class="paragraph">
<p>Once a library has been prepped, it does not need to be prepped again by other users of this git library version.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Should you use a prep step that compiles your Clojure code? Generally, no. All users of this git library on a machine will share the prepared classpath created by the prep step. The choice of Clojure compiler and dependent libraries is better left to each application making using of this lib. For more on using dev-time compilation, see the <a href="xref/../../guides/dev_startup_time">Dev Startup Time</a> guide.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="find-versions"><a class="anchor" href="#find-versions"></a>Find versions</h3>
<div class="paragraph">
<p>To search for available versions of a Maven or git lib use the <code>find-versions</code> tool provided with the built-in <code>:deps</code> alias:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -X:deps find-versions ...</code></pre>
</div>
</div>
<div class="paragraph">
<p>The params that can be provided are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:lib</code> - git or Maven lib name. The git url will be automatically constructed from the git library name. For example, a <code>:git/lib</code> of <code>io.github.clojure/tools.deps.graph</code> will construct the git url <code><a href="https://github.com/clojure/tools.deps.graph.git" class="bare">https://github.com/clojure/tools.deps.graph.git</a></code>. For Maven, use the Maven lib name like <code>org.clojure/tools.deps.graph</code>.</p>
</li>
<li>
<p><code>:tool</code> - a tool name if the tool has already been installed</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><code>find-versions</code> will print the git or Maven coordinates, one per line, to the console.</p>
</div>
</div>
<div class="sect2">
<h3 id="_local_maven_install"><a class="anchor" href="#_local_maven_install"></a>Local Maven install</h3>
<div class="paragraph">
<p>The <code>-X:deps mvn-install</code> program is provided with the Clojure CLI for convenience and can be executed with <code>-X</code> to install a jar into your local Maven cache.</p>
</div>
<div class="paragraph">
<p>The install params include the following options:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="plain-text">Required:
:jar - path to jar file, use pom inside jar by default

To supply an explicit pom file:
:pom - path to pom file (used instead of pom inside the jar)

To generate a minimal pom file:
:lib - qualified symbol like my.org/lib
:version - string
:classifier - string

Other options:
:local-repo - path to local repo (default = ~/.m2/repository)</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can pass overrides on the command line for these as needed:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -X:deps mvn-install :jar '"/path/to.jar"'</code></pre>
</div>
</div>
<div class="paragraph">
<p>As mentioned above, edn strings must be in double quotes, and then single-quoted for the shell.</p>
</div>
<div class="paragraph">
<p>A pom file must be either provided explicitly, generated from :lib/:version, or found inside the .jar file (the default).</p>
</div>
</div>
<div class="sect2">
<h3 id="_generate_maven_pom"><a class="anchor" href="#_generate_maven_pom"></a>Generate Maven pom</h3>
<div class="paragraph">
<p>Use the following program to generate or update an existing pom.xml with the deps and paths from your project:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>-X:deps mvn-pom</code> - generate (or update an existing) pom.xml with deps and paths</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>See <a href="https://clojure.github.io/tools.deps.cli/clojure.tools.deps.cli.api-api.html#clojure.tools.deps.cli.api/mvn-pom">API docs</a> for more.</p>
</div>
</div>
</div>
</div>
<h1 id="_procurers" class="sect0"><a class="anchor" href="#_procurers"></a>Procurers</h1>
<div class="paragraph">
<p>Dependency coordinates are interpreted by procurers, which understand a particular coordinate type and know how to find dependencies and download artifacts for a library. The Clojure CLI currently suports the folllowing procurers: <code>mvn</code>,  <code>local</code>, and <code>git</code>. The underlying tools.deps library supports procurer extensions when used as a library.</p>
</div>
<div class="paragraph">
<p>The coordinate attributes determine which procurer is used. In general, most procurer attributes are qualified per procurer type (there are some historical exceptions). Procurer-independent attributes use the <code>deps</code> qualifier.</p>
</div>
<div class="paragraph">
<p>Some procurers may also look for configuration attributes at the root of the deps.edn configuration map using the the same qualifier.</p>
</div>
<div class="sect1">
<h2 id="_maven"><a class="anchor" href="#_maven"></a>Maven</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The Maven procurer uses the qualifier <code>mvn</code> and is used to retrieve library artifacts from <a href="https://maven.apache.org/">Maven repositories</a>, the standard repository manager in the Java ecosystem. Libraries are downloaded as .jar files and stored in the Maven local repository cache (located in ~/.m2/repository by default). Other JVM-based tools may also use this cache.</p>
</div>
<div class="paragraph">
<p>Maven coordinates have the following attributes:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:mvn/version</code> (required) - Maven version string</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Maven libraries are located in Maven repositories using "Maven coordinates", typically the groupId, artifactId, and version (sometimes also abbreivated as GAV). In deps.edn, the library name is parsed as <code>groupId/artifactId</code> and the version is taken from <code>:mvn/version</code>.</p>
</div>
<div class="paragraph">
<p>For example, this deps.edn file:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:deps {org.clojure/clojure {:mvn/version "1.11.1"}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>declares a dependency on a Maven artifact with:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>groupId = org.clojure</p>
</li>
<li>
<p>artifactId = clojure</p>
</li>
<li>
<p>version = 1.11.1</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Some Maven artifacts also have a "classifier", which is a variant of a particular artifact. In the Maven procurer, classifiers are included at the end of the lib name, separated by a <code>$</code> in this format: <code>groupId/artifactId$classifier</code>.</p>
</div>
<div class="paragraph">
<p>Currently, only <code>jar</code> artifacts are supported. Support for other artifact types (particularly Bill of Materials poms) may be added in the future.</p>
</div>
<div class="paragraph">
<p>The <code>mvn</code> procurer will look for two configuration keys at the root of the deps.edn:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:mvn/repos</code> - map of repository name to repository descriptor, a map of:</p>
<div class="ulist">
<ul>
<li>
<p><code>:url</code> - required, url string</p>
</li>
<li>
<p><code>:releases</code> - a <a href="https://maven.apache.org/pom.html#repositories">repository policy</a> map for releases:</p>
<div class="ulist">
<ul>
<li>
<p><code>:enabled</code> - boolean, default=true</p>
</li>
<li>
<p><code>:update</code> - a flag for how often to check the repo for updates, one of <code>:daily</code> (default), <code>:always</code>, <code>:never</code>, or an interval in minutes (integer)</p>
</li>
<li>
<p><code>:checksum</code> - a flag for checksum validation, one of <code>:warn</code> (default), <code>:fail</code>, <code>:ignore</code></p>
</li>
</ul>
</div>
</li>
<li>
<p><code>:snapshots</code> - repository policy map for snapshots (same structure as <code>:releases</code>)</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>:mvn/local-repo</code> - a path (string) to the local repo cache. If none supplied, Maven uses <code>~/.m2/repository</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The root deps.edn configures these default Maven repos:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:mvn/repos
 {"central" {:url "https://repo1.maven.org/maven2/"}
  "clojars" {:url "https://clojars.org/repo"}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>While specifying repository name and url is typically all that is required, full repository policy maps can also be provided:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:mvn/repos
 {"my-releases" {:url "https://example.com/releases"
                 :snapshots {:enabled false}
                 :releases {:enabled true
                            :update :daily
                            :checksum :fail}}}}</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_modifying_the_default_repositories"><a class="anchor" href="#_modifying_the_default_repositories"></a>Modifying the default repositories</h3>
<div class="paragraph">
<p>The <code>:mvn/repos</code> map is <code>merge-with</code> <code>merge</code> across the deps.edn sources, so you can modify the default repositories by specifying a new definition or remove it by specifying <code>nil</code>.</p>
</div>
<div class="paragraph">
<p>tools.deps guarantees that the <code>"central"</code> and <code>"clojars"</code> repositories will be checked first, in that order, for Maven libraries. The lookup order of other repositories is undefined.</p>
</div>
</div>
<div class="sect2">
<h3 id="_maven_authenticated_repos"><a class="anchor" href="#_maven_authenticated_repos"></a>Maven authenticated repos</h3>
<div class="paragraph">
<p>For Maven deps in authenticated repositories, existing Maven infrastructure is used to convey credentials.</p>
</div>
<div class="paragraph">
<p>In your <code>~/.m2/settings.xml</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="xml">&lt;settings&gt;
  ...
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;my-auth-repo&lt;/id&gt;
      &lt;username&gt;zango&lt;/username&gt;
      &lt;password&gt;123&lt;/password&gt;
    &lt;/server&gt;
    ...
  &lt;/servers&gt;
  ...
&lt;/settings&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Then in your <code>deps.edn</code> include a repo with a name matching the server id (here <code>my-auth-repo</code>):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:deps
 {authenticated/dep {:mvn/version "1.2.3"}}
 :mvn/repos
 {"my-auth-repo" {:url "https://my.auth.com/repo"}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Then just refer to your dependencies as usual in the <code>:deps</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_maven_s3_repos"><a class="anchor" href="#_maven_s3_repos"></a>Maven S3 repos</h3>
<div class="paragraph">
<p>The <code>mvn</code> procurer also supports connecting to public and private Maven repositories hosted in <a href="https://aws.amazon.com/s3/">AWS S3</a>. This is particularly useful when accessing private Maven repositories from within an application hosted on AWS.</p>
</div>
<div class="paragraph">
<p>Add a <code>:mvn/repos</code> that includes the s3 repository root:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:deps
 {my/library {:mvn/version "0.1.2"}}
 :mvn/repos
 {"my-private-repo" {:url "s3://my-bucket/maven/releases"}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>S3 buckets are specific to the AWS region they were created in. The s3 transporter will attempt to determine the bucket&#8217;s location. If that doesn&#8217;t work, you can specify the bucket region in the url explicitly: <code>"s3://my-bucket/maven/releases?region=us-west-2"</code>.</p>
</div>
<div class="paragraph">
<p>For authenticated repos, AWS credentials can be set in the <code>~/.m2/settings.xml</code> on a per-server basis or will be loaded ambiently from the AWS credential chain (env vars, etc). The repository name in <code>deps.edn</code> must match the server id in <code>settings.xml</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="xml">&lt;settings&gt;
  ...
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;my-private-repo&lt;/id&gt;
      &lt;username&gt;AWS_ACCESS_KEY_HERE&lt;/username&gt;
      &lt;password&gt;AWS_SECRET_ACCESS_KEY_HERE&lt;/password&gt;
    &lt;/server&gt;
    ...
  &lt;/servers&gt;
  ...
&lt;/settings&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>AWS S3 credentials can be set in the environment using one of these mechanisms:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Set the environment variables <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code>.</p>
</li>
<li>
<p>Create a default profile in the AWS credentials file <code>~/.aws/credentials</code> (older <code>~/.aws/config</code> also supported).</p>
</li>
<li>
<p>Create a named profile in the AWS credentials file and set the environment variable <code>AWS_PROFILE</code> with its name.</p>
</li>
<li>
<p>Amazon ECS container and instance profile credentials should also work, but have not been tested.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>For more information, most of the advice in <a href="https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html">this AWS document</a> describes how credentials are located. Note however that the Java system properties options will NOT work with the Clojure CLI (but would work if using the tools.deps library directly).</p>
</div>
</div>
<div class="sect2">
<h3 id="_maven_proxies"><a class="anchor" href="#_maven_proxies"></a>Maven proxies</h3>
<div class="paragraph">
<p>In environments where the internet is accessed via a proxy, existing Maven configuration in <code>~/.m2/settings.xml</code> is used to set up the proxy connection:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="xml">&lt;settings&gt;
  ...
  &lt;proxies&gt;
    &lt;proxy&gt;
      &lt;id&gt;my-proxy&lt;/id&gt;
      &lt;host&gt;proxy.my.org&lt;/host&gt;
      &lt;port&gt;3128&lt;/port&gt;
      &lt;nonProxyHosts&gt;localhost|*.my.org&lt;/nonProxyHosts&gt;
    &lt;/proxy&gt;
  &lt;/proxies&gt;
  ...
&lt;/settings&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Refer to the Maven <a href="https://maven.apache.org/guides/mini/guide-proxies.html">Guide to using proxies</a> for further details.</p>
</div>
</div>
<div class="sect2">
<h3 id="_maven_http_headers"><a class="anchor" href="#_maven_http_headers"></a>Maven HTTP headers</h3>
<div class="paragraph">
<p>For adding custom headers to outgoing HTTP requests, existing Maven configuration in <code>~/.m2/settings.xml</code> is used.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="xml">&lt;settings&gt;
  ...
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;my-token-repo&lt;/id&gt;
      &lt;configuration&gt;
        &lt;httpHeaders&gt;
          &lt;property&gt;
            &lt;name&gt;Private-Token&lt;/name&gt;
            &lt;value&gt;abc123&lt;/value&gt;
          &lt;/property&gt;
        &lt;/httpHeaders&gt;
      &lt;/configuration&gt;
    &lt;/server&gt;
    ...
  &lt;/servers&gt;
  ...
&lt;/settings&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>The server id in <code>settings.xml</code> must match the repository name in <code>deps.edn</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:mvn/repos
 {"my-token-repo" {:url "https://my.auth.com/repo"}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>This mechanism is used by repositories that authenticate using a token, rather than by username and password.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_git"><a class="anchor" href="#_git"></a>Git</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <code>git</code> procurer supports direct use of source-based libs hosted in Git repositories. Git libs are downloaded by default to the <code>~/.gitlibs</code> directory. The working tree is checked out and cached for each sha included as a dependency.</p>
</div>
<div class="sect2">
<h3 id="_coord_attributes"><a class="anchor" href="#_coord_attributes"></a>Coord attributes</h3>
<div class="paragraph">
<p>To specify a git lib as a dependency, two pieces of information must be known - the Git repo url and a specific sha. Using movable references like branch names is not supported.</p>
</div>
<div class="paragraph">
<p>Git coordinates have the following attributes:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:git/url</code> - optional, Git url (may be inferred from lib name, see below)</p>
</li>
<li>
<p><code>:git/sha</code> - required, either a full 40-char sha or a sha prefix can be provided in combination with a tag (<code>:sha</code> is also accepted for backwards compatibility)</p>
</li>
<li>
<p><code>:git/tag</code> - optional, git tag name (may be used only in combination with a <code>:git/sha</code>)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The git url must either be provided or inferred from the lib name. If provided, the <code>:git/url</code> takes precedence. Lib to url convention is as follows:</p>
</div>
<table class="tableblock frame-all grid-all stretch table">
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Lib format</th>
<th class="tableblock halign-left valign-top">Inferred <code>:git/url</code></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">io.github.ORG/PROJECT</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>"https://github.com/ORG/PROJECT.git"</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">com.github.ORG/PROJECT</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>"https://github.com/ORG/PROJECT.git"</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">io.gitlab.ORG/PROJECT</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>"https://gitlab.com/ORG/PROJECT.git"</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">com.gitlab.ORG/PROJECT</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>"https://gitlab.com/ORG/PROJECT.git"</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">io.bitbucket.ORG/PROJECT</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>"https://bitbucket.org/ORG/PROJECT.git"</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">org.bitbucket.ORG/PROJECT</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>"https://bitbucket.org/ORG/PROJECT.git"</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">io.beanstalkapp.ORG/PROJECT</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>"https://ORG.git.beanstalkapp.com/PROJECT.git"</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">com.beanstalkapp.ORG/PROJECT</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>"https://ORG.git.beanstalkapp.com/PROJECT.git"</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">ht.sr.ORG/PROJECT</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>"https://git.sr.ht/~ORG/PROJECT"</code></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>The git sha is either provided as a full sha in <code>:git/sha</code> or as a full or prefix <code>:git/sha</code> in combination with a <code>:git/tag</code> (to provide semantic version context). If a <code>:git/tag</code> is provided, the full sha it refers to must match the full sha included or implied by <code>:git/sha</code>.</p>
</div>
<div class="paragraph">
<p>This is an example deps.edn including two valid git deps, the first with inferred git url, git tag, and sha prefix, and the second with explicit git url and full sha:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:deps
 {;; implied git url, tag + sha prefix
  io.github.clojure/tools.deps.graph {:git/tag "v1.1.68" :git/sha "6971bb4"}

  ;; explicit git url, full sha
  org.clojure/tools.build {:git/url "https://github.com/clojure/tools.build.git"
                           :git/sha "ba1a2bf421838802e7bdefc541b41f57582e53b6"}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The supported git url protocols are https and ssh. https repos will be accessed anonymously and require no additional authentication information. This approach is recommended for public repos. ssh repos may be either public or private.</p>
</div>
<div class="paragraph">
<p>For more information on creating keys and using the ssh-agent to manage your ssh identities, GitHub provides excellent info:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" class="bare">https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/</a></p>
</li>
<li>
<p><a href="https://help.github.com/articles/working-with-ssh-key-passphrases/" class="bare">https://help.github.com/articles/working-with-ssh-key-passphrases/</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Either a full <code>:git/sha</code> must be provided or a <code>:git/tag</code> with at least a prefix <code>:git/sha</code>. The latter is preferred as it provides both a meaningful version (via the tag) and the means to verify the tag has not been moved (via the sha). The CLI will verify that both the tag and prefix sha point to the same full sha commit, and error if not.</p>
</div>
</div>
<div class="sect2">
<h3 id="_version_selection"><a class="anchor" href="#_version_selection"></a>Version selection</h3>
<div class="paragraph">
<p>When selecting a version from between sha A and sha B where B has A as an ancestor, then B will be preferred (the "most descendant" one). If A and B do not have an ancestor/descendant relationship (commits in parallel branches for example), this is an error and classpath construction will fail.</p>
</div>
</div>
<div class="sect2">
<h3 id="_configuration_and_debugging"><a class="anchor" href="#_configuration_and_debugging"></a>Configuration and debugging</h3>
<div class="paragraph">
<p>The <code>git</code> procurer shells out to command-line git (and ssh). git &gt;= 2.5 is required. In general, if access works at the command line, it should work via the Clojure CLI. Git is expected to be installed and by default, <code>git</code> is expected to be on the path. For ssh access, refer to documentation for your system (typically you will register your ssh keys in <code>~/.ssh/id_rsa</code>).</p>
</div>
<div class="paragraph">
<p>The following environment variables can be set to control git usage:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>GITLIBS</code> - the path to the gitlibs storage directory (default = <code>~/.gitlibs</code>)</p>
</li>
<li>
<p><code>GITLIBS_COMMAND</code> - the command to run for git access (default = <code>git</code>)</p>
</li>
<li>
<p><code>GITLIBS_DEBUG</code> - set <code>true</code> to see a log of the actual git commands being run and their output (default = <code>false</code>)</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_clojure_cli_installers"><a class="anchor" href="#_clojure_cli_installers"></a>Clojure CLI installers</h2>
<div class="sectionbody">
<div class="paragraph">
<p>For CLI installation, see the instructions in the <a href="xref/../../guides/install_clojure">Install Clojure</a> guide.</p>
</div>
</div>
</div>
<h1 id="tool_install" class="sect0"><a class="anchor" href="#tool_install"></a>Tool installation and invocation</h1>
<div class="paragraph">
<p>A tool is a collection of functions delivered in a lib. Tool functions are run in a separate process with their own classpath, independent of the project classpath. Tool functions take a single map argument and are invoked with -T (same key value arg syntax as -X style execution).</p>
</div>
<div class="paragraph">
<p>Tools are described either via an alias (which can be shared by others using the project), or by a local tool name installed on your machine (which can be shared across projects).</p>
</div>
<div class="sect1">
<h2 id="_using_tool_aliases"><a class="anchor" href="#_using_tool_aliases"></a>Using tool aliases</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Tools declared with an alias are executed with -T, in the same manner as -X. However, -T will remove the project deps and paths and add <code>"."</code> as a path.</p>
</div>
<div class="paragraph">
<p>Declare an alias in a deps.edn (could be project or user):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{;; ...
 :aliases {
   :linter {:deps {cool/lint-tool {:git/tag "..." :git/sha "..."}}
            :ns-default cool.lint.tool}
 }}</code></pre>
</div>
</div>
<div class="paragraph">
<p>This example invocation invokes the linter in a classpath that includes only the linter dependency (and its  transitive dependencies). The function invoked will be <code>cool.lint.tool/linter</code> formed by combining the <code>:ns-default</code> in the alias and the function name <code>lint</code> on the command line:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -T:linter lint</code></pre>
</div>
</div>
<div class="paragraph">
<p>Additional key / value argument may be passed on the command line after that, with same syntax as -X args.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_using_named_tools"><a class="anchor" href="#_using_named_tools"></a>Using named tools</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The Clojure CLI comes with programs to search for available versions of a tool (either maven or git), and to install a tool under a local name for subsequent execution. Tools additionally may provide their usage configuration (like <code>:ns-default</code>) as part of the tool, rather than every user needing to define that in an alias.</p>
</div>
<div class="sect2">
<h3 id="_find_versions"><a class="anchor" href="#_find_versions"></a>Find versions</h3>
<div class="paragraph">
<p>See <a href="deps_and_cli#find-versions">find-versions</a> for more on finding versions of a lib or tool (Maven or git).</p>
</div>
</div>
<div class="sect2">
<h3 id="_tool_installation"><a class="anchor" href="#_tool_installation"></a>Tool installation</h3>
<div class="paragraph">
<p>A tool for managing tools is automatically installed by the Clojure CLI under the name "tools". There are several useful functions provided:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://clojure.github.io/tools.tools/clojure.tools.tools.api.html#var-install"><code>install</code></a> - Installs or reinstalls a tool</p>
</li>
<li>
<p><a href="https://clojure.github.io/tools.tools/clojure.tools.tools.api.html#var-install-latest"><code>install-latest</code></a> - Installs or reinstalls the latest version of a tool</p>
</li>
<li>
<p><a href="https://clojure.github.io/tools.tools/clojure.tools.tools.api.html#var-list"><code>list</code></a> - Lists all installed tools</p>
</li>
<li>
<p><a href="https://clojure.github.io/tools.tools/clojure.tools.tools.api.html#var-remove"><code>remove</code></a> - Removes an installed tool</p>
</li>
<li>
<p><a href="https://clojure.github.io/tools.tools/clojure.tools.tools.api.html#var-show"><code>show</code></a> - Prints info and usage for a tool</p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="_install"><a class="anchor" href="#_install"></a>Install</h4>
<div class="paragraph">
<p>When you&#8217;ve determined which version of a tool to install, use the <code>install</code> function to install the tool by name.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -Ttools install ...</code></pre>
</div>
</div>
<div class="paragraph">
<p>The args to <code>install-tool</code> are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>lib - val is coord map, as per deps.edn</p>
</li>
<li>
<p><code>:as</code> - tool name, will be used for later invocations</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -Ttools install io.github.clojure/tools.deps.graph '{:git/tag "v1.0.63"}' :as deps-graph</code></pre>
</div>
</div>
<div class="paragraph">
<p>On Windows, additional <a href="deps_and_cli#quoting">escape quoting</a> is required in Powershell:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -Ttools install io.github.clojure/tools.deps.graph '{:git/tag """v1.0.63"""}' :as deps-graph</code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that git deps can be fully described at tool installation time with only a git lib name (used to form a git url by convention), and a git tag. Alternately, the coord may contain an explicit <code>:git/url</code> or <code>:git/sha</code> instead.</p>
</div>
</div>
<div class="sect3">
<h4 id="_install_latest"><a class="anchor" href="#_install_latest"></a>Install latest</h4>
<div class="paragraph">
<p>To find and install the latest version of a tool in one step:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -Ttools install-latest :lib io.github.clojure/tools.deps.graph :as deps-graph</code></pre>
</div>
</div>
<div class="paragraph">
<p>To update an existing tool to the latest version you can also just specify the tool by name:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -Ttools install-latest :tool deps-graph</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_list"><a class="anchor" href="#_list"></a>List</h4>
<div class="paragraph">
<p>To list all installed tools:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -Ttools list</code></pre>
</div>
</div>
<div class="paragraph">
<p>To remove an installed tool:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -Ttools remove :tool name</code></pre>
</div>
</div>
<div class="paragraph">
<p>Other functions will likely be added in the future.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_tool_usage"><a class="anchor" href="#_tool_usage"></a>Tool usage</h3>
<div class="paragraph">
<p>Tools may include a top-level key <code>:tools/usage</code> in their deps.edn file to publish how the tool can be used with respect to namespace context. The value is a map which may have the following keys that are the same as their usage in deps.edn aliases:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:ns-default</code> - a lib symbol indicating the default namespace when resolving functions</p>
</li>
<li>
<p><code>:ns-aliases</code> - a map of alias to lib symbol</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For example, the tools.deps.graph tool can publish the following usage in deps.edn:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:tools/usage
 {:ns-default clojure.tools.deps.graph}}</code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
<div class="paragraph">
<p>Currently, only tools that are deps.edn-based and available as either a git or local repository can provide a <code>:tools/usage</code> configuration.</p>
</div>
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_invoke_a_tool_by_name"><a class="anchor" href="#_invoke_a_tool_by_name"></a>Invoke a tool by name</h3>
<div class="paragraph">
<p>Once you&#8217;ve installed a named tool, you can invoke it with <code>-T</code> using just the tool name.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -Ttool f args...</code></pre>
</div>
</div>
<div class="paragraph">
<p>The function will be resolved using the <code>:ns-default</code> and <code>:ns-aliases</code> found in the tool&#8217;s deps.edn.</p>
</div>
<div class="paragraph">
<p>For example, for the tools.deps.graph tool declared above, it can be invoked as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -Tdeps-graph graph :output '"graph.png"'</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_best_practices_for_tool_authors"><a class="anchor" href="#_best_practices_for_tool_authors"></a>Best practices for tool authors</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Best practices:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Provide your tool as a public git library</p>
</li>
<li>
<p>Define your tool api in one or more Clojure namespaces as functions that take a map</p>
</li>
<li>
<p>Create a <code>:tools/usage</code> key in the root of your deps.edn with either an <code>:ns-default</code> and/or an <code>:ns-aliases</code> key for your api namespaces</p>
</li>
<li>
<p>Tag your git repo to create a release, using a scheme that makes sequencing obvious to users. A common convention is to use versions strings like "v1.2.3".</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Tools can provide these instructions for users:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Find tool versions: <code>clj -X:deps find-versions :lib io.github.USER/TOOL</code></p>
</li>
<li>
<p>Install tool with <code>clj -Ttools install io.github.USER/TOOL '{:git/tag "VERSION"}' :as NAME</code></p>
</li>
<li>
<p>Invoke tool with <code>clj -TNAME f args&#8230;&#8203;</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="function_protocol"><a class="anchor" href="#function_protocol"></a>Function execution protocol</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Some tools provide functions designed to be used for programmatic execution from another process, with the following constraints and expectations:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The function should take a single map argument</p>
</li>
<li>
<p>Results are returned from the function (as usual)</p>
</li>
<li>
<p>Exceptions thrown by the function will cause a failure and the exception data (ala <code>Throwable&#8594;map</code> will be conveyed to the external process, which will re-throw it in an <code>ex-info</code>)</p>
</li>
<li>
<p>Printing output will (by default) not be captured</p>
</li>
<li>
<p>Any result or exception data should be safe to print and read back to data in another process</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>There are several argument map keys that have special significance to the Clojure CLI during -X or -T. All of these keys will be removed from the argument map before the function is invoked:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:clojure.exec/invoke</code> - <code>true</code> to use this protocol</p>
</li>
<li>
<p><code>:clojure.exec/out</code> - <code>true</code> to capture and return stdout during function execution</p>
</li>
<li>
<p><code>:clojure.exec/err</code> - <code>true</code> to capture and return stderr during function execution</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The result is wrapped into a printed envelope map with the following keys and returned via the CLI stdout:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:tag</code> - either <code>:ret</code> or <code>:err</code> based on whether the function returned a result or threw an exception</p>
</li>
<li>
<p><code>:val</code> - either return value or exception data, prn to a string</p>
</li>
<li>
<p><code>:out</code> - if requested, the captured stdout return</p>
</li>
<li>
<p><code>:err</code> - if requested, the captured stderr return</p>
</li>
<li>
<p><code>:ms</code> - function execution time in ms</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>A consumer API for this protocol will be provided as of Clojure 1.12.0-alpha2.</p>
</div>
</div>
</div>
<h1 id="_command_line_reference" class="sect0"><a class="anchor" href="#_command_line_reference"></a>Command line reference</h1>
<div class="sect1">
<h2 id="_arg_map_keys"><a class="anchor" href="#_arg_map_keys"></a>Arg map keys</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This section summarizes all of the available arg map keys that <code>clj</code> uses and that can be conveyed via alias data in deps.edn. For clarity, these are separated by category, but in general, all of them can be used with <code>-X</code> (exec), <code>-A</code> (repl), and <code>-M</code> (main).</p>
</div>
<div class="ulist">
<ul>
<li>
<p>tool</p>
<div class="ulist">
<ul>
<li>
<p><code>:replace-deps</code> - map of lib to coords that should <strong>replace</strong> the project deps</p>
</li>
<li>
<p><code>:replace-paths</code> - vector of path strings that should <strong>replace</strong> the project paths</p>
</li>
</ul>
</div>
</li>
<li>
<p>resolve-deps</p>
<div class="ulist">
<ul>
<li>
<p><code>:extra-deps</code> - map of lib to coords that should be added to the root deps</p>
</li>
<li>
<p><code>:override-deps</code> - map of lib to coords that should <strong>replace</strong> deps in the root deps</p>
</li>
<li>
<p><code>:default-deps</code> - map of lib to coords that should be used if the coord is nil in root or transitive deps</p>
</li>
</ul>
</div>
</li>
<li>
<p>make-classpath-map</p>
<div class="ulist">
<ul>
<li>
<p><code>:extra-paths</code> - vector of string paths (or keyword aliases to same) to add to base paths</p>
</li>
<li>
<p><code>:classpath-overrides</code> - map of lib to string path to replace lib on classpath</p>
</li>
</ul>
</div>
</li>
<li>
<p>jvm opts</p>
<div class="ulist">
<ul>
<li>
<p><code>:jvm-opts</code> - vector of strings to pass as jvm args</p>
</li>
</ul>
</div>
</li>
<li>
<p>namespace aliasing</p>
<div class="ulist">
<ul>
<li>
<p><code>:ns-aliases</code> - map of alias symbol to namespace symbol, used to resolve symbols (such as :exec-fn)</p>
</li>
<li>
<p><code>:ns-default</code> - default namespace for unqualified symbols (such as :exec-fn)</p>
</li>
</ul>
</div>
</li>
<li>
<p>execution (-X only)</p>
<div class="ulist">
<ul>
<li>
<p><code>:exec-fn</code> - function to execute with -X</p>
</li>
<li>
<p><code>:exec-args</code> - function args to pass to -X (can be overridden at command line)</p>
</li>
</ul>
</div>
</li>
<li>
<p>main (-M only)</p>
<div class="ulist">
<ul>
<li>
<p><code>:main-opts</code> - vector of string args to pass to clojure.main</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="namespaces"><a class="anchor" href="#namespaces"></a>Namespace resolution</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Symbols in the exec-opts or argmaps (like <code>:exec-fn</code>) are resolved with the following rules:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>If function is unqualified, use the namespace in the <code>:ns-default</code> key in the arg map (if none, this is an error)</p>
</li>
<li>
<p>If function is qualified, and the qualifier is an alias in the arg map under <code>:ns-aliases</code>, use that namespace</p>
</li>
<li>
<p>Else use the fully qualified function symbol</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_keys_and_key_paths"><a class="anchor" href="#_keys_and_key_paths"></a>Keys and key paths</h2>
<div class="sectionbody">
<div class="paragraph">
<p>With the -X exec-opt you can supply key-path/value pairs on the command line. The key-path is either a single key or a vector of keys to refer to a nested key (as with <code>assoc-in</code>). Each key-path will be used to <code>assoc-in</code> to the original <code>:exec-args</code> map, overriding the value there.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code># Top key override
clj -X:my-fn :val 789

# Nested key override
clj -X:my-fn '[:my :data]' 789</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_trailing_map_argument"><a class="anchor" href="#_trailing_map_argument"></a>Trailing map argument</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In addition to passing key-path/value pairs and key paths in the command line, an optional map providing value mappings may be passed as the final argument. This map will merge with and perhaps override the previously provided key-path/value mappings:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code># Augment the arguments to my-fn
clj -X:a-tool my-fn :val 789 '{:val2 123}'

# Override the arguments to my-fn
clj -X:a-tool my-fn :val 789 '{:val 123}'

# Single map (no kvs) provides arguments to my-fn
clj -X:a-tool my-fn '{:val 789}'</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="quoting"><a class="anchor" href="#quoting"></a>Quoting keys and values</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Keys and values on the command line are read as edn. The following data can be used without quoting:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Numbers - <code>123</code>, <code>12.4</code></p>
</li>
<li>
<p>Booleans - <code>true</code>, <code>false</code></p>
</li>
<li>
<p>Nil - <code>nil</code></p>
</li>
<li>
<p>Symbols - <code>name</code>, <code>foo/bar</code></p>
</li>
<li>
<p>Keywords - <code>:id</code>, <code>:company/name</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>These data types need to be surrounded by single quotes:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Strings - <code>'"hi there"'</code> - note use of both single quotes for the shell and double quotes to be read as an edn string</p>
</li>
<li>
<p>Vectors - <code>'[1 2 3]'</code></p>
</li>
<li>
<p>Maps - <code>'{:a 1, :b 2}'</code></p>
</li>
<li>
<p>Sets - <code>'#{:a :b}'</code></p>
</li>
<li>
<p>Lists - <code>'(1 2 3)'</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>On Windows, WSL2 shells can follow the advice above, but on cmd.exe or Powershell, additional escape quoting is required for string values. Unfortunately the combination of quoting rules for converting command line Windows program arguments and Powershell quoting and word splitting are <a href="https://stackoverflow.com/a/59681993/7671">very complicated</a>.</p>
</div>
<div class="paragraph">
<p>To pass a string value at the top level, if the string value does not have spaces, you can use <code>'\"str\"'</code>. If the string value does have spaces (or not) you should use <code>'"""str value"""'</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code>PS D:&gt; clj -X clojure.core/prn :string1 '\"no-spaces\"' :string2 '"""has spaces"""'
{:string1 "no-spaces", :string2 "has spaces"}</code></pre>
</div>
</div>
<div class="paragraph">
<p>For string values nested inside other collections, use double quotes if there are spaces and triple quotes if there are not:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code>PS D:&gt; clj -X clojure.core/prn :val '{:s1 """nospaces""" :s2 ""has spaces""}'
{:val {:s1 "nospaces", :s2 "has spaces"}}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="env_vars"><a class="anchor" href="#env_vars"></a>Environment variables</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The following environment variables can influence CLI execution (many are described in more detail elsewhere on this page):</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>CLJ_CONFIG</code> - user config directory, used to store user deps.edn, tool config, and cpcache for commands without a project deps.edn (default = <code>~/.clojure</code>)</p>
</li>
<li>
<p><code>XDG_CONFIG_HOME</code> - if this standard var is set, will use <code>$XDG_CONFIG_HOME/clojure</code> as the user config directory</p>
</li>
<li>
<p><code>CLJ_CACHE</code> - user cache directory, (defaults = <code>&lt;config-dir&gt;/.cpcache</code>)</p>
</li>
<li>
<p><code>XDG_CACHE_HOME</code> - if this standard var is set, will use <code>$XDG_CACHE_HOME/clojure</code> as the user cache directory</p>
</li>
<li>
<p><code>CLJ_JVM_OPTS</code> - JVM options to be included in internal calls to the classpath building process, which can be useful to provide things like a truststore with a self-signed certifate using to download internal artifacts</p>
</li>
<li>
<p><code>JAVA_CMD</code> - path to Java executable to use</p>
</li>
<li>
<p><code>JAVA_HOME</code> - if no <code>$JAVA_CMD</code> and no <code>java</code> on path, will try to use <code>$JAVA_HOME/bin/java</code></p>
</li>
<li>
<p><code>JAVA_OPTS</code> - JVM options to be included in the user command being executed - not cached. Included before any <code>-J</code> command line parameters and any <code>:jvm-opts</code></p>
</li>
<li>
<p><code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, and other AWS env vars are used when accessing S3-based Maven repos</p>
</li>
<li>
<p><code>GITLIBS</code> - the path to the gitlibs storage directory (default = <code>~/.gitlibs</code>)</p>
</li>
<li>
<p><code>GITLIBS_COMMAND</code> - the git command to run (default = <code>git</code>)</p>
</li>
<li>
<p><code>GITLIBS_DEBUG</code> - set to true to print all git commands being run</p>
</li>
<li>
<p><code>CLOJURE_CLI_ALLOW_HTTP_REPO</code> - set to true to allow http:// repository urls (this may make your dependency downloads subject to man-in-the-middle attacks)</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_glossary"><a class="anchor" href="#_glossary"></a>Glossary</h2>
<div class="sectionbody">
<div class="paragraph">
<p><strong>Library</strong></p>
</div>
<div class="paragraph">
<p>A collection of Clojure or other code that solves some problem, managed under a single directory root. In typical (but not exclusive) usage, most GitHub repos hold a single library. Each library has a distinct namespaced name - in Maven this is determined by the group-id/artifact-id.</p>
</div>
<div class="paragraph">
<p><strong>Artifact</strong></p>
</div>
<div class="paragraph">
<p>A library released in a container file, capturing the state of the library at a point in time, possibly subjected to some build process, labeled with a version, containing some manifest documenting its dependencies, and packaged in e.g. a jar.</p>
</div>
<div class="paragraph">
<p><strong>Coordinate</strong></p>
</div>
<div class="paragraph">
<p>A particular version of a library chosen for use, with information sufficient to obtain and use the library.</p>
</div>
<div class="paragraph">
<p><strong>Dependency</strong></p>
</div>
<div class="paragraph">
<p>An expression, at the project/library level, that the declaring library needs the declared library in order to provide some of its functions. Must at least specify library name, might also specify version and other attrs. Actual (functional) dependencies are more fine-grained.</p>
</div>
<div class="paragraph">
<p>Dependency types:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>maven artifacts (artifact-based)</p>
</li>
<li>
<p>git libraries (source-based)</p>
</li>
<li>
<p>local library (source-based) - a local directory</p>
</li>
<li>
<p>local artifact (artifact-based) - a local jar file</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><strong>Classpath (and roots/paths)</strong></p>
</div>
<div class="paragraph">
<p>An ordered list of local 'places' (filesystem directories and/or jars) that will form the root paths for searches of requires/imports at runtime, supplied as an argument to Java which controls the semantics. We discourage order-dependence in the classpath, which implies a namespace or resource file is duplicated (and thus likely broken).</p>
</div>
<div class="paragraph">
<p><strong>Expansion</strong></p>
</div>
<div class="paragraph">
<p>Given a set of root dependencies, a full closure of the transitive dependency set.</p>
</div>
<div class="paragraph">
<p><strong>Resolution</strong></p>
</div>
<div class="paragraph">
<p>Given a collection of root dependencies and additional modifications, creates a fully-expanded dependency tree, then produces a mapping from each library mentioned to a single version to be used that would satisfy all dependents, as well as the local path to that source or artifact. We will also include those dependents for each entry. Conflicts arise only if libraries depend on different major versions of a library.</p>
</div>
<div class="paragraph">
<p><strong>Classpath creation</strong></p>
</div>
<div class="paragraph">
<p>Creates a classpath from a resolved lib-map and optional extra local lib paths. Current plan for lib-map does not provide for control over resulting order.</p>
</div>
<div class="paragraph">
<p><strong>Version</strong></p>
</div>
<div class="paragraph">
<p>A human numbering system whose interpretation is determined by convention. Often x.y.z. Must protect against 'semver' interpretation, which allows libraries to break users while keeping the name the same. Ascending by convention - higher numbers are 'later', vague compatibility with lower/earlier.</p>
</div>
<div class="paragraph">
<p><strong>Version difference</strong></p>
</div>
<div class="paragraph">
<p>This occurs when the dependency expansion contains the same library with more than one "version" specified but where there is a relative ordering (either by number or by sha etc). Version differences can be resolved by choosing the "later" or "newest" version when that relationship can be established.</p>
</div>
<div class="paragraph">
<p><strong>Version conflict</strong></p>
</div>
<div class="paragraph">
<p>A version conflict occurs when the dependency expansion contains the same library with more than one "version" such that the best choice cannot be automatically chosen:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>semver version breakage (major version changed)</p>
</li>
<li>
<p>github shas that do not contain any common root or ancestry (two shas on different branches or unrelated repos, for example)</p>
</li>
<li>
<p>versions that cross different repos or repo types such that no relative relationship can be established</p>
</li>
</ul>
</div>
<div class="paragraph">
<p><strong>Maven Repo</strong></p>
</div>
<div class="paragraph">
<p>A repository of library artifacts - e.g. Maven central or Clojars</p>
</div>
</div>
</div>
<h1 id="_tools" class="sect0"><a class="anchor" href="#_tools"></a>Tools</h1>
<div class="paragraph">
<p>See the project&#8217;s wiki for a <a href="https://github.com/clojure/tools.deps.alpha/wiki/Tools">list of tools that use or work with tools.deps (or the clojure tools)</a> - tools for project creation, packaging, and much more.</p>
</div>


<div class="clj-prev-next-container">
  
  
</div>

    </div>
  </div>
</div>

  <div class="w-section clj-footer">
    <div class="w-container clj-footer-links-container">
      <div class="w-row">
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Community</h6>
            <a href="/community/resources" class="clj-footer-link">Resources</a>
            <a href="/community/contributing" class="clj-footer-link">Contributing</a>
            <a href="/community/companies" class="clj-footer-link">Companies</a>
            <a href="/community/contributing_site" class="clj-footer-link">Site</a>
          <h6 class="clj-footer-heading">Legal</h6>
            <a href="/community/license" class="clj-footer-link">License</a>
            <a href="/privacy" class="clj-footer-link">Privacy Policy</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Documentation</h6>
            <a href="/about/rationale" class="clj-footer-link">Overview</a>
            <a href="/reference/documentation" class="clj-footer-link">Reference</a>
            <a href="/api/api" class="clj-footer-link">API</a>
            <a href="/guides/guides" class="clj-footer-link">Guides</a>
            <a href="/community/libraries" class="clj-footer-link">Libraries &amp; Tools</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Updates</h6>
            <a href="/news/news" class="clj-footer-link">News</a>
            <a href="/community/events" class="clj-footer-link">Events</a>
          <h6 class="clj-footer-heading">ETC</h6>
            <a href="https://www.youtube.com/user/ClojureTV" class="clj-footer-link">ClojureTV</a>
            <a href="/community/books" class="clj-footer-link">Books</a>
            <a href="/community/swag" class="clj-footer-link">Swag</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Code</h6>
            <a href="/releases/downloads" class="clj-footer-link">Releases</a>
            <a href="https://github.com/clojure/clojure/" class="clj-footer-link">Source</a>
            <a href="http://clojurescript.org" class="clj-footer-link">ClojureScript</a>
            <a href="/about/clojureclr" class="clj-footer-link">ClojureCLR</a>
        </div>
      </div>
    </div>
    <div class="w-container clj-footer-legal-container">
      <div class="w-clearfix clj-footer-legal">
        <div class="clj-footer-logo">&nbsp;</div>
        <div class="clj-footer-legal-links">
          <div class="clj-footer-copyright">Copyright 2008-2022 Rich Hickey | <a class="clj-footer-sub-link" href="/privacy">Privacy Policy</a><br/>Logo &amp; site design by Tom Hickey
          </div>
          <div class="clj-footer-designed-by">Published 2023-12-18<br/>Update <a class="clj-footer-sub-link" href="https://github.com/clojure/clojure-site/blob/master/content/reference/deps_and_cli.adoc">this page</a>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script type="text/javascript" src="/js/webflow.js"></script>
  <script type="text/javascript" src="/js/highlight.pack.js"></script>
  <script>
  $(document).ready( (event) => {
    $('pre code').each((index, obj) => {
      $(obj).addClass($(obj).attr("data-lang"));
      hljs.highlightBlock(obj);
    });
  });
  </script>
  <!--[if lte IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif]-->
</body>
</html>
