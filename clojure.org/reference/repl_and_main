<!DOCTYPE html>
<!-- This site was created in Webflow. http://www.webflow.com-->
<!-- Last Published: Fri Nov 13 2015 01:48:45 GMT+0000 (UTC) -->
<html lang="en" data-wf-site="56414d6fc8c27cad0f4e12e7" data-wf-page="5643ac587b1f28dc58ed6b89">
<head>
  <meta charset="utf-8">
  <title>Clojure - The REPL and main entry points</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="generator" content="Webflow">
  <meta name="google-site-verification" content="a30CDuC9UBifM7EL575LK9a4TEE6mNfWbKqXIoSZChg" />
  <meta name="google-site-verification" content="iXqpntr4CN3JRM1sVm5D_YzZw8bFRizBaTVycwqii2E" />
  <meta name="keywords" content="clojure,programming" />
  <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,600;1,300;1,400;1,600&family=PT+Serif:ital@0;1&&family=Source+Code+Pro:wght@500&display=swap">
  <link rel="stylesheet" type="text/css" href="/css/normalize.css">
  <link rel="stylesheet" type="text/css" href="/css/webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/clojureorg.webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/asciidoctor-mod.css">
  <link type="text/css" href="/css/default-en.css" rel="stylesheet">
  <link type="text/css" href="/css/default.css" rel="stylesheet">
  <link type="text/css" href="/css/search-result.css" rel="stylesheet">
  <link rel="alternate" type="application/atom+xml" title="News" href="/feed.xml" />
  <script type="text/javascript" src="/js/modernizr.js"></script>
  <link rel="shortcut icon" type="image/x-icon" href="/images/clojure-logo-icon-32.png">
  <link rel="apple-touch-icon" href="/images/clojure-logo-icon-256.png">
  <!-- Matomo -->
  <script>
    var _paq = window._paq = window._paq || [];
    /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
      var u="https://cognitect.matomo.cloud/";
      _paq.push(['setTrackerUrl', u+'matomo.php']);
      _paq.push(['setSiteId', '9']);
      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
      g.async=true; g.src='//cdn.matomo.cloud/cognitect.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);
    })();
  </script>
<!-- End Matomo Code -->
  <script type="text/javascript">
    function searchClj(obj) {
      let e = document.getElementById("searchType");
      document.getElementById("hiddenSearch").value=e.value;
    }
  </script>
</head>
<body>
  <div data-collapse="none" data-animation="default" data-duration="400" data-contain="1" class="w-nav clj-navbar">
    <div class="w-container">
      <a href="/index" class="w-nav-brand w-clearfix clj-logo-container"><img width="60" src="/images/clojure-logo-120b.png" class="clj-logo" alt="Clojure logo">
        <div class="clj-logo-text">Clojure</div>
      </a>
      <nav role="navigation" class="w-nav-menu clj-nav-menu"><a href="/about/rationale" class="w-nav-link clj-nav-link">Overview</a><a href="/reference/documentation" class="w-nav-link clj-nav-link">Reference‚Äç</a><a href="/api/api" class="w-nav-link clj-nav-link">API</a><a href="/releases/downloads" class="w-nav-link clj-nav-link">Releases</a><a href="/guides/guides" class="w-nav-link clj-nav-link">Guides</a><a href="/community/success_stories" class="w-nav-link clj-nav-link">Community</a><a href="/dev/dev" class="w-nav-link clj-nav-link">Dev</a><a href="/news/news" class="w-nav-link clj-nav-link">News</a><a href="#" data-ix="search-click-trigger" class="w-nav-link clj-nav-link clj-nav-search">&#xed11;</a>
      </nav>
      <div class="w-nav-button clj-menu-button">
        <div class="w-icon-nav-menu"></div>
      </div>
    </div>
  </div>
  <div data-ix="hide-search" class="w-section clj-search-section">
    <div class="w-container">
      <div class="w-form clj-search-form-wrapper">
        <form id="wf-form-Search-Form" name="wf-form-Search-Form" action="https://duckduckgo.com/" method="get" onSubmit="searchClj(this)">
          <div class="w-row">
            <div class="w-col w-col-6 w-col-small-6">
              <input id="hiddenSearch" type="hidden" name="sites" value="www.clojure.org">
              <input name="q" id="q" type="text" placeholder="Search clojure.org reference, guides, and API" title="Search text" autofocus="autofocus" class="w-input clj-search-input">
            </div>
            <div class="w-col w-col-3 w-col-small-3 clj-search-type">
              <select name="searchType" id="searchType" class="w-select clj-search-type">
                <option value="www.clojure.org">clojure.org</option>
                <option value="ask.clojure.org">ask.clojure.org</option>
              </select>
            </div>
            <div class="w-col w-col-3 w-col-small-3">
              <input type="submit" value="Search" class="w-button clj-search-submit">
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

<div class="w-section clj-content-section">
  <div class="w-container">
    <div class="clj-section-nav-container">
      <div data-collapse="small" data-animation="default" data-duration="200" data-contain="1" class="w-nav clj-section-navbar">
        <div class="w-container">
          <nav role="navigation" class="w-nav-menu clj-section-nav-menu">
            <a href="reader" class="w-nav-link clj-section-nav-item-link">The Reader</a>
            <a href="repl_and_main" class="w-nav-link clj-section-nav-item-link">The REPL and main</a>
            <a href="evaluation" class="w-nav-link clj-section-nav-item-link">Evaluation</a>
            <a href="special_forms" class="w-nav-link clj-section-nav-item-link">Special Forms</a>
            <a href="macros" class="w-nav-link clj-section-nav-item-link">Macros</a>
            <a href="other_functions" class="w-nav-link clj-section-nav-item-link">Other Functions</a>
            <a href="data_structures" class="w-nav-link clj-section-nav-item-link">Data Structures</a>
            <a href="datatypes" class="w-nav-link clj-section-nav-item-link">Datatypes</a>
            <a href="sequences" class="w-nav-link clj-section-nav-item-link">Sequences</a>
            <a href="transients" class="w-nav-link clj-section-nav-item-link">Transients</a>
            <a href="transducers" class="w-nav-link clj-section-nav-item-link">Transducers</a>
            <a href="multimethods" class="w-nav-link clj-section-nav-item-link">Multimethods and Hierarchies</a>
            <a href="protocols" class="w-nav-link clj-section-nav-item-link">Protocols</a>
            <a href="metadata" class="w-nav-link clj-section-nav-item-link">Metadata</a>
            <a href="namespaces" class="w-nav-link clj-section-nav-item-link">Namespaces</a>
            <a href="libs" class="w-nav-link clj-section-nav-item-link">Libs</a>
            <a href="vars" class="w-nav-link clj-section-nav-item-link">Vars and Environments</a>
            <a href="refs" class="w-nav-link clj-section-nav-item-link">Refs and Transactions</a>
            <a href="agents" class="w-nav-link clj-section-nav-item-link">Agents</a>
            <a href="atoms" class="w-nav-link clj-section-nav-item-link">Atoms</a>
            <a href="reducers" class="w-nav-link clj-section-nav-item-link">Reducers</a>
            <a href="java_interop" class="w-nav-link clj-section-nav-item-link">Java Interop</a>
            <a href="compilation" class="w-nav-link clj-section-nav-item-link">Compilation and Class Generation</a>
            <a href="other_libraries" class="w-nav-link clj-section-nav-item-link">Other Libraries</a>
            <a href="lisps" class="w-nav-link clj-section-nav-item-link">Differences with Lisps</a>
            <a href="deps_and_cli" class="w-nav-link clj-section-nav-item-link">Deps and CLI</a>
            <a href="deps_edn" class="w-nav-link clj-section-nav-item-link">deps.edn</a>
          </nav>
          <div data-ix="toggle-section-nav-icon" class="w-nav-button w-clearfix clj-section-nav-toggle">
            <div class="clj-section-nav-text">REPL and main</div>
            <div class="clj-section-nav-icon-closed">&#xeab2;</div>
            <div data-ix="init-hide-section-nav-icon-open" class="clj-section-nav-icon-open">&#xeab9;</div>
          </div>
        </div>
      </div>
    </div>
    <div class="clj-content-container">

      <h1>The REPL and main entry points</h1>

      <div id="preamble">
<div class="sectionbody">
<div id="toc" class="toc">
<div id="toctitle" class="title">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_the_clojure_main_namespace">The clojure.main namespace</a></li>
<li><a href="#_clojure_main_help">clojure.main --help</a></li>
<li><a href="#_launching_a_repl">Launching a REPL</a></li>
<li><a href="#_launching_a_script">Launching a Script</a></li>
<li><a href="#_passing_arguments_to_a_script">Passing arguments to a Script</a></li>
<li><a href="#_error_printing">Error printing</a>
<ul class="sectlevel2">
<li><a href="#_at_repl">At REPL</a></li>
<li><a href="#_as_launcher">As launcher</a></li>
</ul>
</li>
<li><a href="#_the_user_namespace">The <code>user</code> namespace</a></li>
<li><a href="#_tap">tap</a></li>
<li><a href="#_launching_a_socket_server">Launching a Socket Server</a></li>
<li><a href="#_related_functions">Related functions</a></li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_the_clojure_main_namespace"><a class="anchor" href="#_the_clojure_main_namespace"></a>The clojure.main namespace</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <code>clojure.main</code> namespace provides functions that allow Clojure programs and interactive sessions to be launched via Java&#8217;s application launcher tool <code>java</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_clojure_main_help"><a class="anchor" href="#_clojure_main_help"></a>clojure.main --help</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The <code>clojure.main/main</code> entry point accepts a variety of arguments and flags.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>With no options or args, runs an interactive Read-Eval-Print Loop</p>
</li>
<li>
<p>init options:</p>
<div class="ulist">
<ul>
<li>
<p>-i, --init path Load a file or resource</p>
</li>
<li>
<p>-e, --eval string Evaluate expressions in string; print non-nil values</p>
</li>
<li>
<p>--report target Report uncaught exception to "file" (default), "stderr", or "none", overrides System property clojure.main.report (added in 1.10.1)</p>
</li>
</ul>
</div>
</li>
<li>
<p>main options:</p>
<div class="ulist">
<ul>
<li>
<p>-r, --repl Run a repl</p>
</li>
<li>
<p>path Run a script from a file or resource</p>
</li>
<li>
<p>- Run a script from standard input</p>
</li>
<li>
<p>-m, --main A namespace to find a -main function for execution</p>
</li>
<li>
<p>-h, -?, --help Print this help message and exit</p>
</li>
</ul>
</div>
</li>
<li>
<p>operation:</p>
<div class="ulist">
<ul>
<li>
<p>Establishes thread-local bindings for commonly set!-able vars</p>
</li>
<li>
<p>Enters the user namespace</p>
</li>
<li>
<p>Binds <code>*command-line-args*</code> to a seq of strings containing command line args that appear after any main option</p>
</li>
<li>
<p>Runs all init options in order</p>
</li>
<li>
<p>Runs a repl or script if requested</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>The init options may be repeated and mixed freely, but must appear before
any main option. The appearance of any eval option before running a repl
suppresses the usual repl greeting message: "Clojure ~(clojure-version)".</p>
</div>
<div class="paragraph">
<p>Paths may be absolute or relative in the filesystem or relative to
classpath. Classpath-relative paths have prefix of @ or @/</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_launching_a_repl"><a class="anchor" href="#_launching_a_repl"></a>Launching a REPL</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The simplest way to launch a Clojure <em>repl</em> is to use the <a href="xref/../../guides/getting_started">clj</a> command tool, which invokes clojure.main:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ clj
Clojure 1.11.1
user=&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>The REPL prompt shows the name of the current namespace (*ns*), which defaults to <em>user</em>.</p>
</div>
<div class="paragraph">
<p>Several special vars are available when using the REPL:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>*1, *2, *3 - hold the result of the last three expressions that were evaluated</p>
</li>
<li>
<p>*e - holds the result of the last exception.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The <a href="https://clojure.github.io/clojure/clojure.repl-api.html">clojure.repl</a> namespace has a number of useful functions for inspecting the source and documentation of available functions:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://clojure.github.io/clojure/clojure.repl-api.html#clojure.repl/doc">doc</a> - prints the docstring for a var given its name</p>
</li>
<li>
<p><a href="https://clojure.github.io/clojure/clojure.repl-api.html#clojure.repl/find-doc">find-doc</a> - prints the docstring for any var whose doc or name matches the pattern</p>
</li>
<li>
<p><a href="https://clojure.github.io/clojure/clojure.repl-api.html#clojure.repl/apropos">apropos</a> - returns a seq of definitions matching a regex</p>
</li>
<li>
<p><a href="https://clojure.github.io/clojure/clojure.repl-api.html#clojure.repl/source">source</a> - prints the source for a symbol</p>
</li>
<li>
<p><a href="https://clojure.github.io/clojure/clojure.repl-api.html#clojure.repl/pst">pst</a> - <strong>p</strong>rint <strong>s</strong>tack <strong>t</strong>race for a given exception or *e by default</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_launching_a_script"><a class="anchor" href="#_launching_a_script"></a>Launching a Script</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To run a file full of Clojure code as a script, pass the path to the script to <code>clojure.main</code> as an argument:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -M /path/to/myscript.clj</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_passing_arguments_to_a_script"><a class="anchor" href="#_passing_arguments_to_a_script"></a>Passing arguments to a Script</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To pass in arguments to a script, pass them in as further arguments when launching <code>clojure.main</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -M /path/to/myscript.clj arg1 arg2 arg3</code></pre>
</div>
</div>
<div class="paragraph">
<p>The arguments will be provided to your program as a seq of strings bound to the var <code>*command-line-args*</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">*command-line-args* =&gt; ("arg1" "arg2" "arg3")</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_error_printing"><a class="anchor" href="#_error_printing"></a>Error printing</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_at_repl"><a class="anchor" href="#_at_repl"></a>At REPL</h3>
<div class="paragraph">
<p>As of Clojure 1.10, Clojure errors categorized into one of several phases:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:read-source</code> - an error thrown while reading characters at the REPL or from a source file.</p>
</li>
<li>
<p><code>:macro-syntax-check</code> - a syntax error found in the syntax of a macro call, either from spec or from a macro throwing IllegalArgumentException, IllegalStateException, or ExceptionInfo.</p>
</li>
<li>
<p><code>:macroexpansion</code> - all other errors thrown during macro evaluation are categorized as macroexpansion errors.</p>
</li>
<li>
<p><code>:compile-syntax-check</code> - a syntax error caught during compilation.</p>
</li>
<li>
<p><code>:compilation</code> - non-syntax errors caught during compilation.</p>
</li>
<li>
<p><code>:execution</code> - any errors thrown at execution time.</p>
</li>
<li>
<p><code>:read-eval-result</code> - any error thrown while reading the result of execution (only applicable for REPLs that read the result).</p>
</li>
<li>
<p><code>:print-eval-result</code> - any error thrown while printing the result of execution.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Exceptions thrown during all phases (exception <code>:execution</code>) will have ex-data attached with one or more of the following keys:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>:clojure.error/phase</code> - phase indicator</p>
</li>
<li>
<p><code>:clojure.error/source</code> - file name (no path)</p>
</li>
<li>
<p><code>:clojure.error/line</code> - integer line number</p>
</li>
<li>
<p><code>:clojure.error/column</code> - integer column number</p>
</li>
<li>
<p><code>:clojure.error/symbol</code> - symbol being expanded/compiled/invoked</p>
</li>
<li>
<p><code>:clojure.error/class</code> - cause exception class symbol</p>
</li>
<li>
<p><code>:clojure.error/cause</code> - cause exception message</p>
</li>
<li>
<p><code>:clojure.error/spec</code> - explain-data for a spec error</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The clojure.main REPL includes the categorization and printing of errors by default, but the individual steps of this process are exposed as well for other REPLs to use, specifically the functions:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/Throwable-%3Emap">Throwable->map</a> - converts an Exception chain into Clojure data</p>
</li>
<li>
<p><a href="https://clojure.github.io/clojure/clojure.main-api.html#clojure.main/ex-triage">ex-triage</a> - analyzes Clojure exception data to pull relevant information from the top and bottom of the exception chain into a map describing just the set of data needed to format an exception string</p>
</li>
<li>
<p><a href="https://clojure.github.io/clojure/clojure.main-api.html#clojure.main/ex-str">ex-str</a> - produces a phase-appropriate message given a set of exception data</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The clojure.main REPL combines these functions in a pipeline to produce the printed exception message: <code>(-> ex Throwable->map clojure.main/ex-triage clojure.main/ex-str)</code>. Other REPLs can use one or more pieces of this pipeline as necessary when building or customizing their exception printing.</p>
</div>
</div>
<div class="sect2">
<h3 id="_as_launcher"><a class="anchor" href="#_as_launcher"></a>As launcher</h3>
<div class="paragraph">
<p>Up to Clojure 1.10.0, clojure.main when used as a program launcher (with -m, -e, or with a script), uncaught exceptions would be automatically printed along with the full nested stack trace. In this case, the error triage and printing process above was not applied.</p>
</div>
<div class="paragraph">
<p>As of Clojure 1.10.1, uncaught exceptions will now be caught and printed according to the same error triage and printing functionality as the Clojure REPL. The full stack trace, ex-info, and other information will be printed to a target specified by the configuration.</p>
</div>
<div class="paragraph">
<p>The three available error targets are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>file</code> - write to a temp file (default, falls back to <code>stderr</code>)</p>
</li>
<li>
<p><code>stderr</code> - write to stderr stream</p>
</li>
<li>
<p><code>none</code> - don&#8217;t write</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>These error targets can be specified either as options to clojure.main, or as Java system properties (flags take precedence). When invoking clojure.main (or using the clj tool), use <code>--report &lt;target&gt;</code>. For Java system property, use <code>-Dclojure.main.report=&lt;target&gt;</code>.</p>
</div>
<div class="paragraph">
<p>Other programs may wish to take advantage of this functionality, and it is available in <a href="https://clojure.github.io/clojure/clojure.main-api.html#clojure.main/report-error">report-error</a>, which takes a Throwable and optionally the :target.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_the_user_namespace"><a class="anchor" href="#_the_user_namespace"></a>The <code>user</code> namespace</h2>
<div class="sectionbody">
<div class="paragraph">
<p>By default, the Clojure REPL starts in the <code>user</code> namespace and this namespace is typically used for exploratory work.</p>
</div>
<div class="paragraph">
<p>The Clojure REPL automatically loads the following namespaces and refers the following functions:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>clojure.repl</code> - <a href="https://clojure.github.io/clojure/clojure.repl-api.html#clojure.repl/source"><code>source</code></a> <a href="https://clojure.github.io/clojure/clojure.repl-api.html#clojure.repl/apropos"><code>apropos</code></a> <a href="https://clojure.github.io/clojure/clojure.repl-api.html#clojure.repl/dir"><code>dir</code></a> <a href="https://clojure.github.io/clojure/clojure.repl-api.html#clojure.repl/pst"><code>pst</code></a> <a href="https://clojure.github.io/clojure/clojure.repl-api.html#clojure.repl/doc"><code>doc</code></a> <a href="https://clojure.github.io/clojure/clojure.repl-api.html#clojure.repl/find-doc"><code>find-doc</code></a></p>
</li>
<li>
<p><code>clojure.java.javadoc</code> - <a href="https://clojure.github.io/clojure/clojure.java.javadoc-api.html#clojure.java.javadoc/javadoc"><code>javadoc</code></a></p>
</li>
<li>
<p><code>clojure.pprint</code> - <a href="https://clojure.github.io/clojure/clojure.pprint-api.html#clojure.pprint/pp"><code>pp</code></a> <a href="https://clojure.github.io/clojure/clojure.pprint-api.html#clojure.pprint/pprint"><code>pprint</code></a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If you switch to a different namespace (with <code>in-ns</code> or <code>ns</code>), these functions will not be available unless referred there explicitly.</p>
</div>
<div class="paragraph">
<p>Also, the Clojure runtime will look for and load the <code>user</code> namespace on startup if it is found. Generally, this should only be used to provide development-time faciliities, and not in a production scenario.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_tap"><a class="anchor" href="#_tap"></a>tap</h2>
<div class="sectionbody">
<div class="paragraph">
<p>tap is a shared, globally accessible system for distributing a series of informational or diagnostic values to a set of (presumably effectful) handler functions. It can be used as a better debug <code>prn</code>, or for facilities like logging etc.</p>
</div>
<div class="paragraph">
<p><a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/tap%3E"><code>tap></code></a> sends a value to the set of taps. Taps can be added with <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/add-tap"><code>add-tap</code></a> and will be called with any value sent to tap&gt;. The tap function may (briefly) block (e.g. for streams) and will never impede calls to tap&gt;, but blocking indefinitely may cause tap values to be dropped. If no taps are registered, tap&gt; discards. Remove taps with <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/remove-tap"><code>remove-tap</code></a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_launching_a_socket_server"><a class="anchor" href="#_launching_a_socket_server"></a>Launching a Socket Server</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The Clojure runtime now has the ability to start a socket server at initialization based on system properties. One expected use for this is serving a socket-based REPL, but it also has many other potential uses for dynamically adding server capability to existing programs without code changes.</p>
</div>
<div class="paragraph">
<p>A socket server will be started for each JVM system property like "clojure.server.&lt;server-name&gt;". The value for this property is an edn map representing the configuration of the socket server with the following properties:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>server-daemon</code> - defaults to true, socket server thread doesn&#8217;t block exit</p>
</li>
<li>
<p><code>address</code> - host or address, defaults to loopback</p>
</li>
<li>
<p><code>port</code> - positive integer, required</p>
</li>
<li>
<p><code>accept</code> - namespaced symbol of function to invoke on socket accept, required</p>
</li>
<li>
<p><code>args</code> - sequential collection of args to pass to accept</p>
</li>
<li>
<p><code>bind-err</code> - defaults to true, binds <code>*err*</code> to socket out stream</p>
</li>
<li>
<p><code>client-daemon</code> - defaults to true, socket client thread doesn&#8217;t block exit</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Additionally, there is a repl function provided that is slightly customized for use with the socket server in <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core.server/repl">clojure.core.server/repl</a>.</p>
</div>
<div class="paragraph">
<p>Following is an example of starting a socket server with a repl listener. This can be added to any existing Clojure program to allow it to accept external REPL clients via a local connection to port 5555.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">-Dclojure.server.repl="{:port 5555 :accept clojure.core.server/repl}"</code></pre>
</div>
</div>
<div class="paragraph">
<p>With the Clojure CLI, use <code>-J</code> flag to pass the option to the JVM (note that this will also start a local REPL in addition to the socket REPL):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">clj -J-Dclojure.server.repl="{:port 5555 :accept clojure.core.server/repl}"</code></pre>
</div>
</div>
<div class="paragraph">
<p>An example client you can use to connect to this repl remotely is telnet (could also use <code>netcat</code>):</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ telnet 127.0.0.1 5555
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
user=&gt; (println "hello")
hello</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can instruct the server to close the client repl session by using the special command <code>:repl/quit</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure-repl">user=&gt; :repl/quit
Connection closed by foreign host.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Also see:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://clojure.atlassian.net/browse/CLJ-1671">CLJ-1671</a></p>
</li>
<li>
<p><a href="https://archive.clojure.org/design-wiki/display/design/Socket%2BServer%2BREPL.html">Socket Server and REPL design page</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_related_functions"><a class="anchor" href="#_related_functions"></a>Related functions</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Main entry point: <code><a href="https://clojure.github.io/clojure/clojure.main-api.html#clojure.main/main">clojure.main/main</a></code></p>
</div>
<div class="paragraph">
<p>Reusable REPL: <code><a href="https://clojure.github.io/clojure/clojure.main-api.html#clojure.main/repl">clojure.main/repl</a></code></p>
</div>
<div class="paragraph">
<p>Error handling: <code><a href="https://clojure.github.io/clojure/clojure.main-api.html#clojure.main/ex-triage">clojure.main/ex-triage</a></code> <code><a href="https://clojure.github.io/clojure/clojure.main-api.html#clojure.main/ex-str">clojure.main/ex-str</a></code></p>
</div>
<div class="paragraph">
<p>Allowing set! for the customary REPL vars: <code><a href="https://clojure.github.io/clojure/clojure.main-api.html#clojure.main/with-bindings">clojure.main/with-bindings</a></code></p>
</div>
<div class="paragraph">
<p>Socket server control: <code><a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core.server/start-server">clojure.core.server/start-server</a></code> <code><a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core.server/stop-server">clojure.core.server/stop-server</a></code> <code><a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core.server/stop-servers">clojure.core.server/stop-servers</a></code></p>
</div>
<div class="paragraph">
<p>Socket repl: <code><a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core.server/repl">clojure.core.server/repl</a></code></p>
</div>
</div>
</div>


<div class="clj-prev-next-container">
  <a href="reader" class="clj-prev-link"><span class="clj-prevnext-link-icon">&#xeab5;</span>&nbsp;Reader</a>
  <a href="evaluation" class="clj-next-link">Evaluation&nbsp;<span class="clj-prevnext-link-icon">&#xeab8;</span></a>
</div>

    </div>
  </div>
</div>

  <div class="w-section clj-footer">
    <div class="w-container clj-footer-links-container">
      <div class="w-row">
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Community</h6>
            <a href="/community/resources" class="clj-footer-link">Resources</a>
            <a href="/community/contributing" class="clj-footer-link">Contributing</a>
            <a href="/community/companies" class="clj-footer-link">Companies</a>
            <a href="/community/contributing_site" class="clj-footer-link">Site</a>
          <h6 class="clj-footer-heading">Legal</h6>
            <a href="/community/license" class="clj-footer-link">License</a>
            <a href="/privacy" class="clj-footer-link">Privacy Policy</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Documentation</h6>
            <a href="/about/rationale" class="clj-footer-link">Overview</a>
            <a href="/reference/documentation" class="clj-footer-link">Reference</a>
            <a href="/api/api" class="clj-footer-link">API</a>
            <a href="/guides/guides" class="clj-footer-link">Guides</a>
            <a href="/community/libraries" class="clj-footer-link">Libraries &amp; Tools</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Updates</h6>
            <a href="/news/news" class="clj-footer-link">News</a>
            <a href="/community/events" class="clj-footer-link">Events</a>
          <h6 class="clj-footer-heading">ETC</h6>
            <a href="https://www.youtube.com/user/ClojureTV" class="clj-footer-link">ClojureTV</a>
            <a href="/community/books" class="clj-footer-link">Books</a>
            <a href="/community/swag" class="clj-footer-link">Swag</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Code</h6>
            <a href="/releases/downloads" class="clj-footer-link">Releases</a>
            <a href="https://github.com/clojure/clojure/" class="clj-footer-link">Source</a>
            <a href="http://clojurescript.org" class="clj-footer-link">ClojureScript</a>
            <a href="/about/clojureclr" class="clj-footer-link">ClojureCLR</a>
        </div>
      </div>
    </div>
    <div class="w-container clj-footer-legal-container">
      <div class="w-clearfix clj-footer-legal">
        <div class="clj-footer-logo">&nbsp;</div>
        <div class="clj-footer-legal-links">
          <div class="clj-footer-copyright">Copyright 2008-2022 Rich Hickey | <a class="clj-footer-sub-link" href="/privacy">Privacy Policy</a><br/>Logo &amp; site design by Tom Hickey
          </div>
          <div class="clj-footer-designed-by">Published 2023-12-18<br/>Update <a class="clj-footer-sub-link" href="https://github.com/clojure/clojure-site/blob/master/content/reference/repl_and_main.adoc">this page</a>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script type="text/javascript" src="/js/webflow.js"></script>
  <script type="text/javascript" src="/js/highlight.pack.js"></script>
  <script>
  $(document).ready( (event) => {
    $('pre code').each((index, obj) => {
      $(obj).addClass($(obj).attr("data-lang"));
      hljs.highlightBlock(obj);
    });
  });
  </script>
  <!--[if lte IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif]-->
</body>
</html>
