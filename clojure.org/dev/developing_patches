<!DOCTYPE html>
<!-- This site was created in Webflow. http://www.webflow.com-->
<!-- Last Published: Fri Nov 13 2015 01:48:45 GMT+0000 (UTC) -->
<html lang="en" data-wf-site="56414d6fc8c27cad0f4e12e7" data-wf-page="5643ac587b1f28dc58ed6b89">
<head>
  <meta charset="utf-8">
  <title>Clojure - Developing Patches</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="generator" content="Webflow">
  <meta name="google-site-verification" content="a30CDuC9UBifM7EL575LK9a4TEE6mNfWbKqXIoSZChg" />
  <meta name="google-site-verification" content="iXqpntr4CN3JRM1sVm5D_YzZw8bFRizBaTVycwqii2E" />
  <meta name="keywords" content="clojure,programming" />
  <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,600;1,300;1,400;1,600&family=PT+Serif:ital@0;1&&family=Source+Code+Pro:wght@500&display=swap">
  <link rel="stylesheet" type="text/css" href="/css/normalize.css">
  <link rel="stylesheet" type="text/css" href="/css/webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/clojureorg.webflow.css">
  <link rel="stylesheet" type="text/css" href="/css/asciidoctor-mod.css">
  <link type="text/css" href="/css/default-en.css" rel="stylesheet">
  <link type="text/css" href="/css/default.css" rel="stylesheet">
  <link type="text/css" href="/css/search-result.css" rel="stylesheet">
  <link rel="alternate" type="application/atom+xml" title="News" href="/feed.xml" />
  <script type="text/javascript" src="/js/modernizr.js"></script>
  <link rel="shortcut icon" type="image/x-icon" href="/images/clojure-logo-icon-32.png">
  <link rel="apple-touch-icon" href="/images/clojure-logo-icon-256.png">
  <!-- Matomo -->
  <script>
    var _paq = window._paq = window._paq || [];
    /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
      var u="https://cognitect.matomo.cloud/";
      _paq.push(['setTrackerUrl', u+'matomo.php']);
      _paq.push(['setSiteId', '9']);
      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
      g.async=true; g.src='//cdn.matomo.cloud/cognitect.matomo.cloud/matomo.js'; s.parentNode.insertBefore(g,s);
    })();
  </script>
<!-- End Matomo Code -->
  <script type="text/javascript">
    function searchClj(obj) {
      let e = document.getElementById("searchType");
      document.getElementById("hiddenSearch").value=e.value;
    }
  </script>
</head>
<body>
  <div data-collapse="none" data-animation="default" data-duration="400" data-contain="1" class="w-nav clj-navbar">
    <div class="w-container">
      <a href="/index" class="w-nav-brand w-clearfix clj-logo-container"><img width="60" src="/images/clojure-logo-120b.png" class="clj-logo" alt="Clojure logo">
        <div class="clj-logo-text">Clojure</div>
      </a>
      <nav role="navigation" class="w-nav-menu clj-nav-menu"><a href="/about/rationale" class="w-nav-link clj-nav-link">Overview</a><a href="/reference/documentation" class="w-nav-link clj-nav-link">Reference‚Äç</a><a href="/api/api" class="w-nav-link clj-nav-link">API</a><a href="/releases/downloads" class="w-nav-link clj-nav-link">Releases</a><a href="/guides/guides" class="w-nav-link clj-nav-link">Guides</a><a href="/community/success_stories" class="w-nav-link clj-nav-link">Community</a><a href="/dev/dev" class="w-nav-link clj-nav-link">Dev</a><a href="/news/news" class="w-nav-link clj-nav-link">News</a><a href="#" data-ix="search-click-trigger" class="w-nav-link clj-nav-link clj-nav-search">&#xed11;</a>
      </nav>
      <div class="w-nav-button clj-menu-button">
        <div class="w-icon-nav-menu"></div>
      </div>
    </div>
  </div>
  <div data-ix="hide-search" class="w-section clj-search-section">
    <div class="w-container">
      <div class="w-form clj-search-form-wrapper">
        <form id="wf-form-Search-Form" name="wf-form-Search-Form" action="https://duckduckgo.com/" method="get" onSubmit="searchClj(this)">
          <div class="w-row">
            <div class="w-col w-col-6 w-col-small-6">
              <input id="hiddenSearch" type="hidden" name="sites" value="www.clojure.org">
              <input name="q" id="q" type="text" placeholder="Search clojure.org reference, guides, and API" title="Search text" autofocus="autofocus" class="w-input clj-search-input">
            </div>
            <div class="w-col w-col-3 w-col-small-3 clj-search-type">
              <select name="searchType" id="searchType" class="w-select clj-search-type">
                <option value="www.clojure.org">clojure.org</option>
                <option value="ask.clojure.org">ask.clojure.org</option>
              </select>
            </div>
            <div class="w-col w-col-3 w-col-small-3">
              <input type="submit" value="Search" class="w-button clj-search-submit">
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

<div class="w-section clj-content-section">
  <div class="w-container">
    <div class="clj-section-nav-container">
      <div data-collapse="small" data-animation="default" data-duration="200" data-contain="1" class="w-nav clj-section-navbar">
        <div class="w-container">
          <nav role="navigation" class="w-nav-menu clj-section-nav-menu">
            <div class="w-nav-link clj-section-nav-heading">Language Dev</div>
            <a href="dev" class="w-nav-link clj-section-nav-item-link">Development</a>
            <a href="contributor_agreement" class="w-nav-link clj-section-nav-item-link">Contributor Agreement</a>
            <a href="workflow" class="w-nav-link clj-section-nav-item-link">Workflow</a>
            <a href="creating_tickets" class="w-nav-link clj-section-nav-item-link">Creating Tickets</a>
            <a href="developing_patches" class="w-nav-link clj-section-nav-item-link">Developing Patches</a>
            <a href="screening_tickets" class="w-nav-link clj-section-nav-item-link">Screening Tickets</a>
            <a href="contributors" class="w-nav-link clj-section-nav-item-link">Contributors</a>
            <div class="w-nav-link clj-section-nav-heading">Contrib Libs</div>
            <a href="contrib_libs" class="w-nav-link clj-section-nav-item-link">Contrib libs</a>
            <a href="contrib_history" class="w-nav-link clj-section-nav-item-link">Contrib lib history</a>
            <div class="w-nav-link clj-section-nav-heading">Resources</div>
            <a href="https://github.com/clojure/clojure" class="w-nav-link clj-section-nav-item-link">Source</a>
            <a href="https://clojure.atlassian.net/servicedesk/customer/portal/1" class="w-nav-link clj-section-nav-item-link">Support Portal</a>
            <a href="https://clojure.atlassian.net/projects/CLJ" class="w-nav-link clj-section-nav-item-link">Issue Tracker</a>
            <a href="https://build.clojure.org" class="w-nav-link clj-section-nav-item-link">Build box</a>
            <a href="/releases/downloads" class="w-nav-link clj-section-nav-item-link">Downloads</a>
            <a href="https://clojure.github.io/clojure" class="w-nav-link clj-section-nav-item-link">API Docs</a>
            <a href="../community/license" class="w-nav-link clj-section-nav-item-link">License</a>
          </nav>
        </div>
      </div>
    </div>
    <div class="clj-content-container">

      <h1>Developing Patches</h1>

      <div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>If you&#8217;re interested in supplying patches or contributing to Clojure, please see the <a href="dev">development overview</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_before_you_code"><a class="anchor" href="#_before_you_code"></a>Before You Code</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you consider the following items before you begin coding, you will produce a patch that is easier to assess and more likely to be accepted:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>What problem are you trying to solve?  Prior to any patch you should have a problem statement, and it should be included in the description of the patch.</p>
</li>
<li>
<p>What is your solution approach?  Please make this clear in the description, so that it does not have to be inferred from the code.</p>
</li>
<li>
<p>Have you vetted your idea with the community?  Please discuss in Slack or mailing list with members of the core team if you can. (Not necessary for everything, like typos.)</p>
</li>
<li>
<p>Make a table of considered alternatives, and their tradeoffs. Describe why the chosen solution is the best choice.</p>
</li>
<li>
<p>How will you prove to others your patch works?  Plan to include tests. Example-based tests are ok, but generative tests are preferred.</p>
</li>
<li>
<p>Document the changes in the patch in the ticket. Anything that can help a screener understand what changes you made and why will make their job easier.</p>
</li>
<li>
<p>Don&#8217;t do too much! Submit small patches that address specific problems, don&#8217;t add anything extra, even (especially!) "cleanup" of nearby code. This only serves to confuse the intent of the patch.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_while_your_patch_is_being_considered"><a class="anchor" href="#_while_your_patch_is_being_considered"></a>While Your Patch is Being Considered</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Keep the description up-to-date as comments come in. It is very time-consuming to reconstruct the current state of a ticket by reading the comment thread.</p>
</li>
<li>
<p>Rally support. Votes are good, and comments from other users reviewing the ticket are even better.</p>
</li>
<li>
<p>As tickets grow, make sure you document clearly which patch(es) are active.  Don&#8217;t do this by deleting old patches, just refer to patches by name in the comments.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_coding"><a class="anchor" href="#_coding"></a>Coding</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Once you&#8217;re ready to craft your code, the first thing you&#8217;ll need is a clone of the Clojure or appropriate repository. The examples below are for the Clojure project&#8201;&#8212;&#8201;for submissions to Clojure itself:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ git clone git://github.com/clojure/clojure.git
$ cd clojure</code></pre>
</div>
</div>
<div class="paragraph">
<p>Next, create a new branch for yourself:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ git checkout -b fixbug42
Switched to a new branch "fixbug42"</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now you&#8217;re ready to get hacking. Before you start working, make sure all existing regression tests still pass e.g. For Clojure, use Maven:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ mvn clean test
...lots of output...
test:
[INFO] Executed tasks
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:26 min
[INFO] Finished at: 2018-12-05T14:36:54-06:00
[INFO] ------------------------------------------------------------------------</code></pre>
</div>
</div>
<div class="paragraph">
<p>Once you&#8217;ve finished making your changes you need to commit them. Please use a commit message that begins with the JIRA number (CLJ-xyz) and includes a statement about the problem or enhancement the changes are in service to!</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ git commit -a -m "CLJ-932 fixed annoying bug"
Created commit 8f7c712: fixed annoying bug
1 files changed, 0 insertions(+), 1 deletions(-)</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now that you&#8217;ve made your changes it&#8217;s time to get them into a patch. You need to update the repo and fix any conflicts you had.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ git checkout master
Switched to branch "master"
$ git pull
...
$ git checkout fixbug42
Switched to branch "fixbug42"
$ git rebase master</code></pre>
</div>
</div>
<div class="paragraph">
<p>Once you&#8217;ve fixed any conflicts, you&#8217;re ready to create a patch:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ git format-patch master --stdout -U8 &gt; clj-932-1.patch</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_adding_patches"><a class="anchor" href="#_adding_patches"></a>Adding patches</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Now you can attach that patch file to the JIRA ticket.  In the More Actions menu near the top of the page, select Attach Files.  Please read and follow the recommendations below when writing comments about your attached patch.  Screeners have limited time available for screening.  You are more likely to get your patch approved if you can be as clear as you can, and as efficient with their time as possible.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Please use .patch or .diff (not .txt) as a suffix for patch files.</p>
</li>
<li>
<p>Read your patch file before attaching it.  If you see things like white space changes unrelated to the portion of code you are modifying, please edit and remove those changes and regenerate the patch.  Also, while it is nice when developing to do multiple commits in a sequence, with explanations of each commit, patch reviewers usually prefer to have all changes squashed to a single commit for review.</p>
</li>
<li>
<p>Using 'git add --patch' to stage your changes will make it easier to avoid committing extraneous changes.</p>
</li>
<li>
<p>Please use a name different from all existing attachments on the ticket.  JIRA allows you to add multiple attachments with the same name, but later ones do not replace earlier ones.  This can lead to confusion when referring to patches by name.</p>
</li>
<li>
<p>Include the file name and date of the patch in any comments referring to it.  It is possible to match up comments with patches based on the date and time, but it is tedious and error prone.</p>
</li>
<li>
<p>To get email whenever the ticket is updated, click on the word "Watch" in the top right area of the page.  This can help you know when someone else comments on your patch or creates a new one, etc.  Click "Watching" if you want to stop the update emails for a ticket.  You may want to verify that the automated emails get through your spam filter.  Emails will be sent to the address associated with your JIRA account, and will come from the address <a href="mailto:jira@dev.clojure.org">jira@dev.clojure.org</a>.</p>
</li>
<li>
<p>If you create a new patch that incorporates one or more earlier ones, please combine them all into one patch file, and indicate in your comments that you have done this (with file names and dates of the patches you are superseding). One exception to this is when there are significant largely independent contributions from multiple people (for example, one made a code change and the other wrote the tests) and both want credit. In that case, a single patch file with multiple commits is fine. However, we&#8217;d like to avoid multiple patches that repeatedly modify the same code.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Mark the ticket as having a patch ready for screening by editing the Patch field.  Click the Edit button near the top left of the page for the ticket.  In the next page find the heading "Patch" with a popup menu next to it.  Select "Code" or "Code and Test" from that menu, then click the Update button at the bottom of the page.  If you do not see an Edit button on the page for the ticket, and you have signed a CA, ask on the developer&#8217;s email list or on #clojure-dev in Clojurians Slack to be given permission to edit Jira tickets.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_removing_patches"><a class="anchor" href="#_removing_patches"></a>Removing patches</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To remove a patch (e.g. because it is no longer relevant), go to the page for the ticket and look for the "Attachments" heading beneath the Description text.  Far to the right is a plus sign and a triangle.  Click on the triangle and select "Manage Attachments" from the menu.  Think carefully on which one you want to delete, and click the trash can icon next to it.  Note: most people have permission to remove their own attachments, but not those added by someone else.</p>
</div>
<div class="paragraph">
<p>In general, you don&#8217;t need to remove old patches. Just let them accumulate and track the most relevant in the ticket description.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_updating_stale_patches"><a class="anchor" href="#_updating_stale_patches"></a>Updating stale patches</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A stale patch means one that used to apply cleanly to the latest Clojure master version, but due to commits made since the patch was created, it no longer does.  In particular, the output of this command:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ git am --keep-cr -s --ignore-whitespace &lt; patch_file.patch</code></pre>
</div>
</div>
<div class="paragraph">
<p>includes 'Patch failed' and 'To restore the original branch and stop patching, run "git am --abort"'.  You should do the "git am --abort" to get rid of state of the failed patch attempt left behind by the command above.</p>
</div>
<div class="paragraph">
<p>"git am" is very "fragile", meaning that if the patch_file was created with one version of the source code, all it takes for the command to fail is a change in any of the lines of context present in the patch file, even if it is not one of the lines being changed by the patch.  This is especially common for files containing unit tests, because people usually add new tests at the end of such a file, and so the lines of context before the new test change if two different patches add a new test to the end of the same file.</p>
</div>
<div class="paragraph">
<p>To apply such a patch, use the --reject flag:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ git apply --reject patch_file.patch</code></pre>
</div>
</div>
<div class="paragraph">
<p>The output will give you some hints of whether each "hunk" of the patch file succeeded or failed.  If they all succeed, then likely the only thing wrong with the patch file is that a few context lines were changed.  If any hunks fail, patch creates files ending with ".rej" containing rejected hunks that it did not apply, and you can focus on those as places where the source code likely changed more significantly.  A command like this will find them all:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ find . -name '*.rej'</code></pre>
</div>
</div>
<div class="paragraph">
<p>You will need to look at those rejected hunks, perhaps think about them for a bit to see if and how they still apply, and apply them by hand-editing the source code yourself.</p>
</div>
<div class="paragraph">
<p>When creating a new git patch with:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ git format-patch master --stdout -U8 &gt; patch_file.patch</code></pre>
</div>
</div>
<div class="paragraph">
<p>it puts your name and the current date near the top of the file.  If the only changes that you have made are in the context lines, please keep the original author&#8217;s credit intact by copying the name and date from the original patch that you started from, then upload that.</p>
</div>
<div class="paragraph">
<p>If you write unit tests where there were none in the original patch, but didn&#8217;t otherwise modify the original patch, and you would like your name in the commit log for your work, create a separate patch of test additions with your name on it, leaving the original author&#8217;s name on the updated patch.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_screening_a_patch"><a class="anchor" href="#_screening_a_patch"></a>Screening a patch</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you are a screener testing a patch, you can create a new branch and apply the patch to start working with it:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ git checkout -b testxyz
$ git am --keep-cr -s --ignore-whitespace &lt; patch_file.patch</code></pre>
</div>
</div>
<div class="paragraph">
<p>And you can throw that branch away when you&#8217;re done with:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ git checkout master
$ git branch -D testxyz</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_how_to_run_all_clojure_tests"><a class="anchor" href="#_how_to_run_all_clojure_tests"></a>How To Run All Clojure Tests</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ mvn clean test</code></pre>
</div>
</div>
<div class="paragraph">
<p>To reduce the duration of the pseudo-randomly generated generative tests from 60 sec down to 1 sec (for example), edit the file src/script/run_test_generative.clj and change the 60000 number.  Just be careful not to include such changes in any patches you submit.  (The file was called src/scripts/run_tests.clj in Clojure 1.6.0 and earlier)</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_run_an_individual_test"><a class="anchor" href="#_run_an_individual_test"></a>Run An Individual Test</h2>
<div class="sectionbody">
<div class="paragraph">
<p>First, build the latest Clojure without running any tests:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ mvn -Dmaven.test.skip=true clean package
# If no compilation errors, mvn command above creates target/clojure-VERSION-master-SNAPSHOT.jar</code></pre>
</div>
</div>
<div class="paragraph">
<p>The commands above build a Clojure jar file, but neither compile nor run the tests.</p>
</div>
<div class="paragraph">
<p>Create a deps.edn file describing dependencies you might need:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="clojure">{:paths ["test"]
 :deps
 {org.clojure/clojure {:mvn/version "RELEASE"}
  org.clojure/test.check {:mvn/version "0.9.0"}
  org.clojure/test.generative {:mvn/version "0.5.2"}}
 :aliases
 {:dbg {:classpath-overrides {org.clojure/clojure "target/classes"}
        :extra-deps {criterium/criterium {:mvn/version "0.4.4"}}}}}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Start a repl using clj and run individual tests from it:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ clj -A:dbg
Clojure ...
;; We're testing with clojure.test
=&gt; (require 'clojure.test)
nil
;; Load a test file
user=&gt; (require 'clojure.test-clojure.data)
nil
;; Run it
user=&gt; (clojure.test/run-tests 'clojure.test-clojure.data)

Testing clojure.test-clojure.data
Ran 1 tests containing 17 assertions.
0 failures, 0 errors.
{:type :summary, :pass 17, :test 1, :error 0, :fail 0}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Start a repl and run a generative test from it:</p>
</div>
<div class="paragraph">
<p>Generative tests use additional testing jars (installed when you run ./antsetup.sh). Thus, you&#8217;ll need to have some additional classpath which antsetup.sh will leave in the maven-classpath file. If you are on *nix, the easiest way to leverage this file is:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ clj -A:dbg
Clojure ...
;; Install some clojure.test extensions
user=&gt; (require 'clojure.test-helper)
nil
;; Load a test file that uses test.generative
user=&gt; (require 'clojure.test-clojure.reader)
nil
;; Load the test.generative runner ns
user=&gt; (use 'clojure.test.generative.runner)
nil
;; Test a specification on 1 thread for 200 ms
user=&gt; (run 1 200 #'clojure.test-clojure.reader/types-that-should-roundtrip)
{:iter 60, :seed 1255541066, :test clojure.test-clojure.reader/types-that-should-roundtrip}
nil</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_other_options_for_building_clojure"><a class="anchor" href="#_other_options_for_building_clojure"></a>Other options for building Clojure</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_building_clojure_without_direct_linking"><a class="anchor" href="#_building_clojure_without_direct_linking"></a>Building Clojure without direct linking</h3>
<div class="paragraph">
<p>By default, Clojure is built with direct linking enabled.  While this improves performance, it means that if a function A calls a function B, both within Clojure, then using spec to instrument B will leave A still calling the original function B, not the instrumented version.  If you wish to instrument B and have other functions in Clojure call the instrumented version, one way is to build Clojure with direct linking disabled.</p>
</div>
<div class="paragraph">
<p>Edit the file build.xml to replace "true" with "false" in the following line, which is inside of the section beginning with 'target name="compile-clojure"':</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="xml">&lt;sysproperty key="clojure.compiler.direct-linking" value="true"/&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Then use your preferred method of building Clojure from source, e.g.:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="prettyprint highlight"><code data-lang="shell">$ mvn -Dmaven.test.skip=true clean install</code></pre>
</div>
</div>
</div>
</div>
</div>


<div class="clj-prev-next-container">
  
  
</div>

    </div>
  </div>
</div>

  <div class="w-section clj-footer">
    <div class="w-container clj-footer-links-container">
      <div class="w-row">
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Community</h6>
            <a href="/community/resources" class="clj-footer-link">Resources</a>
            <a href="/community/contributing" class="clj-footer-link">Contributing</a>
            <a href="/community/companies" class="clj-footer-link">Companies</a>
            <a href="/community/contributing_site" class="clj-footer-link">Site</a>
          <h6 class="clj-footer-heading">Legal</h6>
            <a href="/community/license" class="clj-footer-link">License</a>
            <a href="/privacy" class="clj-footer-link">Privacy Policy</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Documentation</h6>
            <a href="/about/rationale" class="clj-footer-link">Overview</a>
            <a href="/reference/documentation" class="clj-footer-link">Reference</a>
            <a href="/api/api" class="clj-footer-link">API</a>
            <a href="/guides/guides" class="clj-footer-link">Guides</a>
            <a href="/community/libraries" class="clj-footer-link">Libraries &amp; Tools</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Updates</h6>
            <a href="/news/news" class="clj-footer-link">News</a>
            <a href="/community/events" class="clj-footer-link">Events</a>
          <h6 class="clj-footer-heading">ETC</h6>
            <a href="https://www.youtube.com/user/ClojureTV" class="clj-footer-link">ClojureTV</a>
            <a href="/community/books" class="clj-footer-link">Books</a>
            <a href="/community/swag" class="clj-footer-link">Swag</a>
        </div>
        <div class="w-col w-col-3 w-col-small-6 w-col-tiny-6">
          <h6 class="clj-footer-heading">Code</h6>
            <a href="/releases/downloads" class="clj-footer-link">Releases</a>
            <a href="https://github.com/clojure/clojure/" class="clj-footer-link">Source</a>
            <a href="http://clojurescript.org" class="clj-footer-link">ClojureScript</a>
            <a href="/about/clojureclr" class="clj-footer-link">ClojureCLR</a>
        </div>
      </div>
    </div>
    <div class="w-container clj-footer-legal-container">
      <div class="w-clearfix clj-footer-legal">
        <div class="clj-footer-logo">&nbsp;</div>
        <div class="clj-footer-legal-links">
          <div class="clj-footer-copyright">Copyright 2008-2022 Rich Hickey | <a class="clj-footer-sub-link" href="/privacy">Privacy Policy</a><br/>Logo &amp; site design by Tom Hickey
          </div>
          <div class="clj-footer-designed-by">Published 2023-12-18<br/>Update <a class="clj-footer-sub-link" href="https://github.com/clojure/clojure-site/blob/master/content/dev/developing_patches.adoc">this page</a>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script type="text/javascript" src="/js/webflow.js"></script>
  <script type="text/javascript" src="/js/highlight.pack.js"></script>
  <script>
  $(document).ready( (event) => {
    $('pre code').each((index, obj) => {
      $(obj).addClass($(obj).attr("data-lang"));
      hljs.highlightBlock(obj);
    });
  });
  </script>
  <!--[if lte IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif]-->
</body>
</html>
